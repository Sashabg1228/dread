
Receive_try.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002124  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002230  08002230  00012230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800225c  0800225c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800225c  0800225c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800225c  0800225c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800225c  0800225c  0001225c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002260  08002260  00012260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  08002270  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08002270  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000562b  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001671  00000000  00000000  000256a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000698  00000000  00000000  00026d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004d4  00000000  00000000  000273b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016ca5  00000000  00000000  00027884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007a9d  00000000  00000000  0003e529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008102a  00000000  00000000  00045fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001890  00000000  00000000  000c6ff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000c8880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002218 	.word	0x08002218

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002218 	.word	0x08002218

0800014c <ce_enable>:
extern SPI_HandleTypeDef hspi1;
#define NRF24_SPI 	&hspi1


void ce_enable (void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF24L01_CE_GPIO_Port, NRF24L01_CE_Pin, GPIO_PIN_SET);
 8000150:	2201      	movs	r2, #1
 8000152:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000156:	4802      	ldr	r0, [pc, #8]	; (8000160 <ce_enable+0x14>)
 8000158:	f000 fe8e 	bl	8000e78 <HAL_GPIO_WritePin>
}
 800015c:	bf00      	nop
 800015e:	bd80      	pop	{r7, pc}
 8000160:	40010800 	.word	0x40010800

08000164 <ce_disable>:
void ce_disable (void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF24L01_CE_GPIO_Port, NRF24L01_CE_Pin, GPIO_PIN_RESET);
 8000168:	2200      	movs	r2, #0
 800016a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800016e:	4802      	ldr	r0, [pc, #8]	; (8000178 <ce_disable+0x14>)
 8000170:	f000 fe82 	bl	8000e78 <HAL_GPIO_WritePin>
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	40010800 	.word	0x40010800

0800017c <csn_select>:

void csn_select (void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF24L01_CSN_GPIO_Port, NRF24L01_CSN_Pin, GPIO_PIN_RESET);
 8000180:	2200      	movs	r2, #0
 8000182:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000186:	4802      	ldr	r0, [pc, #8]	; (8000190 <csn_select+0x14>)
 8000188:	f000 fe76 	bl	8000e78 <HAL_GPIO_WritePin>
}
 800018c:	bf00      	nop
 800018e:	bd80      	pop	{r7, pc}
 8000190:	40010800 	.word	0x40010800

08000194 <csn_unselect>:
void csn_unselect (void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF24L01_CSN_GPIO_Port, NRF24L01_CSN_Pin, GPIO_PIN_SET);
 8000198:	2201      	movs	r2, #1
 800019a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800019e:	4802      	ldr	r0, [pc, #8]	; (80001a8 <csn_unselect+0x14>)
 80001a0:	f000 fe6a 	bl	8000e78 <HAL_GPIO_WritePin>
}
 80001a4:	bf00      	nop
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	40010800 	.word	0x40010800

080001ac <nrf24_write_reg>:


// write single byte to the particular register
void nrf24_write_reg (const uint8_t reg, const uint8_t data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	4603      	mov	r3, r0
 80001b4:	460a      	mov	r2, r1
 80001b6:	71fb      	strb	r3, [r7, #7]
 80001b8:	4613      	mov	r3, r2
 80001ba:	71bb      	strb	r3, [r7, #6]
  uint8_t buffer[2];
  buffer[0] = reg | (1 << 5);
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	f043 0320 	orr.w	r3, r3, #32
 80001c2:	b2db      	uxtb	r3, r3
 80001c4:	733b      	strb	r3, [r7, #12]
  buffer[1] = data;
 80001c6:	79bb      	ldrb	r3, [r7, #6]
 80001c8:	737b      	strb	r3, [r7, #13]

  // Pull CSN pin LOW to select the device
  csn_select();
 80001ca:	f7ff ffd7 	bl	800017c <csn_select>

  HAL_SPI_Transmit(NRF24_SPI, buffer, 2, 1000);
 80001ce:	f107 010c 	add.w	r1, r7, #12
 80001d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d6:	2202      	movs	r2, #2
 80001d8:	4804      	ldr	r0, [pc, #16]	; (80001ec <nrf24_write_reg+0x40>)
 80001da:	f001 fadf 	bl	800179c <HAL_SPI_Transmit>

  // Pull CSN pin HIGH to unselect the divice
  csn_unselect();
 80001de:	f7ff ffd9 	bl	8000194 <csn_unselect>
}
 80001e2:	bf00      	nop
 80001e4:	3710      	adds	r7, #16
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	2000002c 	.word	0x2000002c

080001f0 <nrf24_write_reg_multi>:
// write multiple bytes to the particular register
void nrf24_write_reg_multi (const uint8_t reg, const uint8_t *data, const size_t size)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b086      	sub	sp, #24
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	60b9      	str	r1, [r7, #8]
 80001fa:	607a      	str	r2, [r7, #4]
 80001fc:	73fb      	strb	r3, [r7, #15]
  uint8_t buffer[6];
  buffer[0] = reg | (1 << 5);
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	f043 0320 	orr.w	r3, r3, #32
 8000204:	b2db      	uxtb	r3, r3
 8000206:	743b      	strb	r3, [r7, #16]
  buffer[1] = data[0];
 8000208:	68bb      	ldr	r3, [r7, #8]
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	747b      	strb	r3, [r7, #17]
  buffer[2] = data[1];
 800020e:	68bb      	ldr	r3, [r7, #8]
 8000210:	3301      	adds	r3, #1
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	74bb      	strb	r3, [r7, #18]
  buffer[3] = data[2];
 8000216:	68bb      	ldr	r3, [r7, #8]
 8000218:	3302      	adds	r3, #2
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	74fb      	strb	r3, [r7, #19]
  buffer[4] = data[3];
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	3303      	adds	r3, #3
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	753b      	strb	r3, [r7, #20]
  buffer[5] = data[4];
 8000226:	68bb      	ldr	r3, [r7, #8]
 8000228:	3304      	adds	r3, #4
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	757b      	strb	r3, [r7, #21]

  // Pull CSN pin LOW to select the device
  csn_select();
 800022e:	f7ff ffa5 	bl	800017c <csn_select>

  HAL_SPI_Transmit(NRF24_SPI, buffer, size + 1, 1000);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	b29b      	uxth	r3, r3
 8000236:	3301      	adds	r3, #1
 8000238:	b29a      	uxth	r2, r3
 800023a:	f107 0110 	add.w	r1, r7, #16
 800023e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000242:	4804      	ldr	r0, [pc, #16]	; (8000254 <nrf24_write_reg_multi+0x64>)
 8000244:	f001 faaa 	bl	800179c <HAL_SPI_Transmit>

  // Pull CSN pin HIGH to unselect the divice
  csn_unselect();
 8000248:	f7ff ffa4 	bl	8000194 <csn_unselect>
}
 800024c:	bf00      	nop
 800024e:	3718      	adds	r7, #24
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	2000002c 	.word	0x2000002c

08000258 <nrf24_read_reg>:

// read single byte from the particular register
uint8_t nrf24_read_reg (uint8_t reg)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	71fb      	strb	r3, [r7, #7]
  uint8_t data = 0;
 8000262:	2300      	movs	r3, #0
 8000264:	73fb      	strb	r3, [r7, #15]

  // Pull CSN pin LOW to select the device
  csn_select();
 8000266:	f7ff ff89 	bl	800017c <csn_select>

  HAL_SPI_Transmit(NRF24_SPI, &reg, 1, 100);
 800026a:	1df9      	adds	r1, r7, #7
 800026c:	2364      	movs	r3, #100	; 0x64
 800026e:	2201      	movs	r2, #1
 8000270:	4808      	ldr	r0, [pc, #32]	; (8000294 <nrf24_read_reg+0x3c>)
 8000272:	f001 fa93 	bl	800179c <HAL_SPI_Transmit>
  HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8000276:	f107 010f 	add.w	r1, r7, #15
 800027a:	2364      	movs	r3, #100	; 0x64
 800027c:	2201      	movs	r2, #1
 800027e:	4805      	ldr	r0, [pc, #20]	; (8000294 <nrf24_read_reg+0x3c>)
 8000280:	f001 fbcf 	bl	8001a22 <HAL_SPI_Receive>

  // Pull CSN pin HIGH to unselect the divice
  csn_unselect();
 8000284:	f7ff ff86 	bl	8000194 <csn_unselect>

  return data;
 8000288:	7bfb      	ldrb	r3, [r7, #15]
}
 800028a:	4618      	mov	r0, r3
 800028c:	3710      	adds	r7, #16
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	2000002c 	.word	0x2000002c

08000298 <NRF24_init>:


// initialize the RF module
// wait 1.5 ms after completion
void NRF24_init (void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  // disable the device before initializing
  ce_disable();
 800029c:	f7ff ff62 	bl	8000164 <ce_disable>

  nrf24_write_reg(CONFIG, 0);		// to be configured later
 80002a0:	2100      	movs	r1, #0
 80002a2:	2000      	movs	r0, #0
 80002a4:	f7ff ff82 	bl	80001ac <nrf24_write_reg>
  nrf24_write_reg(EN_AA, 0); 		// No auto ACK
 80002a8:	2100      	movs	r1, #0
 80002aa:	2001      	movs	r0, #1
 80002ac:	f7ff ff7e 	bl	80001ac <nrf24_write_reg>
  nrf24_write_reg(EN_RXADDR, 0);	// disabling the data pipes
 80002b0:	2100      	movs	r1, #0
 80002b2:	2002      	movs	r0, #2
 80002b4:	f7ff ff7a 	bl	80001ac <nrf24_write_reg>
  nrf24_write_reg(SETUP_AW, 0x03);	// TX/RX address length = 5 bytes
 80002b8:	2103      	movs	r1, #3
 80002ba:	2003      	movs	r0, #3
 80002bc:	f7ff ff76 	bl	80001ac <nrf24_write_reg>
  nrf24_write_reg(SETUP_RETR, 0);	// No retransmissions
 80002c0:	2100      	movs	r1, #0
 80002c2:	2004      	movs	r0, #4
 80002c4:	f7ff ff72 	bl	80001ac <nrf24_write_reg>
  nrf24_write_reg(RF_CH, 0);		// will be set up during TX or RX configuration
 80002c8:	2100      	movs	r1, #0
 80002ca:	2005      	movs	r0, #5
 80002cc:	f7ff ff6e 	bl	80001ac <nrf24_write_reg>
  nrf24_write_reg(RF_SETUP, 0x06);	// Output power = 0db, data rate = 1 Mbps
 80002d0:	2106      	movs	r1, #6
 80002d2:	2006      	movs	r0, #6
 80002d4:	f7ff ff6a 	bl	80001ac <nrf24_write_reg>
}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}

080002dc <NRF24_RX_mode>:
////////////////////////////////////////////////////////////////////////////////
////////// RECIEVER ////////// RECIEVER ////////// RECIEVER ////////////////////
////////////////////////////////////////////////////////////////////////////////
// set up the RX mode
void NRF24_RX_mode (const uint8_t *address, const uint16_t channel)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
 80002e4:	460b      	mov	r3, r1
 80002e6:	807b      	strh	r3, [r7, #2]
  nrf24_write_reg(RF_CH, channel);		// select the frequency channel
 80002e8:	887b      	ldrh	r3, [r7, #2]
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	4619      	mov	r1, r3
 80002ee:	2005      	movs	r0, #5
 80002f0:	f7ff ff5c 	bl	80001ac <nrf24_write_reg>

  // select data pipe 1
  uint8_t en_rxaddr = nrf24_read_reg(EN_RXADDR);
 80002f4:	2002      	movs	r0, #2
 80002f6:	f7ff ffaf 	bl	8000258 <nrf24_read_reg>
 80002fa:	4603      	mov	r3, r0
 80002fc:	73fb      	strb	r3, [r7, #15]
  en_rxaddr |= (1 << 1);
 80002fe:	7bfb      	ldrb	r3, [r7, #15]
 8000300:	f043 0302 	orr.w	r3, r3, #2
 8000304:	73fb      	strb	r3, [r7, #15]
  nrf24_write_reg(EN_RXADDR, en_rxaddr);
 8000306:	7bfb      	ldrb	r3, [r7, #15]
 8000308:	4619      	mov	r1, r3
 800030a:	2002      	movs	r0, #2
 800030c:	f7ff ff4e 	bl	80001ac <nrf24_write_reg>

  nrf24_write_reg_multi(RX_ADDR_P1, address, 5);	// set up the TX address
 8000310:	2205      	movs	r2, #5
 8000312:	6879      	ldr	r1, [r7, #4]
 8000314:	200b      	movs	r0, #11
 8000316:	f7ff ff6b 	bl	80001f0 <nrf24_write_reg_multi>

  nrf24_write_reg(RX_PW_P1, sizeof(Payload));		// payload lenght of pipe 1
 800031a:	2104      	movs	r1, #4
 800031c:	2012      	movs	r0, #18
 800031e:	f7ff ff45 	bl	80001ac <nrf24_write_reg>

  // power up the device
  uint8_t config = nrf24_read_reg(CONFIG);
 8000322:	2000      	movs	r0, #0
 8000324:	f7ff ff98 	bl	8000258 <nrf24_read_reg>
 8000328:	4603      	mov	r3, r0
 800032a:	73bb      	strb	r3, [r7, #14]
  //config |= (1 << 4) | (1 << 1) | (1 << 0);		// MAX_RT IRQ disabled; Power up; PRX
  config |= (1 << 1) | (1 << 0);		// Power up; PRX
 800032c:	7bbb      	ldrb	r3, [r7, #14]
 800032e:	f043 0303 	orr.w	r3, r3, #3
 8000332:	73bb      	strb	r3, [r7, #14]
  nrf24_write_reg(CONFIG, config);
 8000334:	7bbb      	ldrb	r3, [r7, #14]
 8000336:	4619      	mov	r1, r3
 8000338:	2000      	movs	r0, #0
 800033a:	f7ff ff37 	bl	80001ac <nrf24_write_reg>

  // enable the device after configuring
  ce_enable();
 800033e:	f7ff ff05 	bl	800014c <ce_enable>
}
 8000342:	bf00      	nop
 8000344:	3710      	adds	r7, #16
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}

0800034a <is_data_received>:

// check if data is received on specific pipeline
uint8_t is_data_received (const int pipenum)
{
 800034a:	b580      	push	{r7, lr}
 800034c:	b084      	sub	sp, #16
 800034e:	af00      	add	r7, sp, #0
 8000350:	6078      	str	r0, [r7, #4]
  csn_select();
 8000352:	f7ff ff13 	bl	800017c <csn_select>

  uint8_t status = nrf24_read_reg(STATUS);
 8000356:	2007      	movs	r0, #7
 8000358:	f7ff ff7e 	bl	8000258 <nrf24_read_reg>
 800035c:	4603      	mov	r3, r0
 800035e:	73fb      	strb	r3, [r7, #15]

  if ((status&(1 << 6)) && (status&(pipenum << 1)))
 8000360:	7bfb      	ldrb	r3, [r7, #15]
 8000362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000366:	2b00      	cmp	r3, #0
 8000368:	d00d      	beq.n	8000386 <is_data_received+0x3c>
 800036a:	7bfa      	ldrb	r2, [r7, #15]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	005b      	lsls	r3, r3, #1
 8000370:	4013      	ands	r3, r2
 8000372:	2b00      	cmp	r3, #0
 8000374:	d007      	beq.n	8000386 <is_data_received+0x3c>
  {
    nrf24_write_reg(STATUS, (1 << 6));
 8000376:	2140      	movs	r1, #64	; 0x40
 8000378:	2007      	movs	r0, #7
 800037a:	f7ff ff17 	bl	80001ac <nrf24_write_reg>

    csn_unselect();
 800037e:	f7ff ff09 	bl	8000194 <csn_unselect>
    return 0;	// data received; success
 8000382:	2300      	movs	r3, #0
 8000384:	e002      	b.n	800038c <is_data_received+0x42>
  }

  csn_unselect();
 8000386:	f7ff ff05 	bl	8000194 <csn_unselect>
  return 1;	// data not received; success
 800038a:	2301      	movs	r3, #1
}
 800038c:	4618      	mov	r0, r3
 800038e:	3710      	adds	r7, #16
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <NRF24_receive>:

// receive data
int NRF24_receive (Payload *payload)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b088      	sub	sp, #32
 8000398:	af02      	add	r7, sp, #8
 800039a:	6078      	str	r0, [r7, #4]
  // select the device
  csn_select();
 800039c:	f7ff feee 	bl	800017c <csn_select>
  free(RX_buffer);
  */

  // payload command
  uint8_t TX_buffer[sizeof(Payload) + 1];
  TX_buffer[0] = R_RX_PAYLOAD;
 80003a0:	2361      	movs	r3, #97	; 0x61
 80003a2:	743b      	strb	r3, [r7, #16]

  uint8_t RX_buffer[sizeof(Payload) + 1];

  // receive the payload
  HAL_SPI_TransmitReceive(NRF24_SPI, TX_buffer, RX_buffer, sizeof(Payload) + 1, 1000);
 80003a4:	f107 0208 	add.w	r2, r7, #8
 80003a8:	f107 0110 	add.w	r1, r7, #16
 80003ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003b0:	9300      	str	r3, [sp, #0]
 80003b2:	2305      	movs	r3, #5
 80003b4:	480a      	ldr	r0, [pc, #40]	; (80003e0 <NRF24_receive+0x4c>)
 80003b6:	f001 fc4c 	bl	8001c52 <HAL_SPI_TransmitReceive>

  memcpy(payload, RX_buffer + 1, sizeof(Payload) + 1);
 80003ba:	f107 0308 	add.w	r3, r7, #8
 80003be:	3301      	adds	r3, #1
 80003c0:	2205      	movs	r2, #5
 80003c2:	4619      	mov	r1, r3
 80003c4:	6878      	ldr	r0, [r7, #4]
 80003c6:	f001 ff19 	bl	80021fc <memcpy>


  HAL_Delay(1);
 80003ca:	2001      	movs	r0, #1
 80003cc:	f000 fa9e 	bl	800090c <HAL_Delay>

  // unselect the device
  csn_unselect();
 80003d0:	f7ff fee0 	bl	8000194 <csn_unselect>

  return 0; // success
 80003d4:	2300      	movs	r3, #0
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	3718      	adds	r7, #24
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	2000002c 	.word	0x2000002c

080003e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b088      	sub	sp, #32
 80003e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ea:	f107 0310 	add.w	r3, r7, #16
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	605a      	str	r2, [r3, #4]
 80003f4:	609a      	str	r2, [r3, #8]
 80003f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f8:	4b39      	ldr	r3, [pc, #228]	; (80004e0 <MX_GPIO_Init+0xfc>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	4a38      	ldr	r2, [pc, #224]	; (80004e0 <MX_GPIO_Init+0xfc>)
 80003fe:	f043 0310 	orr.w	r3, r3, #16
 8000402:	6193      	str	r3, [r2, #24]
 8000404:	4b36      	ldr	r3, [pc, #216]	; (80004e0 <MX_GPIO_Init+0xfc>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	f003 0310 	and.w	r3, r3, #16
 800040c:	60fb      	str	r3, [r7, #12]
 800040e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000410:	4b33      	ldr	r3, [pc, #204]	; (80004e0 <MX_GPIO_Init+0xfc>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a32      	ldr	r2, [pc, #200]	; (80004e0 <MX_GPIO_Init+0xfc>)
 8000416:	f043 0320 	orr.w	r3, r3, #32
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b30      	ldr	r3, [pc, #192]	; (80004e0 <MX_GPIO_Init+0xfc>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f003 0320 	and.w	r3, r3, #32
 8000424:	60bb      	str	r3, [r7, #8]
 8000426:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000428:	4b2d      	ldr	r3, [pc, #180]	; (80004e0 <MX_GPIO_Init+0xfc>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a2c      	ldr	r2, [pc, #176]	; (80004e0 <MX_GPIO_Init+0xfc>)
 800042e:	f043 0304 	orr.w	r3, r3, #4
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b2a      	ldr	r3, [pc, #168]	; (80004e0 <MX_GPIO_Init+0xfc>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0304 	and.w	r3, r3, #4
 800043c:	607b      	str	r3, [r7, #4]
 800043e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000440:	4b27      	ldr	r3, [pc, #156]	; (80004e0 <MX_GPIO_Init+0xfc>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a26      	ldr	r2, [pc, #152]	; (80004e0 <MX_GPIO_Init+0xfc>)
 8000446:	f043 0308 	orr.w	r3, r3, #8
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b24      	ldr	r3, [pc, #144]	; (80004e0 <MX_GPIO_Init+0xfc>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0308 	and.w	r3, r3, #8
 8000454:	603b      	str	r3, [r7, #0]
 8000456:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800045e:	4821      	ldr	r0, [pc, #132]	; (80004e4 <MX_GPIO_Init+0x100>)
 8000460:	f000 fd0a 	bl	8000e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF24L01_CE_Pin|NRF24L01_CSN_Pin, GPIO_PIN_RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 800046a:	481f      	ldr	r0, [pc, #124]	; (80004e8 <MX_GPIO_Init+0x104>)
 800046c:	f000 fd04 	bl	8000e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000470:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000474:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000476:	2301      	movs	r3, #1
 8000478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047a:	2300      	movs	r3, #0
 800047c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047e:	2302      	movs	r3, #2
 8000480:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000482:	f107 0310 	add.w	r3, r7, #16
 8000486:	4619      	mov	r1, r3
 8000488:	4816      	ldr	r0, [pc, #88]	; (80004e4 <MX_GPIO_Init+0x100>)
 800048a:	f000 fb71 	bl	8000b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24L01_IRQ_Pin;
 800048e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000494:	4b15      	ldr	r3, [pc, #84]	; (80004ec <MX_GPIO_Init+0x108>)
 8000496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	2300      	movs	r3, #0
 800049a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NRF24L01_IRQ_GPIO_Port, &GPIO_InitStruct);
 800049c:	f107 0310 	add.w	r3, r7, #16
 80004a0:	4619      	mov	r1, r3
 80004a2:	4811      	ldr	r0, [pc, #68]	; (80004e8 <MX_GPIO_Init+0x104>)
 80004a4:	f000 fb64 	bl	8000b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = NRF24L01_CE_Pin|NRF24L01_CSN_Pin;
 80004a8:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80004ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ae:	2301      	movs	r3, #1
 80004b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b2:	2300      	movs	r3, #0
 80004b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b6:	2302      	movs	r3, #2
 80004b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ba:	f107 0310 	add.w	r3, r7, #16
 80004be:	4619      	mov	r1, r3
 80004c0:	4809      	ldr	r0, [pc, #36]	; (80004e8 <MX_GPIO_Init+0x104>)
 80004c2:	f000 fb55 	bl	8000b70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2100      	movs	r1, #0
 80004ca:	2017      	movs	r0, #23
 80004cc:	f000 fb19 	bl	8000b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80004d0:	2017      	movs	r0, #23
 80004d2:	f000 fb32 	bl	8000b3a <HAL_NVIC_EnableIRQ>

}
 80004d6:	bf00      	nop
 80004d8:	3720      	adds	r7, #32
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000
 80004e4:	40011000 	.word	0x40011000
 80004e8:	40010800 	.word	0x40010800
 80004ec:	10210000 	.word	0x10210000

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f6:	f000 f9a7 	bl	8000848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fa:	f000 f827 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fe:	f7ff ff71 	bl	80003e4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000502:	f000 f883 	bl	800060c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  NRF24_init();
 8000506:	f7ff fec7 	bl	8000298 <NRF24_init>

  NRF24_RX_mode(rx_address, 120);
 800050a:	2178      	movs	r1, #120	; 0x78
 800050c:	480d      	ldr	r0, [pc, #52]	; (8000544 <main+0x54>)
 800050e:	f7ff fee5 	bl	80002dc <NRF24_RX_mode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (0 == is_data_received(1))
 8000512:	2001      	movs	r0, #1
 8000514:	f7ff ff19 	bl	800034a <is_data_received>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d109      	bne.n	8000532 <main+0x42>
    {
      if (0 == NRF24_receive(&payload))
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	4618      	mov	r0, r3
 8000522:	f7ff ff37 	bl	8000394 <NRF24_receive>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d102      	bne.n	8000532 <main+0x42>
      {
	  payload_recieved = 1;
 800052c:	4b06      	ldr	r3, [pc, #24]	; (8000548 <main+0x58>)
 800052e:	2201      	movs	r2, #1
 8000530:	701a      	strb	r2, [r3, #0]
      }
    }

    if (payload_recieved)
 8000532:	4b05      	ldr	r3, [pc, #20]	; (8000548 <main+0x58>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d0eb      	beq.n	8000512 <main+0x22>
    {
      payload_recieved = 0;
 800053a:	4b03      	ldr	r3, [pc, #12]	; (8000548 <main+0x58>)
 800053c:	2200      	movs	r2, #0
 800053e:	701a      	strb	r2, [r3, #0]
    if (0 == is_data_received(1))
 8000540:	e7e7      	b.n	8000512 <main+0x22>
 8000542:	bf00      	nop
 8000544:	08002230 	.word	0x08002230
 8000548:	20000028 	.word	0x20000028

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b090      	sub	sp, #64	; 0x40
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0318 	add.w	r3, r7, #24
 8000556:	2228      	movs	r2, #40	; 0x28
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f001 fe22 	bl	80021a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056e:	2301      	movs	r3, #1
 8000570:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000572:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000576:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057c:	2301      	movs	r3, #1
 800057e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000580:	2302      	movs	r3, #2
 8000582:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000584:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800058a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	f107 0318 	add.w	r3, r7, #24
 8000594:	4618      	mov	r0, r3
 8000596:	f000 fc9f 	bl	8000ed8 <HAL_RCC_OscConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005a0:	f000 f82e 	bl	8000600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a4:	230f      	movs	r3, #15
 80005a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a8:	2302      	movs	r3, #2
 80005aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2102      	movs	r1, #2
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 ff0c 	bl	80013dc <HAL_RCC_ClockConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005ca:	f000 f819 	bl	8000600 <Error_Handler>
  }
}
 80005ce:	bf00      	nop
 80005d0:	3740      	adds	r7, #64	; 0x40
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == NRF24L01_IRQ_Pin)
 80005e2:	88fb      	ldrh	r3, [r7, #6]
 80005e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005e8:	d102      	bne.n	80005f0 <HAL_GPIO_EXTI_Callback+0x18>
  {
      payload_recieved = 1;
 80005ea:	4b04      	ldr	r3, [pc, #16]	; (80005fc <HAL_GPIO_EXTI_Callback+0x24>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	701a      	strb	r2, [r3, #0]
  }
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20000028 	.word	0x20000028

08000600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000604:	b672      	cpsid	i
}
 8000606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000608:	e7fe      	b.n	8000608 <Error_Handler+0x8>
	...

0800060c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <MX_SPI1_Init+0x64>)
 8000612:	4a18      	ldr	r2, [pc, #96]	; (8000674 <MX_SPI1_Init+0x68>)
 8000614:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000616:	4b16      	ldr	r3, [pc, #88]	; (8000670 <MX_SPI1_Init+0x64>)
 8000618:	f44f 7282 	mov.w	r2, #260	; 0x104
 800061c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_SPI1_Init+0x64>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_SPI1_Init+0x64>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_SPI1_Init+0x64>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_SPI1_Init+0x64>)
 8000632:	2200      	movs	r2, #0
 8000634:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_SPI1_Init+0x64>)
 8000638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800063c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_SPI1_Init+0x64>)
 8000640:	2220      	movs	r2, #32
 8000642:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <MX_SPI1_Init+0x64>)
 8000646:	2200      	movs	r2, #0
 8000648:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_SPI1_Init+0x64>)
 800064c:	2200      	movs	r2, #0
 800064e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <MX_SPI1_Init+0x64>)
 8000652:	2200      	movs	r2, #0
 8000654:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_SPI1_Init+0x64>)
 8000658:	220a      	movs	r2, #10
 800065a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <MX_SPI1_Init+0x64>)
 800065e:	f001 f819 	bl	8001694 <HAL_SPI_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000668:	f7ff ffca 	bl	8000600 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000002c 	.word	0x2000002c
 8000674:	40013000 	.word	0x40013000

08000678 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a22      	ldr	r2, [pc, #136]	; (800071c <HAL_SPI_MspInit+0xa4>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d13d      	bne.n	8000714 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <HAL_SPI_MspInit+0xa8>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a20      	ldr	r2, [pc, #128]	; (8000720 <HAL_SPI_MspInit+0xa8>)
 800069e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <HAL_SPI_MspInit+0xa8>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006ac:	613b      	str	r3, [r7, #16]
 80006ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b0:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <HAL_SPI_MspInit+0xa8>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a1a      	ldr	r2, [pc, #104]	; (8000720 <HAL_SPI_MspInit+0xa8>)
 80006b6:	f043 0308 	orr.w	r3, r3, #8
 80006ba:	6193      	str	r3, [r2, #24]
 80006bc:	4b18      	ldr	r3, [pc, #96]	; (8000720 <HAL_SPI_MspInit+0xa8>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f003 0308 	and.w	r3, r3, #8
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80006c8:	2328      	movs	r3, #40	; 0x28
 80006ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006cc:	2302      	movs	r3, #2
 80006ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d0:	2303      	movs	r3, #3
 80006d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	4619      	mov	r1, r3
 80006da:	4812      	ldr	r0, [pc, #72]	; (8000724 <HAL_SPI_MspInit+0xac>)
 80006dc:	f000 fa48 	bl	8000b70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006e0:	2310      	movs	r3, #16
 80006e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	4619      	mov	r1, r3
 80006f2:	480c      	ldr	r0, [pc, #48]	; (8000724 <HAL_SPI_MspInit+0xac>)
 80006f4:	f000 fa3c 	bl	8000b70 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <HAL_SPI_MspInit+0xb0>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
 80006fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000700:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
 8000706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
 800070e:	4a06      	ldr	r2, [pc, #24]	; (8000728 <HAL_SPI_MspInit+0xb0>)
 8000710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000712:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000714:	bf00      	nop
 8000716:	3728      	adds	r7, #40	; 0x28
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40013000 	.word	0x40013000
 8000720:	40021000 	.word	0x40021000
 8000724:	40010c00 	.word	0x40010c00
 8000728:	40010000 	.word	0x40010000

0800072c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <HAL_MspInit+0x5c>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	4a14      	ldr	r2, [pc, #80]	; (8000788 <HAL_MspInit+0x5c>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6193      	str	r3, [r2, #24]
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <HAL_MspInit+0x5c>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <HAL_MspInit+0x5c>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <HAL_MspInit+0x5c>)
 8000750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000754:	61d3      	str	r3, [r2, #28]
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <HAL_MspInit+0x5c>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <HAL_MspInit+0x60>)
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <HAL_MspInit+0x60>)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077e:	bf00      	nop
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	40021000 	.word	0x40021000
 800078c:	40010000 	.word	0x40010000

08000790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000794:	e7fe      	b.n	8000794 <NMI_Handler+0x4>

08000796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079a:	e7fe      	b.n	800079a <HardFault_Handler+0x4>

0800079c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <MemManage_Handler+0x4>

080007a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <BusFault_Handler+0x4>

080007a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <UsageFault_Handler+0x4>

080007ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr

080007ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr

080007c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr

080007d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d6:	f000 f87d 	bl	80008d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}

080007de <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24L01_IRQ_Pin);
 80007e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007e6:	f000 fb5f 	bl	8000ea8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}

080007ee <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr
	...

080007fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007fc:	f7ff fff7 	bl	80007ee <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000800:	480b      	ldr	r0, [pc, #44]	; (8000830 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000802:	490c      	ldr	r1, [pc, #48]	; (8000834 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000804:	4a0c      	ldr	r2, [pc, #48]	; (8000838 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000808:	e002      	b.n	8000810 <LoopCopyDataInit>

0800080a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800080c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080e:	3304      	adds	r3, #4

08000810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000814:	d3f9      	bcc.n	800080a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000816:	4a09      	ldr	r2, [pc, #36]	; (800083c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000818:	4c09      	ldr	r4, [pc, #36]	; (8000840 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800081c:	e001      	b.n	8000822 <LoopFillZerobss>

0800081e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000820:	3204      	adds	r2, #4

08000822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000824:	d3fb      	bcc.n	800081e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000826:	f001 fcc5 	bl	80021b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800082a:	f7ff fe61 	bl	80004f0 <main>
  bx lr
 800082e:	4770      	bx	lr
  ldr r0, =_sdata
 8000830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000834:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000838:	08002264 	.word	0x08002264
  ldr r2, =_sbss
 800083c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000840:	20000088 	.word	0x20000088

08000844 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000844:	e7fe      	b.n	8000844 <ADC1_2_IRQHandler>
	...

08000848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <HAL_Init+0x28>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a07      	ldr	r2, [pc, #28]	; (8000870 <HAL_Init+0x28>)
 8000852:	f043 0310 	orr.w	r3, r3, #16
 8000856:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000858:	2003      	movs	r0, #3
 800085a:	f000 f947 	bl	8000aec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800085e:	200f      	movs	r0, #15
 8000860:	f000 f808 	bl	8000874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000864:	f7ff ff62 	bl	800072c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40022000 	.word	0x40022000

08000874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <HAL_InitTick+0x54>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <HAL_InitTick+0x58>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	4619      	mov	r1, r3
 8000886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088a:	fbb3 f3f1 	udiv	r3, r3, r1
 800088e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f95f 	bl	8000b56 <HAL_SYSTICK_Config>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	e00e      	b.n	80008c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2b0f      	cmp	r3, #15
 80008a6:	d80a      	bhi.n	80008be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a8:	2200      	movs	r2, #0
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008b0:	f000 f927 	bl	8000b02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b4:	4a06      	ldr	r2, [pc, #24]	; (80008d0 <HAL_InitTick+0x5c>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ba:	2300      	movs	r3, #0
 80008bc:	e000      	b.n	80008c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000000 	.word	0x20000000
 80008cc:	20000008 	.word	0x20000008
 80008d0:	20000004 	.word	0x20000004

080008d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <HAL_IncTick+0x1c>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	461a      	mov	r2, r3
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <HAL_IncTick+0x20>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4413      	add	r3, r2
 80008e4:	4a03      	ldr	r2, [pc, #12]	; (80008f4 <HAL_IncTick+0x20>)
 80008e6:	6013      	str	r3, [r2, #0]
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	20000008 	.word	0x20000008
 80008f4:	20000084 	.word	0x20000084

080008f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return uwTick;
 80008fc:	4b02      	ldr	r3, [pc, #8]	; (8000908 <HAL_GetTick+0x10>)
 80008fe:	681b      	ldr	r3, [r3, #0]
}
 8000900:	4618      	mov	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	20000084 	.word	0x20000084

0800090c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000914:	f7ff fff0 	bl	80008f8 <HAL_GetTick>
 8000918:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000924:	d005      	beq.n	8000932 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000926:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <HAL_Delay+0x44>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	461a      	mov	r2, r3
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	4413      	add	r3, r2
 8000930:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000932:	bf00      	nop
 8000934:	f7ff ffe0 	bl	80008f8 <HAL_GetTick>
 8000938:	4602      	mov	r2, r0
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	68fa      	ldr	r2, [r7, #12]
 8000940:	429a      	cmp	r2, r3
 8000942:	d8f7      	bhi.n	8000934 <HAL_Delay+0x28>
  {
  }
}
 8000944:	bf00      	nop
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000008 	.word	0x20000008

08000954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <__NVIC_SetPriorityGrouping+0x44>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800096a:	68ba      	ldr	r2, [r7, #8]
 800096c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000970:	4013      	ands	r3, r2
 8000972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800097c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000986:	4a04      	ldr	r2, [pc, #16]	; (8000998 <__NVIC_SetPriorityGrouping+0x44>)
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	60d3      	str	r3, [r2, #12]
}
 800098c:	bf00      	nop
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a0:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <__NVIC_GetPriorityGrouping+0x18>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	0a1b      	lsrs	r3, r3, #8
 80009a6:	f003 0307 	and.w	r3, r3, #7
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	db0b      	blt.n	80009e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	f003 021f 	and.w	r2, r3, #31
 80009d0:	4906      	ldr	r1, [pc, #24]	; (80009ec <__NVIC_EnableIRQ+0x34>)
 80009d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d6:	095b      	lsrs	r3, r3, #5
 80009d8:	2001      	movs	r0, #1
 80009da:	fa00 f202 	lsl.w	r2, r0, r2
 80009de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	e000e100 	.word	0xe000e100

080009f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	6039      	str	r1, [r7, #0]
 80009fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	db0a      	blt.n	8000a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	490c      	ldr	r1, [pc, #48]	; (8000a3c <__NVIC_SetPriority+0x4c>)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	0112      	lsls	r2, r2, #4
 8000a10:	b2d2      	uxtb	r2, r2
 8000a12:	440b      	add	r3, r1
 8000a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a18:	e00a      	b.n	8000a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4908      	ldr	r1, [pc, #32]	; (8000a40 <__NVIC_SetPriority+0x50>)
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	f003 030f 	and.w	r3, r3, #15
 8000a26:	3b04      	subs	r3, #4
 8000a28:	0112      	lsls	r2, r2, #4
 8000a2a:	b2d2      	uxtb	r2, r2
 8000a2c:	440b      	add	r3, r1
 8000a2e:	761a      	strb	r2, [r3, #24]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000e100 	.word	0xe000e100
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b089      	sub	sp, #36	; 0x24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	f1c3 0307 	rsb	r3, r3, #7
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	bf28      	it	cs
 8000a62:	2304      	movcs	r3, #4
 8000a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3304      	adds	r3, #4
 8000a6a:	2b06      	cmp	r3, #6
 8000a6c:	d902      	bls.n	8000a74 <NVIC_EncodePriority+0x30>
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3b03      	subs	r3, #3
 8000a72:	e000      	b.n	8000a76 <NVIC_EncodePriority+0x32>
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	43da      	mvns	r2, r3
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	401a      	ands	r2, r3
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	fa01 f303 	lsl.w	r3, r1, r3
 8000a96:	43d9      	mvns	r1, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	4313      	orrs	r3, r2
         );
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3724      	adds	r7, #36	; 0x24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr

08000aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ab8:	d301      	bcc.n	8000abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aba:	2301      	movs	r3, #1
 8000abc:	e00f      	b.n	8000ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000abe:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <SysTick_Config+0x40>)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac6:	210f      	movs	r1, #15
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000acc:	f7ff ff90 	bl	80009f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <SysTick_Config+0x40>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad6:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <SysTick_Config+0x40>)
 8000ad8:	2207      	movs	r2, #7
 8000ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	e000e010 	.word	0xe000e010

08000aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff ff2d 	bl	8000954 <__NVIC_SetPriorityGrouping>
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b086      	sub	sp, #24
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	4603      	mov	r3, r0
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
 8000b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b14:	f7ff ff42 	bl	800099c <__NVIC_GetPriorityGrouping>
 8000b18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	68b9      	ldr	r1, [r7, #8]
 8000b1e:	6978      	ldr	r0, [r7, #20]
 8000b20:	f7ff ff90 	bl	8000a44 <NVIC_EncodePriority>
 8000b24:	4602      	mov	r2, r0
 8000b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff ff5f 	bl	80009f0 <__NVIC_SetPriority>
}
 8000b32:	bf00      	nop
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	4603      	mov	r3, r0
 8000b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff ff35 	bl	80009b8 <__NVIC_EnableIRQ>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff ffa2 	bl	8000aa8 <SysTick_Config>
 8000b64:	4603      	mov	r3, r0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b08b      	sub	sp, #44	; 0x2c
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b82:	e169      	b.n	8000e58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b84:	2201      	movs	r2, #1
 8000b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	69fa      	ldr	r2, [r7, #28]
 8000b94:	4013      	ands	r3, r2
 8000b96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	f040 8158 	bne.w	8000e52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	4a9a      	ldr	r2, [pc, #616]	; (8000e10 <HAL_GPIO_Init+0x2a0>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d05e      	beq.n	8000c6a <HAL_GPIO_Init+0xfa>
 8000bac:	4a98      	ldr	r2, [pc, #608]	; (8000e10 <HAL_GPIO_Init+0x2a0>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d875      	bhi.n	8000c9e <HAL_GPIO_Init+0x12e>
 8000bb2:	4a98      	ldr	r2, [pc, #608]	; (8000e14 <HAL_GPIO_Init+0x2a4>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d058      	beq.n	8000c6a <HAL_GPIO_Init+0xfa>
 8000bb8:	4a96      	ldr	r2, [pc, #600]	; (8000e14 <HAL_GPIO_Init+0x2a4>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d86f      	bhi.n	8000c9e <HAL_GPIO_Init+0x12e>
 8000bbe:	4a96      	ldr	r2, [pc, #600]	; (8000e18 <HAL_GPIO_Init+0x2a8>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d052      	beq.n	8000c6a <HAL_GPIO_Init+0xfa>
 8000bc4:	4a94      	ldr	r2, [pc, #592]	; (8000e18 <HAL_GPIO_Init+0x2a8>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d869      	bhi.n	8000c9e <HAL_GPIO_Init+0x12e>
 8000bca:	4a94      	ldr	r2, [pc, #592]	; (8000e1c <HAL_GPIO_Init+0x2ac>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d04c      	beq.n	8000c6a <HAL_GPIO_Init+0xfa>
 8000bd0:	4a92      	ldr	r2, [pc, #584]	; (8000e1c <HAL_GPIO_Init+0x2ac>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d863      	bhi.n	8000c9e <HAL_GPIO_Init+0x12e>
 8000bd6:	4a92      	ldr	r2, [pc, #584]	; (8000e20 <HAL_GPIO_Init+0x2b0>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d046      	beq.n	8000c6a <HAL_GPIO_Init+0xfa>
 8000bdc:	4a90      	ldr	r2, [pc, #576]	; (8000e20 <HAL_GPIO_Init+0x2b0>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d85d      	bhi.n	8000c9e <HAL_GPIO_Init+0x12e>
 8000be2:	2b12      	cmp	r3, #18
 8000be4:	d82a      	bhi.n	8000c3c <HAL_GPIO_Init+0xcc>
 8000be6:	2b12      	cmp	r3, #18
 8000be8:	d859      	bhi.n	8000c9e <HAL_GPIO_Init+0x12e>
 8000bea:	a201      	add	r2, pc, #4	; (adr r2, 8000bf0 <HAL_GPIO_Init+0x80>)
 8000bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf0:	08000c6b 	.word	0x08000c6b
 8000bf4:	08000c45 	.word	0x08000c45
 8000bf8:	08000c57 	.word	0x08000c57
 8000bfc:	08000c99 	.word	0x08000c99
 8000c00:	08000c9f 	.word	0x08000c9f
 8000c04:	08000c9f 	.word	0x08000c9f
 8000c08:	08000c9f 	.word	0x08000c9f
 8000c0c:	08000c9f 	.word	0x08000c9f
 8000c10:	08000c9f 	.word	0x08000c9f
 8000c14:	08000c9f 	.word	0x08000c9f
 8000c18:	08000c9f 	.word	0x08000c9f
 8000c1c:	08000c9f 	.word	0x08000c9f
 8000c20:	08000c9f 	.word	0x08000c9f
 8000c24:	08000c9f 	.word	0x08000c9f
 8000c28:	08000c9f 	.word	0x08000c9f
 8000c2c:	08000c9f 	.word	0x08000c9f
 8000c30:	08000c9f 	.word	0x08000c9f
 8000c34:	08000c4d 	.word	0x08000c4d
 8000c38:	08000c61 	.word	0x08000c61
 8000c3c:	4a79      	ldr	r2, [pc, #484]	; (8000e24 <HAL_GPIO_Init+0x2b4>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d013      	beq.n	8000c6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c42:	e02c      	b.n	8000c9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	623b      	str	r3, [r7, #32]
          break;
 8000c4a:	e029      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	3304      	adds	r3, #4
 8000c52:	623b      	str	r3, [r7, #32]
          break;
 8000c54:	e024      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	3308      	adds	r3, #8
 8000c5c:	623b      	str	r3, [r7, #32]
          break;
 8000c5e:	e01f      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	330c      	adds	r3, #12
 8000c66:	623b      	str	r3, [r7, #32]
          break;
 8000c68:	e01a      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d102      	bne.n	8000c78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c72:	2304      	movs	r3, #4
 8000c74:	623b      	str	r3, [r7, #32]
          break;
 8000c76:	e013      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d105      	bne.n	8000c8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c80:	2308      	movs	r3, #8
 8000c82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	69fa      	ldr	r2, [r7, #28]
 8000c88:	611a      	str	r2, [r3, #16]
          break;
 8000c8a:	e009      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c8c:	2308      	movs	r3, #8
 8000c8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	69fa      	ldr	r2, [r7, #28]
 8000c94:	615a      	str	r2, [r3, #20]
          break;
 8000c96:	e003      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	623b      	str	r3, [r7, #32]
          break;
 8000c9c:	e000      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
          break;
 8000c9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	2bff      	cmp	r3, #255	; 0xff
 8000ca4:	d801      	bhi.n	8000caa <HAL_GPIO_Init+0x13a>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	e001      	b.n	8000cae <HAL_GPIO_Init+0x13e>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3304      	adds	r3, #4
 8000cae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	2bff      	cmp	r3, #255	; 0xff
 8000cb4:	d802      	bhi.n	8000cbc <HAL_GPIO_Init+0x14c>
 8000cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	e002      	b.n	8000cc2 <HAL_GPIO_Init+0x152>
 8000cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbe:	3b08      	subs	r3, #8
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	210f      	movs	r1, #15
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	401a      	ands	r2, r3
 8000cd4:	6a39      	ldr	r1, [r7, #32]
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cdc:	431a      	orrs	r2, r3
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f000 80b1 	beq.w	8000e52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cf0:	4b4d      	ldr	r3, [pc, #308]	; (8000e28 <HAL_GPIO_Init+0x2b8>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a4c      	ldr	r2, [pc, #304]	; (8000e28 <HAL_GPIO_Init+0x2b8>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	6193      	str	r3, [r2, #24]
 8000cfc:	4b4a      	ldr	r3, [pc, #296]	; (8000e28 <HAL_GPIO_Init+0x2b8>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d08:	4a48      	ldr	r2, [pc, #288]	; (8000e2c <HAL_GPIO_Init+0x2bc>)
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0c:	089b      	lsrs	r3, r3, #2
 8000d0e:	3302      	adds	r3, #2
 8000d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d18:	f003 0303 	and.w	r3, r3, #3
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	220f      	movs	r2, #15
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a40      	ldr	r2, [pc, #256]	; (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d013      	beq.n	8000d5c <HAL_GPIO_Init+0x1ec>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a3f      	ldr	r2, [pc, #252]	; (8000e34 <HAL_GPIO_Init+0x2c4>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d00d      	beq.n	8000d58 <HAL_GPIO_Init+0x1e8>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a3e      	ldr	r2, [pc, #248]	; (8000e38 <HAL_GPIO_Init+0x2c8>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d007      	beq.n	8000d54 <HAL_GPIO_Init+0x1e4>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a3d      	ldr	r2, [pc, #244]	; (8000e3c <HAL_GPIO_Init+0x2cc>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d101      	bne.n	8000d50 <HAL_GPIO_Init+0x1e0>
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	e006      	b.n	8000d5e <HAL_GPIO_Init+0x1ee>
 8000d50:	2304      	movs	r3, #4
 8000d52:	e004      	b.n	8000d5e <HAL_GPIO_Init+0x1ee>
 8000d54:	2302      	movs	r3, #2
 8000d56:	e002      	b.n	8000d5e <HAL_GPIO_Init+0x1ee>
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e000      	b.n	8000d5e <HAL_GPIO_Init+0x1ee>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d60:	f002 0203 	and.w	r2, r2, #3
 8000d64:	0092      	lsls	r2, r2, #2
 8000d66:	4093      	lsls	r3, r2
 8000d68:	68fa      	ldr	r2, [r7, #12]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d6e:	492f      	ldr	r1, [pc, #188]	; (8000e2c <HAL_GPIO_Init+0x2bc>)
 8000d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d72:	089b      	lsrs	r3, r3, #2
 8000d74:	3302      	adds	r3, #2
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d006      	beq.n	8000d96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d88:	4b2d      	ldr	r3, [pc, #180]	; (8000e40 <HAL_GPIO_Init+0x2d0>)
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	492c      	ldr	r1, [pc, #176]	; (8000e40 <HAL_GPIO_Init+0x2d0>)
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	608b      	str	r3, [r1, #8]
 8000d94:	e006      	b.n	8000da4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d96:	4b2a      	ldr	r3, [pc, #168]	; (8000e40 <HAL_GPIO_Init+0x2d0>)
 8000d98:	689a      	ldr	r2, [r3, #8]
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	4928      	ldr	r1, [pc, #160]	; (8000e40 <HAL_GPIO_Init+0x2d0>)
 8000da0:	4013      	ands	r3, r2
 8000da2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d006      	beq.n	8000dbe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000db0:	4b23      	ldr	r3, [pc, #140]	; (8000e40 <HAL_GPIO_Init+0x2d0>)
 8000db2:	68da      	ldr	r2, [r3, #12]
 8000db4:	4922      	ldr	r1, [pc, #136]	; (8000e40 <HAL_GPIO_Init+0x2d0>)
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	60cb      	str	r3, [r1, #12]
 8000dbc:	e006      	b.n	8000dcc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dbe:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <HAL_GPIO_Init+0x2d0>)
 8000dc0:	68da      	ldr	r2, [r3, #12]
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	491e      	ldr	r1, [pc, #120]	; (8000e40 <HAL_GPIO_Init+0x2d0>)
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d006      	beq.n	8000de6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dd8:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <HAL_GPIO_Init+0x2d0>)
 8000dda:	685a      	ldr	r2, [r3, #4]
 8000ddc:	4918      	ldr	r1, [pc, #96]	; (8000e40 <HAL_GPIO_Init+0x2d0>)
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	604b      	str	r3, [r1, #4]
 8000de4:	e006      	b.n	8000df4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000de6:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <HAL_GPIO_Init+0x2d0>)
 8000de8:	685a      	ldr	r2, [r3, #4]
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	43db      	mvns	r3, r3
 8000dee:	4914      	ldr	r1, [pc, #80]	; (8000e40 <HAL_GPIO_Init+0x2d0>)
 8000df0:	4013      	ands	r3, r2
 8000df2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d021      	beq.n	8000e44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <HAL_GPIO_Init+0x2d0>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	490e      	ldr	r1, [pc, #56]	; (8000e40 <HAL_GPIO_Init+0x2d0>)
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	600b      	str	r3, [r1, #0]
 8000e0c:	e021      	b.n	8000e52 <HAL_GPIO_Init+0x2e2>
 8000e0e:	bf00      	nop
 8000e10:	10320000 	.word	0x10320000
 8000e14:	10310000 	.word	0x10310000
 8000e18:	10220000 	.word	0x10220000
 8000e1c:	10210000 	.word	0x10210000
 8000e20:	10120000 	.word	0x10120000
 8000e24:	10110000 	.word	0x10110000
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40010000 	.word	0x40010000
 8000e30:	40010800 	.word	0x40010800
 8000e34:	40010c00 	.word	0x40010c00
 8000e38:	40011000 	.word	0x40011000
 8000e3c:	40011400 	.word	0x40011400
 8000e40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <HAL_GPIO_Init+0x304>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	4909      	ldr	r1, [pc, #36]	; (8000e74 <HAL_GPIO_Init+0x304>)
 8000e4e:	4013      	ands	r3, r2
 8000e50:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e54:	3301      	adds	r3, #1
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f47f ae8e 	bne.w	8000b84 <HAL_GPIO_Init+0x14>
  }
}
 8000e68:	bf00      	nop
 8000e6a:	bf00      	nop
 8000e6c:	372c      	adds	r7, #44	; 0x2c
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	40010400 	.word	0x40010400

08000e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	460b      	mov	r3, r1
 8000e82:	807b      	strh	r3, [r7, #2]
 8000e84:	4613      	mov	r3, r2
 8000e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e88:	787b      	ldrb	r3, [r7, #1]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e8e:	887a      	ldrh	r2, [r7, #2]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e94:	e003      	b.n	8000e9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e96:	887b      	ldrh	r3, [r7, #2]
 8000e98:	041a      	lsls	r2, r3, #16
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	611a      	str	r2, [r3, #16]
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000eb4:	695a      	ldr	r2, [r3, #20]
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d006      	beq.n	8000ecc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ebe:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ec0:	88fb      	ldrh	r3, [r7, #6]
 8000ec2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fb86 	bl	80005d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40010400 	.word	0x40010400

08000ed8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e272      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	f000 8087 	beq.w	8001006 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ef8:	4b92      	ldr	r3, [pc, #584]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 030c 	and.w	r3, r3, #12
 8000f00:	2b04      	cmp	r3, #4
 8000f02:	d00c      	beq.n	8000f1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f04:	4b8f      	ldr	r3, [pc, #572]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 030c 	and.w	r3, r3, #12
 8000f0c:	2b08      	cmp	r3, #8
 8000f0e:	d112      	bne.n	8000f36 <HAL_RCC_OscConfig+0x5e>
 8000f10:	4b8c      	ldr	r3, [pc, #560]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f1c:	d10b      	bne.n	8000f36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f1e:	4b89      	ldr	r3, [pc, #548]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d06c      	beq.n	8001004 <HAL_RCC_OscConfig+0x12c>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d168      	bne.n	8001004 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e24c      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f3e:	d106      	bne.n	8000f4e <HAL_RCC_OscConfig+0x76>
 8000f40:	4b80      	ldr	r3, [pc, #512]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a7f      	ldr	r2, [pc, #508]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f4a:	6013      	str	r3, [r2, #0]
 8000f4c:	e02e      	b.n	8000fac <HAL_RCC_OscConfig+0xd4>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10c      	bne.n	8000f70 <HAL_RCC_OscConfig+0x98>
 8000f56:	4b7b      	ldr	r3, [pc, #492]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a7a      	ldr	r2, [pc, #488]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	4b78      	ldr	r3, [pc, #480]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a77      	ldr	r2, [pc, #476]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	e01d      	b.n	8000fac <HAL_RCC_OscConfig+0xd4>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f78:	d10c      	bne.n	8000f94 <HAL_RCC_OscConfig+0xbc>
 8000f7a:	4b72      	ldr	r3, [pc, #456]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a71      	ldr	r2, [pc, #452]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	4b6f      	ldr	r3, [pc, #444]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a6e      	ldr	r2, [pc, #440]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	e00b      	b.n	8000fac <HAL_RCC_OscConfig+0xd4>
 8000f94:	4b6b      	ldr	r3, [pc, #428]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a6a      	ldr	r2, [pc, #424]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	4b68      	ldr	r3, [pc, #416]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a67      	ldr	r2, [pc, #412]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000faa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d013      	beq.n	8000fdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb4:	f7ff fca0 	bl	80008f8 <HAL_GetTick>
 8000fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fba:	e008      	b.n	8000fce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fbc:	f7ff fc9c 	bl	80008f8 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b64      	cmp	r3, #100	; 0x64
 8000fc8:	d901      	bls.n	8000fce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e200      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fce:	4b5d      	ldr	r3, [pc, #372]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0f0      	beq.n	8000fbc <HAL_RCC_OscConfig+0xe4>
 8000fda:	e014      	b.n	8001006 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fdc:	f7ff fc8c 	bl	80008f8 <HAL_GetTick>
 8000fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe2:	e008      	b.n	8000ff6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fe4:	f7ff fc88 	bl	80008f8 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b64      	cmp	r3, #100	; 0x64
 8000ff0:	d901      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e1ec      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ff6:	4b53      	ldr	r3, [pc, #332]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1f0      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x10c>
 8001002:	e000      	b.n	8001006 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d063      	beq.n	80010da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001012:	4b4c      	ldr	r3, [pc, #304]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 030c 	and.w	r3, r3, #12
 800101a:	2b00      	cmp	r3, #0
 800101c:	d00b      	beq.n	8001036 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800101e:	4b49      	ldr	r3, [pc, #292]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 030c 	and.w	r3, r3, #12
 8001026:	2b08      	cmp	r3, #8
 8001028:	d11c      	bne.n	8001064 <HAL_RCC_OscConfig+0x18c>
 800102a:	4b46      	ldr	r3, [pc, #280]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d116      	bne.n	8001064 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001036:	4b43      	ldr	r3, [pc, #268]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d005      	beq.n	800104e <HAL_RCC_OscConfig+0x176>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	691b      	ldr	r3, [r3, #16]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d001      	beq.n	800104e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e1c0      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800104e:	4b3d      	ldr	r3, [pc, #244]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	4939      	ldr	r1, [pc, #228]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 800105e:	4313      	orrs	r3, r2
 8001060:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001062:	e03a      	b.n	80010da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d020      	beq.n	80010ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800106c:	4b36      	ldr	r3, [pc, #216]	; (8001148 <HAL_RCC_OscConfig+0x270>)
 800106e:	2201      	movs	r2, #1
 8001070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001072:	f7ff fc41 	bl	80008f8 <HAL_GetTick>
 8001076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001078:	e008      	b.n	800108c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800107a:	f7ff fc3d 	bl	80008f8 <HAL_GetTick>
 800107e:	4602      	mov	r2, r0
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d901      	bls.n	800108c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e1a1      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800108c:	4b2d      	ldr	r3, [pc, #180]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0f0      	beq.n	800107a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001098:	4b2a      	ldr	r3, [pc, #168]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	4927      	ldr	r1, [pc, #156]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 80010a8:	4313      	orrs	r3, r2
 80010aa:	600b      	str	r3, [r1, #0]
 80010ac:	e015      	b.n	80010da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ae:	4b26      	ldr	r3, [pc, #152]	; (8001148 <HAL_RCC_OscConfig+0x270>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b4:	f7ff fc20 	bl	80008f8 <HAL_GetTick>
 80010b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ba:	e008      	b.n	80010ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010bc:	f7ff fc1c 	bl	80008f8 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e180      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ce:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f0      	bne.n	80010bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0308 	and.w	r3, r3, #8
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d03a      	beq.n	800115c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d019      	beq.n	8001122 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <HAL_RCC_OscConfig+0x274>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f4:	f7ff fc00 	bl	80008f8 <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010fc:	f7ff fbfc 	bl	80008f8 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e160      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <HAL_RCC_OscConfig+0x26c>)
 8001110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d0f0      	beq.n	80010fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800111a:	2001      	movs	r0, #1
 800111c:	f000 fa9c 	bl	8001658 <RCC_Delay>
 8001120:	e01c      	b.n	800115c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <HAL_RCC_OscConfig+0x274>)
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001128:	f7ff fbe6 	bl	80008f8 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800112e:	e00f      	b.n	8001150 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001130:	f7ff fbe2 	bl	80008f8 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d908      	bls.n	8001150 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e146      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
 8001142:	bf00      	nop
 8001144:	40021000 	.word	0x40021000
 8001148:	42420000 	.word	0x42420000
 800114c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001150:	4b92      	ldr	r3, [pc, #584]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1e9      	bne.n	8001130 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 80a6 	beq.w	80012b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800116a:	2300      	movs	r3, #0
 800116c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800116e:	4b8b      	ldr	r3, [pc, #556]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10d      	bne.n	8001196 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	4b88      	ldr	r3, [pc, #544]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	4a87      	ldr	r2, [pc, #540]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001184:	61d3      	str	r3, [r2, #28]
 8001186:	4b85      	ldr	r3, [pc, #532]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001192:	2301      	movs	r3, #1
 8001194:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001196:	4b82      	ldr	r3, [pc, #520]	; (80013a0 <HAL_RCC_OscConfig+0x4c8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d118      	bne.n	80011d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011a2:	4b7f      	ldr	r3, [pc, #508]	; (80013a0 <HAL_RCC_OscConfig+0x4c8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a7e      	ldr	r2, [pc, #504]	; (80013a0 <HAL_RCC_OscConfig+0x4c8>)
 80011a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ae:	f7ff fba3 	bl	80008f8 <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011b6:	f7ff fb9f 	bl	80008f8 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b64      	cmp	r3, #100	; 0x64
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e103      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c8:	4b75      	ldr	r3, [pc, #468]	; (80013a0 <HAL_RCC_OscConfig+0x4c8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f0      	beq.n	80011b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d106      	bne.n	80011ea <HAL_RCC_OscConfig+0x312>
 80011dc:	4b6f      	ldr	r3, [pc, #444]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	4a6e      	ldr	r2, [pc, #440]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	6213      	str	r3, [r2, #32]
 80011e8:	e02d      	b.n	8001246 <HAL_RCC_OscConfig+0x36e>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10c      	bne.n	800120c <HAL_RCC_OscConfig+0x334>
 80011f2:	4b6a      	ldr	r3, [pc, #424]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	6a1b      	ldr	r3, [r3, #32]
 80011f6:	4a69      	ldr	r2, [pc, #420]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 80011f8:	f023 0301 	bic.w	r3, r3, #1
 80011fc:	6213      	str	r3, [r2, #32]
 80011fe:	4b67      	ldr	r3, [pc, #412]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	4a66      	ldr	r2, [pc, #408]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001204:	f023 0304 	bic.w	r3, r3, #4
 8001208:	6213      	str	r3, [r2, #32]
 800120a:	e01c      	b.n	8001246 <HAL_RCC_OscConfig+0x36e>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	2b05      	cmp	r3, #5
 8001212:	d10c      	bne.n	800122e <HAL_RCC_OscConfig+0x356>
 8001214:	4b61      	ldr	r3, [pc, #388]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	4a60      	ldr	r2, [pc, #384]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 800121a:	f043 0304 	orr.w	r3, r3, #4
 800121e:	6213      	str	r3, [r2, #32]
 8001220:	4b5e      	ldr	r3, [pc, #376]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	4a5d      	ldr	r2, [pc, #372]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	6213      	str	r3, [r2, #32]
 800122c:	e00b      	b.n	8001246 <HAL_RCC_OscConfig+0x36e>
 800122e:	4b5b      	ldr	r3, [pc, #364]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001230:	6a1b      	ldr	r3, [r3, #32]
 8001232:	4a5a      	ldr	r2, [pc, #360]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001234:	f023 0301 	bic.w	r3, r3, #1
 8001238:	6213      	str	r3, [r2, #32]
 800123a:	4b58      	ldr	r3, [pc, #352]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	4a57      	ldr	r2, [pc, #348]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001240:	f023 0304 	bic.w	r3, r3, #4
 8001244:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d015      	beq.n	800127a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124e:	f7ff fb53 	bl	80008f8 <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001254:	e00a      	b.n	800126c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001256:	f7ff fb4f 	bl	80008f8 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	f241 3288 	movw	r2, #5000	; 0x1388
 8001264:	4293      	cmp	r3, r2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e0b1      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800126c:	4b4b      	ldr	r3, [pc, #300]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 800126e:	6a1b      	ldr	r3, [r3, #32]
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0ee      	beq.n	8001256 <HAL_RCC_OscConfig+0x37e>
 8001278:	e014      	b.n	80012a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127a:	f7ff fb3d 	bl	80008f8 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001280:	e00a      	b.n	8001298 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001282:	f7ff fb39 	bl	80008f8 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001290:	4293      	cmp	r3, r2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e09b      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001298:	4b40      	ldr	r3, [pc, #256]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1ee      	bne.n	8001282 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012a4:	7dfb      	ldrb	r3, [r7, #23]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d105      	bne.n	80012b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012aa:	4b3c      	ldr	r3, [pc, #240]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	4a3b      	ldr	r2, [pc, #236]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 80012b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 8087 	beq.w	80013ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012c0:	4b36      	ldr	r3, [pc, #216]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 030c 	and.w	r3, r3, #12
 80012c8:	2b08      	cmp	r3, #8
 80012ca:	d061      	beq.n	8001390 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d146      	bne.n	8001362 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012d4:	4b33      	ldr	r3, [pc, #204]	; (80013a4 <HAL_RCC_OscConfig+0x4cc>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012da:	f7ff fb0d 	bl	80008f8 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e2:	f7ff fb09 	bl	80008f8 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e06d      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012f4:	4b29      	ldr	r3, [pc, #164]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1f0      	bne.n	80012e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001308:	d108      	bne.n	800131c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800130a:	4b24      	ldr	r3, [pc, #144]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	4921      	ldr	r1, [pc, #132]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001318:	4313      	orrs	r3, r2
 800131a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800131c:	4b1f      	ldr	r3, [pc, #124]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a19      	ldr	r1, [r3, #32]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132c:	430b      	orrs	r3, r1
 800132e:	491b      	ldr	r1, [pc, #108]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001330:	4313      	orrs	r3, r2
 8001332:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001334:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <HAL_RCC_OscConfig+0x4cc>)
 8001336:	2201      	movs	r2, #1
 8001338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133a:	f7ff fadd 	bl	80008f8 <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001342:	f7ff fad9 	bl	80008f8 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e03d      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0f0      	beq.n	8001342 <HAL_RCC_OscConfig+0x46a>
 8001360:	e035      	b.n	80013ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <HAL_RCC_OscConfig+0x4cc>)
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001368:	f7ff fac6 	bl	80008f8 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001370:	f7ff fac2 	bl	80008f8 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e026      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f0      	bne.n	8001370 <HAL_RCC_OscConfig+0x498>
 800138e:	e01e      	b.n	80013ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69db      	ldr	r3, [r3, #28]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d107      	bne.n	80013a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e019      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
 800139c:	40021000 	.word	0x40021000
 80013a0:	40007000 	.word	0x40007000
 80013a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_RCC_OscConfig+0x500>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d106      	bne.n	80013ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d001      	beq.n	80013ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40021000 	.word	0x40021000

080013dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d101      	bne.n	80013f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e0d0      	b.n	8001592 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013f0:	4b6a      	ldr	r3, [pc, #424]	; (800159c <HAL_RCC_ClockConfig+0x1c0>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d910      	bls.n	8001420 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013fe:	4b67      	ldr	r3, [pc, #412]	; (800159c <HAL_RCC_ClockConfig+0x1c0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f023 0207 	bic.w	r2, r3, #7
 8001406:	4965      	ldr	r1, [pc, #404]	; (800159c <HAL_RCC_ClockConfig+0x1c0>)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	4313      	orrs	r3, r2
 800140c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800140e:	4b63      	ldr	r3, [pc, #396]	; (800159c <HAL_RCC_ClockConfig+0x1c0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	429a      	cmp	r2, r3
 800141a:	d001      	beq.n	8001420 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e0b8      	b.n	8001592 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d020      	beq.n	800146e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b00      	cmp	r3, #0
 8001436:	d005      	beq.n	8001444 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001438:	4b59      	ldr	r3, [pc, #356]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	4a58      	ldr	r2, [pc, #352]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 800143e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001442:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0308 	and.w	r3, r3, #8
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001450:	4b53      	ldr	r3, [pc, #332]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	4a52      	ldr	r2, [pc, #328]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001456:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800145a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800145c:	4b50      	ldr	r3, [pc, #320]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	494d      	ldr	r1, [pc, #308]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 800146a:	4313      	orrs	r3, r2
 800146c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d040      	beq.n	80014fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d107      	bne.n	8001492 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001482:	4b47      	ldr	r3, [pc, #284]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d115      	bne.n	80014ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e07f      	b.n	8001592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d107      	bne.n	80014aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800149a:	4b41      	ldr	r3, [pc, #260]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d109      	bne.n	80014ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e073      	b.n	8001592 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014aa:	4b3d      	ldr	r3, [pc, #244]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e06b      	b.n	8001592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ba:	4b39      	ldr	r3, [pc, #228]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f023 0203 	bic.w	r2, r3, #3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	4936      	ldr	r1, [pc, #216]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014cc:	f7ff fa14 	bl	80008f8 <HAL_GetTick>
 80014d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d2:	e00a      	b.n	80014ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d4:	f7ff fa10 	bl	80008f8 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e053      	b.n	8001592 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ea:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 020c 	and.w	r2, r3, #12
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d1eb      	bne.n	80014d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014fc:	4b27      	ldr	r3, [pc, #156]	; (800159c <HAL_RCC_ClockConfig+0x1c0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	d210      	bcs.n	800152c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150a:	4b24      	ldr	r3, [pc, #144]	; (800159c <HAL_RCC_ClockConfig+0x1c0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f023 0207 	bic.w	r2, r3, #7
 8001512:	4922      	ldr	r1, [pc, #136]	; (800159c <HAL_RCC_ClockConfig+0x1c0>)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	4313      	orrs	r3, r2
 8001518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800151a:	4b20      	ldr	r3, [pc, #128]	; (800159c <HAL_RCC_ClockConfig+0x1c0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d001      	beq.n	800152c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e032      	b.n	8001592 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	d008      	beq.n	800154a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001538:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	4916      	ldr	r1, [pc, #88]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001546:	4313      	orrs	r3, r2
 8001548:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	2b00      	cmp	r3, #0
 8001554:	d009      	beq.n	800156a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001556:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	490e      	ldr	r1, [pc, #56]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001566:	4313      	orrs	r3, r2
 8001568:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800156a:	f000 f821 	bl	80015b0 <HAL_RCC_GetSysClockFreq>
 800156e:	4602      	mov	r2, r0
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	091b      	lsrs	r3, r3, #4
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	490a      	ldr	r1, [pc, #40]	; (80015a4 <HAL_RCC_ClockConfig+0x1c8>)
 800157c:	5ccb      	ldrb	r3, [r1, r3]
 800157e:	fa22 f303 	lsr.w	r3, r2, r3
 8001582:	4a09      	ldr	r2, [pc, #36]	; (80015a8 <HAL_RCC_ClockConfig+0x1cc>)
 8001584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <HAL_RCC_ClockConfig+0x1d0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff f972 	bl	8000874 <HAL_InitTick>

  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40022000 	.word	0x40022000
 80015a0:	40021000 	.word	0x40021000
 80015a4:	08002238 	.word	0x08002238
 80015a8:	20000000 	.word	0x20000000
 80015ac:	20000004 	.word	0x20000004

080015b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b087      	sub	sp, #28
 80015b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015ca:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <HAL_RCC_GetSysClockFreq+0x94>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	d002      	beq.n	80015e0 <HAL_RCC_GetSysClockFreq+0x30>
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d003      	beq.n	80015e6 <HAL_RCC_GetSysClockFreq+0x36>
 80015de:	e027      	b.n	8001630 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015e0:	4b19      	ldr	r3, [pc, #100]	; (8001648 <HAL_RCC_GetSysClockFreq+0x98>)
 80015e2:	613b      	str	r3, [r7, #16]
      break;
 80015e4:	e027      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	0c9b      	lsrs	r3, r3, #18
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	4a17      	ldr	r2, [pc, #92]	; (800164c <HAL_RCC_GetSysClockFreq+0x9c>)
 80015f0:	5cd3      	ldrb	r3, [r2, r3]
 80015f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d010      	beq.n	8001620 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <HAL_RCC_GetSysClockFreq+0x94>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	0c5b      	lsrs	r3, r3, #17
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	4a11      	ldr	r2, [pc, #68]	; (8001650 <HAL_RCC_GetSysClockFreq+0xa0>)
 800160a:	5cd3      	ldrb	r3, [r2, r3]
 800160c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a0d      	ldr	r2, [pc, #52]	; (8001648 <HAL_RCC_GetSysClockFreq+0x98>)
 8001612:	fb03 f202 	mul.w	r2, r3, r2
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	fbb2 f3f3 	udiv	r3, r2, r3
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	e004      	b.n	800162a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a0c      	ldr	r2, [pc, #48]	; (8001654 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001624:	fb02 f303 	mul.w	r3, r2, r3
 8001628:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	613b      	str	r3, [r7, #16]
      break;
 800162e:	e002      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <HAL_RCC_GetSysClockFreq+0x98>)
 8001632:	613b      	str	r3, [r7, #16]
      break;
 8001634:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001636:	693b      	ldr	r3, [r7, #16]
}
 8001638:	4618      	mov	r0, r3
 800163a:	371c      	adds	r7, #28
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40021000 	.word	0x40021000
 8001648:	007a1200 	.word	0x007a1200
 800164c:	08002248 	.word	0x08002248
 8001650:	08002258 	.word	0x08002258
 8001654:	003d0900 	.word	0x003d0900

08001658 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001660:	4b0a      	ldr	r3, [pc, #40]	; (800168c <RCC_Delay+0x34>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <RCC_Delay+0x38>)
 8001666:	fba2 2303 	umull	r2, r3, r2, r3
 800166a:	0a5b      	lsrs	r3, r3, #9
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	fb02 f303 	mul.w	r3, r2, r3
 8001672:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001674:	bf00      	nop
  }
  while (Delay --);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1e5a      	subs	r2, r3, #1
 800167a:	60fa      	str	r2, [r7, #12]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1f9      	bne.n	8001674 <RCC_Delay+0x1c>
}
 8001680:	bf00      	nop
 8001682:	bf00      	nop
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	20000000 	.word	0x20000000
 8001690:	10624dd3 	.word	0x10624dd3

08001694 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e076      	b.n	8001794 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d108      	bne.n	80016c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80016b6:	d009      	beq.n	80016cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
 80016be:	e005      	b.n	80016cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d106      	bne.n	80016ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7fe ffc6 	bl	8000678 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2202      	movs	r2, #2
 80016f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001702:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001714:	431a      	orrs	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	431a      	orrs	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800173c:	431a      	orrs	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001750:	ea42 0103 	orr.w	r1, r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001758:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	0c1a      	lsrs	r2, r3, #16
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f002 0204 	and.w	r2, r2, #4
 8001772:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	69da      	ldr	r2, [r3, #28]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001782:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	4613      	mov	r3, r2
 80017aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80017ac:	2300      	movs	r3, #0
 80017ae:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d101      	bne.n	80017be <HAL_SPI_Transmit+0x22>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e12d      	b.n	8001a1a <HAL_SPI_Transmit+0x27e>
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80017c6:	f7ff f897 	bl	80008f8 <HAL_GetTick>
 80017ca:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d002      	beq.n	80017e2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80017dc:	2302      	movs	r3, #2
 80017de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80017e0:	e116      	b.n	8001a10 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d002      	beq.n	80017ee <HAL_SPI_Transmit+0x52>
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d102      	bne.n	80017f4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80017f2:	e10d      	b.n	8001a10 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2203      	movs	r2, #3
 80017f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2200      	movs	r2, #0
 8001800:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	88fa      	ldrh	r2, [r7, #6]
 800180c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	88fa      	ldrh	r2, [r7, #6]
 8001812:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2200      	movs	r2, #0
 800182a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2200      	movs	r2, #0
 8001830:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800183a:	d10f      	bne.n	800185c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800184a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800185a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001866:	2b40      	cmp	r3, #64	; 0x40
 8001868:	d007      	beq.n	800187a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001878:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001882:	d14f      	bne.n	8001924 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d002      	beq.n	8001892 <HAL_SPI_Transmit+0xf6>
 800188c:	8afb      	ldrh	r3, [r7, #22]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d142      	bne.n	8001918 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	881a      	ldrh	r2, [r3, #0]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	1c9a      	adds	r2, r3, #2
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	3b01      	subs	r3, #1
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80018b6:	e02f      	b.n	8001918 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d112      	bne.n	80018ec <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	881a      	ldrh	r2, [r3, #0]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	1c9a      	adds	r2, r3, #2
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	3b01      	subs	r3, #1
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	86da      	strh	r2, [r3, #54]	; 0x36
 80018ea:	e015      	b.n	8001918 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80018ec:	f7ff f804 	bl	80008f8 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d803      	bhi.n	8001904 <HAL_SPI_Transmit+0x168>
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001902:	d102      	bne.n	800190a <HAL_SPI_Transmit+0x16e>
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d106      	bne.n	8001918 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001916:	e07b      	b.n	8001a10 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800191c:	b29b      	uxth	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1ca      	bne.n	80018b8 <HAL_SPI_Transmit+0x11c>
 8001922:	e050      	b.n	80019c6 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d002      	beq.n	8001932 <HAL_SPI_Transmit+0x196>
 800192c:	8afb      	ldrh	r3, [r7, #22]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d144      	bne.n	80019bc <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	330c      	adds	r3, #12
 800193c:	7812      	ldrb	r2, [r2, #0]
 800193e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001944:	1c5a      	adds	r2, r3, #1
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800194e:	b29b      	uxth	r3, r3
 8001950:	3b01      	subs	r3, #1
 8001952:	b29a      	uxth	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001958:	e030      	b.n	80019bc <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b02      	cmp	r3, #2
 8001966:	d113      	bne.n	8001990 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	330c      	adds	r3, #12
 8001972:	7812      	ldrb	r2, [r2, #0]
 8001974:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001984:	b29b      	uxth	r3, r3
 8001986:	3b01      	subs	r3, #1
 8001988:	b29a      	uxth	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	86da      	strh	r2, [r3, #54]	; 0x36
 800198e:	e015      	b.n	80019bc <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001990:	f7fe ffb2 	bl	80008f8 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d803      	bhi.n	80019a8 <HAL_SPI_Transmit+0x20c>
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019a6:	d102      	bne.n	80019ae <HAL_SPI_Transmit+0x212>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d106      	bne.n	80019bc <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80019ba:	e029      	b.n	8001a10 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1c9      	bne.n	800195a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	6839      	ldr	r1, [r7, #0]
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f000 fbcc 	bl	8002168 <SPI_EndRxTxTransaction>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d002      	beq.n	80019dc <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2220      	movs	r2, #32
 80019da:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d10a      	bne.n	80019fa <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80019e4:	2300      	movs	r3, #0
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d002      	beq.n	8001a08 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	77fb      	strb	r3, [r7, #31]
 8001a06:	e003      	b.n	8001a10 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001a18:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3720      	adds	r7, #32
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b088      	sub	sp, #32
 8001a26:	af02      	add	r7, sp, #8
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	603b      	str	r3, [r7, #0]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d002      	beq.n	8001a48 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8001a42:	2302      	movs	r3, #2
 8001a44:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001a46:	e0fb      	b.n	8001c40 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a50:	d112      	bne.n	8001a78 <HAL_SPI_Receive+0x56>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10e      	bne.n	8001a78 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2204      	movs	r2, #4
 8001a5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001a62:	88fa      	ldrh	r2, [r7, #6]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	68b9      	ldr	r1, [r7, #8]
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f000 f8ef 	bl	8001c52 <HAL_SPI_TransmitReceive>
 8001a74:	4603      	mov	r3, r0
 8001a76:	e0e8      	b.n	8001c4a <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d101      	bne.n	8001a86 <HAL_SPI_Receive+0x64>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e0e1      	b.n	8001c4a <HAL_SPI_Receive+0x228>
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a8e:	f7fe ff33 	bl	80008f8 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d002      	beq.n	8001aa0 <HAL_SPI_Receive+0x7e>
 8001a9a:	88fb      	ldrh	r3, [r7, #6]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d102      	bne.n	8001aa6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001aa4:	e0cc      	b.n	8001c40 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2204      	movs	r2, #4
 8001aaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	88fa      	ldrh	r2, [r7, #6]
 8001abe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	88fa      	ldrh	r2, [r7, #6]
 8001ac4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2200      	movs	r2, #0
 8001adc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001aec:	d10f      	bne.n	8001b0e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001afc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b0c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b18:	2b40      	cmp	r3, #64	; 0x40
 8001b1a:	d007      	beq.n	8001b2c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b2a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d16a      	bne.n	8001c0a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001b34:	e032      	b.n	8001b9c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d115      	bne.n	8001b70 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f103 020c 	add.w	r2, r3, #12
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b50:	7812      	ldrb	r2, [r2, #0]
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	3b01      	subs	r3, #1
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001b6e:	e015      	b.n	8001b9c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b70:	f7fe fec2 	bl	80008f8 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d803      	bhi.n	8001b88 <HAL_SPI_Receive+0x166>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b86:	d102      	bne.n	8001b8e <HAL_SPI_Receive+0x16c>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d106      	bne.n	8001b9c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001b9a:	e051      	b.n	8001c40 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1c7      	bne.n	8001b36 <HAL_SPI_Receive+0x114>
 8001ba6:	e035      	b.n	8001c14 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d113      	bne.n	8001bde <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc0:	b292      	uxth	r2, r2
 8001bc2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc8:	1c9a      	adds	r2, r3, #2
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001bdc:	e015      	b.n	8001c0a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bde:	f7fe fe8b 	bl	80008f8 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d803      	bhi.n	8001bf6 <HAL_SPI_Receive+0x1d4>
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bf4:	d102      	bne.n	8001bfc <HAL_SPI_Receive+0x1da>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d106      	bne.n	8001c0a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001c08:	e01a      	b.n	8001c40 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1c9      	bne.n	8001ba8 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	6839      	ldr	r1, [r7, #0]
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f000 fa53 	bl	80020c4 <SPI_EndRxTransaction>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d002      	beq.n	8001c2a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2220      	movs	r2, #32
 8001c28:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d002      	beq.n	8001c38 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	75fb      	strb	r3, [r7, #23]
 8001c36:	e003      	b.n	8001c40 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b08c      	sub	sp, #48	; 0x30
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
 8001c5e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001c60:	2301      	movs	r3, #1
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <HAL_SPI_TransmitReceive+0x26>
 8001c74:	2302      	movs	r3, #2
 8001c76:	e198      	b.n	8001faa <HAL_SPI_TransmitReceive+0x358>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c80:	f7fe fe3a 	bl	80008f8 <HAL_GetTick>
 8001c84:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001c96:	887b      	ldrh	r3, [r7, #2]
 8001c98:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001c9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d00f      	beq.n	8001cc2 <HAL_SPI_TransmitReceive+0x70>
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ca8:	d107      	bne.n	8001cba <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d103      	bne.n	8001cba <HAL_SPI_TransmitReceive+0x68>
 8001cb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d003      	beq.n	8001cc2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001cc0:	e16d      	b.n	8001f9e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <HAL_SPI_TransmitReceive+0x82>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d002      	beq.n	8001cd4 <HAL_SPI_TransmitReceive+0x82>
 8001cce:	887b      	ldrh	r3, [r7, #2]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d103      	bne.n	8001cdc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001cda:	e160      	b.n	8001f9e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d003      	beq.n	8001cf0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2205      	movs	r2, #5
 8001cec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	887a      	ldrh	r2, [r7, #2]
 8001d00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	887a      	ldrh	r2, [r7, #2]
 8001d06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	887a      	ldrh	r2, [r7, #2]
 8001d12:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	887a      	ldrh	r2, [r7, #2]
 8001d18:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d30:	2b40      	cmp	r3, #64	; 0x40
 8001d32:	d007      	beq.n	8001d44 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d4c:	d17c      	bne.n	8001e48 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d002      	beq.n	8001d5c <HAL_SPI_TransmitReceive+0x10a>
 8001d56:	8b7b      	ldrh	r3, [r7, #26]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d16a      	bne.n	8001e32 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d60:	881a      	ldrh	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6c:	1c9a      	adds	r2, r3, #2
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d80:	e057      	b.n	8001e32 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d11b      	bne.n	8001dc8 <HAL_SPI_TransmitReceive+0x176>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d016      	beq.n	8001dc8 <HAL_SPI_TransmitReceive+0x176>
 8001d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d113      	bne.n	8001dc8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	881a      	ldrh	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	1c9a      	adds	r2, r3, #2
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d119      	bne.n	8001e0a <HAL_SPI_TransmitReceive+0x1b8>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d014      	beq.n	8001e0a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dea:	b292      	uxth	r2, r2
 8001dec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df2:	1c9a      	adds	r2, r3, #2
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e06:	2301      	movs	r3, #1
 8001e08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001e0a:	f7fe fd75 	bl	80008f8 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d80b      	bhi.n	8001e32 <HAL_SPI_TransmitReceive+0x1e0>
 8001e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e20:	d007      	beq.n	8001e32 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8001e30:	e0b5      	b.n	8001f9e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1a2      	bne.n	8001d82 <HAL_SPI_TransmitReceive+0x130>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d19d      	bne.n	8001d82 <HAL_SPI_TransmitReceive+0x130>
 8001e46:	e080      	b.n	8001f4a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <HAL_SPI_TransmitReceive+0x204>
 8001e50:	8b7b      	ldrh	r3, [r7, #26]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d16f      	bne.n	8001f36 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	330c      	adds	r3, #12
 8001e60:	7812      	ldrb	r2, [r2, #0]
 8001e62:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e68:	1c5a      	adds	r2, r3, #1
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	3b01      	subs	r3, #1
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e7c:	e05b      	b.n	8001f36 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d11c      	bne.n	8001ec6 <HAL_SPI_TransmitReceive+0x274>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d017      	beq.n	8001ec6 <HAL_SPI_TransmitReceive+0x274>
 8001e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d114      	bne.n	8001ec6 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	330c      	adds	r3, #12
 8001ea6:	7812      	ldrb	r2, [r2, #0]
 8001ea8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d119      	bne.n	8001f08 <HAL_SPI_TransmitReceive+0x2b6>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d014      	beq.n	8001f08 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	3b01      	subs	r3, #1
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f04:	2301      	movs	r3, #1
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001f08:	f7fe fcf6 	bl	80008f8 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d803      	bhi.n	8001f20 <HAL_SPI_TransmitReceive+0x2ce>
 8001f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f1e:	d102      	bne.n	8001f26 <HAL_SPI_TransmitReceive+0x2d4>
 8001f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d107      	bne.n	8001f36 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8001f34:	e033      	b.n	8001f9e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d19e      	bne.n	8001e7e <HAL_SPI_TransmitReceive+0x22c>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d199      	bne.n	8001e7e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 f90a 	bl	8002168 <SPI_EndRxTxTransaction>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d006      	beq.n	8001f68 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2220      	movs	r2, #32
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001f66:	e01a      	b.n	8001f9e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10a      	bne.n	8001f86 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001f94:	e003      	b.n	8001f9e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001fa6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3730      	adds	r7, #48	; 0x30
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	603b      	str	r3, [r7, #0]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001fc4:	f7fe fc98 	bl	80008f8 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fcc:	1a9b      	subs	r3, r3, r2
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001fd4:	f7fe fc90 	bl	80008f8 <HAL_GetTick>
 8001fd8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001fda:	4b39      	ldr	r3, [pc, #228]	; (80020c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	015b      	lsls	r3, r3, #5
 8001fe0:	0d1b      	lsrs	r3, r3, #20
 8001fe2:	69fa      	ldr	r2, [r7, #28]
 8001fe4:	fb02 f303 	mul.w	r3, r2, r3
 8001fe8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fea:	e054      	b.n	8002096 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ff2:	d050      	beq.n	8002096 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001ff4:	f7fe fc80 	bl	80008f8 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	69fa      	ldr	r2, [r7, #28]
 8002000:	429a      	cmp	r2, r3
 8002002:	d902      	bls.n	800200a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d13d      	bne.n	8002086 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002018:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002022:	d111      	bne.n	8002048 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800202c:	d004      	beq.n	8002038 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002036:	d107      	bne.n	8002048 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002046:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002050:	d10f      	bne.n	8002072 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002070:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e017      	b.n	80020b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	3b01      	subs	r3, #1
 8002094:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	4013      	ands	r3, r2
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	bf0c      	ite	eq
 80020a6:	2301      	moveq	r3, #1
 80020a8:	2300      	movne	r3, #0
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	461a      	mov	r2, r3
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d19b      	bne.n	8001fec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3720      	adds	r7, #32
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000000 	.word	0x20000000

080020c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020d8:	d111      	bne.n	80020fe <SPI_EndRxTransaction+0x3a>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020e2:	d004      	beq.n	80020ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ec:	d107      	bne.n	80020fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020fc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002106:	d117      	bne.n	8002138 <SPI_EndRxTransaction+0x74>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002110:	d112      	bne.n	8002138 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	2200      	movs	r2, #0
 800211a:	2101      	movs	r1, #1
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f7ff ff49 	bl	8001fb4 <SPI_WaitFlagStateUntilTimeout>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d01a      	beq.n	800215e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212c:	f043 0220 	orr.w	r2, r3, #32
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e013      	b.n	8002160 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2200      	movs	r2, #0
 8002140:	2180      	movs	r1, #128	; 0x80
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f7ff ff36 	bl	8001fb4 <SPI_WaitFlagStateUntilTimeout>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d007      	beq.n	800215e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002152:	f043 0220 	orr.w	r2, r3, #32
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e000      	b.n	8002160 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af02      	add	r7, sp, #8
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2200      	movs	r2, #0
 800217c:	2180      	movs	r1, #128	; 0x80
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f7ff ff18 	bl	8001fb4 <SPI_WaitFlagStateUntilTimeout>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d007      	beq.n	800219a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218e:	f043 0220 	orr.w	r2, r3, #32
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e000      	b.n	800219c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <memset>:
 80021a4:	4603      	mov	r3, r0
 80021a6:	4402      	add	r2, r0
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d100      	bne.n	80021ae <memset+0xa>
 80021ac:	4770      	bx	lr
 80021ae:	f803 1b01 	strb.w	r1, [r3], #1
 80021b2:	e7f9      	b.n	80021a8 <memset+0x4>

080021b4 <__libc_init_array>:
 80021b4:	b570      	push	{r4, r5, r6, lr}
 80021b6:	2600      	movs	r6, #0
 80021b8:	4d0c      	ldr	r5, [pc, #48]	; (80021ec <__libc_init_array+0x38>)
 80021ba:	4c0d      	ldr	r4, [pc, #52]	; (80021f0 <__libc_init_array+0x3c>)
 80021bc:	1b64      	subs	r4, r4, r5
 80021be:	10a4      	asrs	r4, r4, #2
 80021c0:	42a6      	cmp	r6, r4
 80021c2:	d109      	bne.n	80021d8 <__libc_init_array+0x24>
 80021c4:	f000 f828 	bl	8002218 <_init>
 80021c8:	2600      	movs	r6, #0
 80021ca:	4d0a      	ldr	r5, [pc, #40]	; (80021f4 <__libc_init_array+0x40>)
 80021cc:	4c0a      	ldr	r4, [pc, #40]	; (80021f8 <__libc_init_array+0x44>)
 80021ce:	1b64      	subs	r4, r4, r5
 80021d0:	10a4      	asrs	r4, r4, #2
 80021d2:	42a6      	cmp	r6, r4
 80021d4:	d105      	bne.n	80021e2 <__libc_init_array+0x2e>
 80021d6:	bd70      	pop	{r4, r5, r6, pc}
 80021d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80021dc:	4798      	blx	r3
 80021de:	3601      	adds	r6, #1
 80021e0:	e7ee      	b.n	80021c0 <__libc_init_array+0xc>
 80021e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80021e6:	4798      	blx	r3
 80021e8:	3601      	adds	r6, #1
 80021ea:	e7f2      	b.n	80021d2 <__libc_init_array+0x1e>
 80021ec:	0800225c 	.word	0x0800225c
 80021f0:	0800225c 	.word	0x0800225c
 80021f4:	0800225c 	.word	0x0800225c
 80021f8:	08002260 	.word	0x08002260

080021fc <memcpy>:
 80021fc:	440a      	add	r2, r1
 80021fe:	4291      	cmp	r1, r2
 8002200:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002204:	d100      	bne.n	8002208 <memcpy+0xc>
 8002206:	4770      	bx	lr
 8002208:	b510      	push	{r4, lr}
 800220a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800220e:	4291      	cmp	r1, r2
 8002210:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002214:	d1f9      	bne.n	800220a <memcpy+0xe>
 8002216:	bd10      	pop	{r4, pc}

08002218 <_init>:
 8002218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800221a:	bf00      	nop
 800221c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800221e:	bc08      	pop	{r3}
 8002220:	469e      	mov	lr, r3
 8002222:	4770      	bx	lr

08002224 <_fini>:
 8002224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002226:	bf00      	nop
 8002228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800222a:	bc08      	pop	{r3}
 800222c:	469e      	mov	lr, r3
 800222e:	4770      	bx	lr
