
NRF24L01_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d5c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003e68  08003e68  00013e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eb0  08003eb0  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08003eb0  08003eb0  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003eb0  08003eb0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eb0  08003eb0  00013eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eb4  08003eb4  00013eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000060  08003f18  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08003f18  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d472  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002828  00000000  00000000  0002d53e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e30  00000000  00000000  0002fd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ada  00000000  00000000  00030b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018deb  00000000  00000000  00031672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010780  00000000  00000000  0004a45d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ecbe  00000000  00000000  0005abdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003cbc  00000000  00000000  000e989c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000ed558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e50 	.word	0x08003e50

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08003e50 	.word	0x08003e50

0800014c <ce_enable>:
extern SPI_HandleTypeDef hspi1;
#define NRF24_SPI 	&hspi1


void ce_enable (void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF24L01_CE_GPIO_Port, NRF24L01_CE_Pin, GPIO_PIN_SET);
 8000150:	2201      	movs	r2, #1
 8000152:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000156:	4802      	ldr	r0, [pc, #8]	; (8000160 <ce_enable+0x14>)
 8000158:	f001 fde6 	bl	8001d28 <HAL_GPIO_WritePin>
}
 800015c:	bf00      	nop
 800015e:	bd80      	pop	{r7, pc}
 8000160:	40010800 	.word	0x40010800

08000164 <ce_disable>:
void ce_disable (void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF24L01_CE_GPIO_Port, NRF24L01_CE_Pin, GPIO_PIN_RESET);
 8000168:	2200      	movs	r2, #0
 800016a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800016e:	4802      	ldr	r0, [pc, #8]	; (8000178 <ce_disable+0x14>)
 8000170:	f001 fdda 	bl	8001d28 <HAL_GPIO_WritePin>
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	40010800 	.word	0x40010800

0800017c <csn_select>:

void csn_select (void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF24L01_CSN_GPIO_Port, NRF24L01_CSN_Pin, GPIO_PIN_RESET);
 8000180:	2200      	movs	r2, #0
 8000182:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000186:	4802      	ldr	r0, [pc, #8]	; (8000190 <csn_select+0x14>)
 8000188:	f001 fdce 	bl	8001d28 <HAL_GPIO_WritePin>
}
 800018c:	bf00      	nop
 800018e:	bd80      	pop	{r7, pc}
 8000190:	40010800 	.word	0x40010800

08000194 <csn_unselect>:
void csn_unselect (void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF24L01_CSN_GPIO_Port, NRF24L01_CSN_Pin, GPIO_PIN_SET);
 8000198:	2201      	movs	r2, #1
 800019a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800019e:	4802      	ldr	r0, [pc, #8]	; (80001a8 <csn_unselect+0x14>)
 80001a0:	f001 fdc2 	bl	8001d28 <HAL_GPIO_WritePin>
}
 80001a4:	bf00      	nop
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	40010800 	.word	0x40010800

080001ac <nrf24_write_reg>:


// write single byte to the particular register
void nrf24_write_reg (const uint8_t reg, const uint8_t data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	4603      	mov	r3, r0
 80001b4:	460a      	mov	r2, r1
 80001b6:	71fb      	strb	r3, [r7, #7]
 80001b8:	4613      	mov	r3, r2
 80001ba:	71bb      	strb	r3, [r7, #6]
  uint8_t buffer[2];
  buffer[0] = reg | (1 << 5);
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	f043 0320 	orr.w	r3, r3, #32
 80001c2:	b2db      	uxtb	r3, r3
 80001c4:	733b      	strb	r3, [r7, #12]
  buffer[1] = data;
 80001c6:	79bb      	ldrb	r3, [r7, #6]
 80001c8:	737b      	strb	r3, [r7, #13]

  // Pull CSN pin LOW to select the device
  csn_select();
 80001ca:	f7ff ffd7 	bl	800017c <csn_select>

  HAL_SPI_Transmit(NRF24_SPI, buffer, 2, 1000);
 80001ce:	f107 010c 	add.w	r1, r7, #12
 80001d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d6:	2202      	movs	r2, #2
 80001d8:	4804      	ldr	r0, [pc, #16]	; (80001ec <nrf24_write_reg+0x40>)
 80001da:	f002 fbdb 	bl	8002994 <HAL_SPI_Transmit>

  // Pull CSN pin HIGH to unselect the divice
  csn_unselect();
 80001de:	f7ff ffd9 	bl	8000194 <csn_unselect>
}
 80001e2:	bf00      	nop
 80001e4:	3710      	adds	r7, #16
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	200000e0 	.word	0x200000e0

080001f0 <nrf24_write_reg_multi>:
// write multiple bytes to the particular register
void nrf24_write_reg_multi (const uint8_t reg, const uint8_t *data, const size_t size)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b086      	sub	sp, #24
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	60b9      	str	r1, [r7, #8]
 80001fa:	607a      	str	r2, [r7, #4]
 80001fc:	73fb      	strb	r3, [r7, #15]
  uint8_t buffer[6];
  buffer[0] = reg | (1 << 5);
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	f043 0320 	orr.w	r3, r3, #32
 8000204:	b2db      	uxtb	r3, r3
 8000206:	743b      	strb	r3, [r7, #16]
  buffer[1] = data[0];
 8000208:	68bb      	ldr	r3, [r7, #8]
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	747b      	strb	r3, [r7, #17]
  buffer[2] = data[1];
 800020e:	68bb      	ldr	r3, [r7, #8]
 8000210:	3301      	adds	r3, #1
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	74bb      	strb	r3, [r7, #18]
  buffer[3] = data[2];
 8000216:	68bb      	ldr	r3, [r7, #8]
 8000218:	3302      	adds	r3, #2
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	74fb      	strb	r3, [r7, #19]
  buffer[4] = data[3];
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	3303      	adds	r3, #3
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	753b      	strb	r3, [r7, #20]
  buffer[5] = data[4];
 8000226:	68bb      	ldr	r3, [r7, #8]
 8000228:	3304      	adds	r3, #4
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	757b      	strb	r3, [r7, #21]

  // Pull CSN pin LOW to select the device
  csn_select();
 800022e:	f7ff ffa5 	bl	800017c <csn_select>

  HAL_SPI_Transmit(NRF24_SPI, buffer, size + 1, 1000);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	b29b      	uxth	r3, r3
 8000236:	3301      	adds	r3, #1
 8000238:	b29a      	uxth	r2, r3
 800023a:	f107 0110 	add.w	r1, r7, #16
 800023e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000242:	4804      	ldr	r0, [pc, #16]	; (8000254 <nrf24_write_reg_multi+0x64>)
 8000244:	f002 fba6 	bl	8002994 <HAL_SPI_Transmit>

  // Pull CSN pin HIGH to unselect the divice
  csn_unselect();
 8000248:	f7ff ffa4 	bl	8000194 <csn_unselect>
}
 800024c:	bf00      	nop
 800024e:	3718      	adds	r7, #24
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	200000e0 	.word	0x200000e0

08000258 <nrf24_read_reg>:

// read single byte from the particular register
uint8_t nrf24_read_reg (uint8_t reg)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	71fb      	strb	r3, [r7, #7]
  uint8_t data = 0;
 8000262:	2300      	movs	r3, #0
 8000264:	73fb      	strb	r3, [r7, #15]

  // Pull CSN pin LOW to select the device
  csn_select();
 8000266:	f7ff ff89 	bl	800017c <csn_select>

  HAL_SPI_Transmit(NRF24_SPI, &reg, 1, 100);
 800026a:	1df9      	adds	r1, r7, #7
 800026c:	2364      	movs	r3, #100	; 0x64
 800026e:	2201      	movs	r2, #1
 8000270:	4808      	ldr	r0, [pc, #32]	; (8000294 <nrf24_read_reg+0x3c>)
 8000272:	f002 fb8f 	bl	8002994 <HAL_SPI_Transmit>
  HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8000276:	f107 010f 	add.w	r1, r7, #15
 800027a:	2364      	movs	r3, #100	; 0x64
 800027c:	2201      	movs	r2, #1
 800027e:	4805      	ldr	r0, [pc, #20]	; (8000294 <nrf24_read_reg+0x3c>)
 8000280:	f002 fccb 	bl	8002c1a <HAL_SPI_Receive>

  // Pull CSN pin HIGH to unselect the divice
  csn_unselect();
 8000284:	f7ff ff86 	bl	8000194 <csn_unselect>

  return data;
 8000288:	7bfb      	ldrb	r3, [r7, #15]
}
 800028a:	4618      	mov	r0, r3
 800028c:	3710      	adds	r7, #16
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	200000e0 	.word	0x200000e0

08000298 <nrf24_write_cmd>:
}

// send command to the RF module
// select the device before invoking the function
void nrf24_write_cmd (uint8_t cmd)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 80002a2:	1df9      	adds	r1, r7, #7
 80002a4:	2364      	movs	r3, #100	; 0x64
 80002a6:	2201      	movs	r2, #1
 80002a8:	4803      	ldr	r0, [pc, #12]	; (80002b8 <nrf24_write_cmd+0x20>)
 80002aa:	f002 fb73 	bl	8002994 <HAL_SPI_Transmit>
}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	200000e0 	.word	0x200000e0

080002bc <NRF24_init>:


// initialize the RF module
// wait 1.5 ms after completion
void NRF24_init (void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  // disable the device before initializing
  ce_disable();
 80002c0:	f7ff ff50 	bl	8000164 <ce_disable>

  nrf24_write_reg(CONFIG, 0);		// to be configured later
 80002c4:	2100      	movs	r1, #0
 80002c6:	2000      	movs	r0, #0
 80002c8:	f7ff ff70 	bl	80001ac <nrf24_write_reg>
  nrf24_write_reg(EN_AA, 0); 		// No auto ACK
 80002cc:	2100      	movs	r1, #0
 80002ce:	2001      	movs	r0, #1
 80002d0:	f7ff ff6c 	bl	80001ac <nrf24_write_reg>
  nrf24_write_reg(EN_RXADDR, 0);	// disabling the data pipes
 80002d4:	2100      	movs	r1, #0
 80002d6:	2002      	movs	r0, #2
 80002d8:	f7ff ff68 	bl	80001ac <nrf24_write_reg>
  nrf24_write_reg(SETUP_AW, 0x03);	// TX/RX address length = 5 bytes
 80002dc:	2103      	movs	r1, #3
 80002de:	2003      	movs	r0, #3
 80002e0:	f7ff ff64 	bl	80001ac <nrf24_write_reg>
  nrf24_write_reg(SETUP_RETR, 0);	// No retransmissions
 80002e4:	2100      	movs	r1, #0
 80002e6:	2004      	movs	r0, #4
 80002e8:	f7ff ff60 	bl	80001ac <nrf24_write_reg>
  nrf24_write_reg(RF_CH, 0);		// will be set up during TX or RX configuration
 80002ec:	2100      	movs	r1, #0
 80002ee:	2005      	movs	r0, #5
 80002f0:	f7ff ff5c 	bl	80001ac <nrf24_write_reg>
  nrf24_write_reg(RF_SETUP, 0x06);	// Output power = 0db, data rate = 1 Mbps
 80002f4:	2106      	movs	r1, #6
 80002f6:	2006      	movs	r0, #6
 80002f8:	f7ff ff58 	bl	80001ac <nrf24_write_reg>
}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}

08000300 <NRF24_TX_mode>:
////////////////////////////////////////////////////////////////////////////////
////////// TRANSMITTER ////////// TRANSMITTER ////////// TRANSMITTER ///////////
////////////////////////////////////////////////////////////////////////////////
// set up the TX mode
void NRF24_TX_mode (const uint8_t *address, const uint16_t channel)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	460b      	mov	r3, r1
 800030a:	807b      	strh	r3, [r7, #2]
  nrf24_write_reg(RF_CH, channel);		// select the frequency channel
 800030c:	887b      	ldrh	r3, [r7, #2]
 800030e:	b2db      	uxtb	r3, r3
 8000310:	4619      	mov	r1, r3
 8000312:	2005      	movs	r0, #5
 8000314:	f7ff ff4a 	bl	80001ac <nrf24_write_reg>
  nrf24_write_reg_multi(TX_ADDR, address, 5);	// set up the TX address
 8000318:	2205      	movs	r2, #5
 800031a:	6879      	ldr	r1, [r7, #4]
 800031c:	2010      	movs	r0, #16
 800031e:	f7ff ff67 	bl	80001f0 <nrf24_write_reg_multi>

  // power up the device
  uint8_t config = nrf24_read_reg(CONFIG);
 8000322:	2000      	movs	r0, #0
 8000324:	f7ff ff98 	bl	8000258 <nrf24_read_reg>
 8000328:	4603      	mov	r3, r0
 800032a:	73fb      	strb	r3, [r7, #15]
  config |= (1 << 4) | (1 << 1);		// MAX_RT IRQ disabled; Power up; PTX
 800032c:	7bfb      	ldrb	r3, [r7, #15]
 800032e:	f043 0312 	orr.w	r3, r3, #18
 8000332:	73fb      	strb	r3, [r7, #15]
  nrf24_write_reg(CONFIG, config);
 8000334:	7bfb      	ldrb	r3, [r7, #15]
 8000336:	4619      	mov	r1, r3
 8000338:	2000      	movs	r0, #0
 800033a:	f7ff ff37 	bl	80001ac <nrf24_write_reg>
}
 800033e:	bf00      	nop
 8000340:	3710      	adds	r7, #16
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
	...

08000348 <load_payload>:

int load_payload (const Payload *payload)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  if (32 < sizeof(Payload))
  {
      return 1; // too big size
  }

  uint8_t *buffer = (uint8_t*) calloc(sizeof(Payload) + 1, sizeof(uint8_t));
 8000350:	2101      	movs	r1, #1
 8000352:	2005      	movs	r0, #5
 8000354:	f003 fc20 	bl	8003b98 <calloc>
 8000358:	4603      	mov	r3, r0
 800035a:	60fb      	str	r3, [r7, #12]
  if (NULL == buffer)
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d101      	bne.n	8000366 <load_payload+0x1e>
  {
      return 2; // calloc error
 8000362:	2302      	movs	r3, #2
 8000364:	e018      	b.n	8000398 <load_payload+0x50>
  }

  buffer[0] = W_TX_PAYLOAD;
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	22a0      	movs	r2, #160	; 0xa0
 800036a:	701a      	strb	r2, [r3, #0]
  memcpy(buffer + 1, payload, sizeof(Payload));
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	3301      	adds	r3, #1
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	6812      	ldr	r2, [r2, #0]
 8000374:	601a      	str	r2, [r3, #0]

  // Pull CSN pin HIGH to LOW
  csn_unselect();
 8000376:	f7ff ff0d 	bl	8000194 <csn_unselect>
  csn_select();
 800037a:	f7ff feff 	bl	800017c <csn_select>

  HAL_SPI_Transmit(NRF24_SPI, buffer, sizeof(Payload) + 1, 1000);
 800037e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000382:	2205      	movs	r2, #5
 8000384:	68f9      	ldr	r1, [r7, #12]
 8000386:	4806      	ldr	r0, [pc, #24]	; (80003a0 <load_payload+0x58>)
 8000388:	f002 fb04 	bl	8002994 <HAL_SPI_Transmit>

  free(buffer);
 800038c:	68f8      	ldr	r0, [r7, #12]
 800038e:	f003 fc1f 	bl	8003bd0 <free>

  // Pull CSN pin HIGH to unselect the device
  csn_unselect();
 8000392:	f7ff feff 	bl	8000194 <csn_unselect>
  return 0; // success
 8000396:	2300      	movs	r3, #0
}
 8000398:	4618      	mov	r0, r3
 800039a:	3710      	adds	r7, #16
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	200000e0 	.word	0x200000e0

080003a4 <NRF24_transmit>:

// transmit the data
int NRF24_transmit (const Payload *payload)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
  load_payload(payload);
 80003ac:	6878      	ldr	r0, [r7, #4]
 80003ae:	f7ff ffcb 	bl	8000348 <load_payload>


  ce_enable();
 80003b2:	f7ff fecb 	bl	800014c <ce_enable>
  HAL_Delay(1); // data send
 80003b6:	2001      	movs	r0, #1
 80003b8:	f000 fd52 	bl	8000e60 <HAL_Delay>
  ce_disable();
 80003bc:	f7ff fed2 	bl	8000164 <ce_disable>


  csn_select();
 80003c0:	f7ff fedc 	bl	800017c <csn_select>

  uint8_t fifostatus = nrf24_read_reg(FIFO_STATUS);
 80003c4:	2017      	movs	r0, #23
 80003c6:	f7ff ff47 	bl	8000258 <nrf24_read_reg>
 80003ca:	4603      	mov	r3, r0
 80003cc:	73fb      	strb	r3, [r7, #15]
  if ((fifostatus & (1 << 4)) && !(fifostatus & (1 << 3)))
 80003ce:	7bfb      	ldrb	r3, [r7, #15]
 80003d0:	f003 0310 	and.w	r3, r3, #16
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d00b      	beq.n	80003f0 <NRF24_transmit+0x4c>
 80003d8:	7bfb      	ldrb	r3, [r7, #15]
 80003da:	f003 0308 	and.w	r3, r3, #8
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d106      	bne.n	80003f0 <NRF24_transmit+0x4c>
  {
    nrf24_write_cmd(FLUSH_TX);
 80003e2:	20e1      	movs	r0, #225	; 0xe1
 80003e4:	f7ff ff58 	bl	8000298 <nrf24_write_cmd>

    csn_unselect();
 80003e8:	f7ff fed4 	bl	8000194 <csn_unselect>
    return 0;	// success
 80003ec:	2300      	movs	r3, #0
 80003ee:	e002      	b.n	80003f6 <NRF24_transmit+0x52>
  }

  csn_unselect();
 80003f0:	f7ff fed0 	bl	8000194 <csn_unselect>
  return 1;	// failure
 80003f4:	2301      	movs	r3, #1
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
	...

08000400 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	605a      	str	r2, [r3, #4]
 800040e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000410:	4b18      	ldr	r3, [pc, #96]	; (8000474 <MX_ADC1_Init+0x74>)
 8000412:	4a19      	ldr	r2, [pc, #100]	; (8000478 <MX_ADC1_Init+0x78>)
 8000414:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000416:	4b17      	ldr	r3, [pc, #92]	; (8000474 <MX_ADC1_Init+0x74>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800041c:	4b15      	ldr	r3, [pc, #84]	; (8000474 <MX_ADC1_Init+0x74>)
 800041e:	2200      	movs	r2, #0
 8000420:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000422:	4b14      	ldr	r3, [pc, #80]	; (8000474 <MX_ADC1_Init+0x74>)
 8000424:	2200      	movs	r2, #0
 8000426:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000428:	4b12      	ldr	r3, [pc, #72]	; (8000474 <MX_ADC1_Init+0x74>)
 800042a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800042e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000430:	4b10      	ldr	r3, [pc, #64]	; (8000474 <MX_ADC1_Init+0x74>)
 8000432:	2200      	movs	r2, #0
 8000434:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000436:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <MX_ADC1_Init+0x74>)
 8000438:	2201      	movs	r2, #1
 800043a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800043c:	480d      	ldr	r0, [pc, #52]	; (8000474 <MX_ADC1_Init+0x74>)
 800043e:	f000 fd33 	bl	8000ea8 <HAL_ADC_Init>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000448:	f000 fab6 	bl	80009b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800044c:	2300      	movs	r3, #0
 800044e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000450:	2301      	movs	r3, #1
 8000452:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000454:	2300      	movs	r3, #0
 8000456:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	4619      	mov	r1, r3
 800045c:	4805      	ldr	r0, [pc, #20]	; (8000474 <MX_ADC1_Init+0x74>)
 800045e:	f000 ff85 	bl	800136c <HAL_ADC_ConfigChannel>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000468:	f000 faa6 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800046c:	bf00      	nop
 800046e:	3710      	adds	r7, #16
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	2000007c 	.word	0x2000007c
 8000478:	40012400 	.word	0x40012400

0800047c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	605a      	str	r2, [r3, #4]
 800048a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800048c:	4b18      	ldr	r3, [pc, #96]	; (80004f0 <MX_ADC2_Init+0x74>)
 800048e:	4a19      	ldr	r2, [pc, #100]	; (80004f4 <MX_ADC2_Init+0x78>)
 8000490:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000492:	4b17      	ldr	r3, [pc, #92]	; (80004f0 <MX_ADC2_Init+0x74>)
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000498:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <MX_ADC2_Init+0x74>)
 800049a:	2200      	movs	r2, #0
 800049c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800049e:	4b14      	ldr	r3, [pc, #80]	; (80004f0 <MX_ADC2_Init+0x74>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004a4:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <MX_ADC2_Init+0x74>)
 80004a6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80004aa:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004ac:	4b10      	ldr	r3, [pc, #64]	; (80004f0 <MX_ADC2_Init+0x74>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80004b2:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <MX_ADC2_Init+0x74>)
 80004b4:	2201      	movs	r2, #1
 80004b6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80004b8:	480d      	ldr	r0, [pc, #52]	; (80004f0 <MX_ADC2_Init+0x74>)
 80004ba:	f000 fcf5 	bl	8000ea8 <HAL_ADC_Init>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80004c4:	f000 fa78 	bl	80009b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004c8:	2301      	movs	r3, #1
 80004ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004cc:	2301      	movs	r3, #1
 80004ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	4619      	mov	r1, r3
 80004d8:	4805      	ldr	r0, [pc, #20]	; (80004f0 <MX_ADC2_Init+0x74>)
 80004da:	f000 ff47 	bl	800136c <HAL_ADC_ConfigChannel>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80004e4:	f000 fa68 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80004e8:	bf00      	nop
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	200000ac 	.word	0x200000ac
 80004f4:	40012800 	.word	0x40012800

080004f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b08a      	sub	sp, #40	; 0x28
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000500:	f107 0318 	add.w	r3, r7, #24
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a30      	ldr	r2, [pc, #192]	; (80005d4 <HAL_ADC_MspInit+0xdc>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d12a      	bne.n	800056e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000518:	4b2f      	ldr	r3, [pc, #188]	; (80005d8 <HAL_ADC_MspInit+0xe0>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a2e      	ldr	r2, [pc, #184]	; (80005d8 <HAL_ADC_MspInit+0xe0>)
 800051e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b2c      	ldr	r3, [pc, #176]	; (80005d8 <HAL_ADC_MspInit+0xe0>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800052c:	617b      	str	r3, [r7, #20]
 800052e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000530:	4b29      	ldr	r3, [pc, #164]	; (80005d8 <HAL_ADC_MspInit+0xe0>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a28      	ldr	r2, [pc, #160]	; (80005d8 <HAL_ADC_MspInit+0xe0>)
 8000536:	f043 0304 	orr.w	r3, r3, #4
 800053a:	6193      	str	r3, [r2, #24]
 800053c:	4b26      	ldr	r3, [pc, #152]	; (80005d8 <HAL_ADC_MspInit+0xe0>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	f003 0304 	and.w	r3, r3, #4
 8000544:	613b      	str	r3, [r7, #16]
 8000546:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 8000548:	2303      	movs	r3, #3
 800054a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800054c:	2303      	movs	r3, #3
 800054e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000550:	f107 0318 	add.w	r3, r7, #24
 8000554:	4619      	mov	r1, r3
 8000556:	4821      	ldr	r0, [pc, #132]	; (80005dc <HAL_ADC_MspInit+0xe4>)
 8000558:	f001 fa62 	bl	8001a20 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800055c:	2200      	movs	r2, #0
 800055e:	2100      	movs	r1, #0
 8000560:	2012      	movs	r0, #18
 8000562:	f001 fa26 	bl	80019b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000566:	2012      	movs	r0, #18
 8000568:	f001 fa3f 	bl	80019ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800056c:	e02e      	b.n	80005cc <HAL_ADC_MspInit+0xd4>
  else if(adcHandle->Instance==ADC2)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a1b      	ldr	r2, [pc, #108]	; (80005e0 <HAL_ADC_MspInit+0xe8>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d129      	bne.n	80005cc <HAL_ADC_MspInit+0xd4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000578:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <HAL_ADC_MspInit+0xe0>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a16      	ldr	r2, [pc, #88]	; (80005d8 <HAL_ADC_MspInit+0xe0>)
 800057e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <HAL_ADC_MspInit+0xe0>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000590:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <HAL_ADC_MspInit+0xe0>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a10      	ldr	r2, [pc, #64]	; (80005d8 <HAL_ADC_MspInit+0xe0>)
 8000596:	f043 0304 	orr.w	r3, r3, #4
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <HAL_ADC_MspInit+0xe0>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f003 0304 	and.w	r3, r3, #4
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RIGHT_Pin;
 80005a8:	2302      	movs	r3, #2
 80005aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ac:	2303      	movs	r3, #3
 80005ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RIGHT_GPIO_Port, &GPIO_InitStruct);
 80005b0:	f107 0318 	add.w	r3, r7, #24
 80005b4:	4619      	mov	r1, r3
 80005b6:	4809      	ldr	r0, [pc, #36]	; (80005dc <HAL_ADC_MspInit+0xe4>)
 80005b8:	f001 fa32 	bl	8001a20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80005bc:	2200      	movs	r2, #0
 80005be:	2100      	movs	r1, #0
 80005c0:	2012      	movs	r0, #18
 80005c2:	f001 f9f6 	bl	80019b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80005c6:	2012      	movs	r0, #18
 80005c8:	f001 fa0f 	bl	80019ea <HAL_NVIC_EnableIRQ>
}
 80005cc:	bf00      	nop
 80005ce:	3728      	adds	r7, #40	; 0x28
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40012400 	.word	0x40012400
 80005d8:	40021000 	.word	0x40021000
 80005dc:	40010800 	.word	0x40010800
 80005e0:	40012800 	.word	0x40012800

080005e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 0310 	add.w	r3, r7, #16
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f8:	4b4d      	ldr	r3, [pc, #308]	; (8000730 <MX_GPIO_Init+0x14c>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a4c      	ldr	r2, [pc, #304]	; (8000730 <MX_GPIO_Init+0x14c>)
 80005fe:	f043 0310 	orr.w	r3, r3, #16
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b4a      	ldr	r3, [pc, #296]	; (8000730 <MX_GPIO_Init+0x14c>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0310 	and.w	r3, r3, #16
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000610:	4b47      	ldr	r3, [pc, #284]	; (8000730 <MX_GPIO_Init+0x14c>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	4a46      	ldr	r2, [pc, #280]	; (8000730 <MX_GPIO_Init+0x14c>)
 8000616:	f043 0320 	orr.w	r3, r3, #32
 800061a:	6193      	str	r3, [r2, #24]
 800061c:	4b44      	ldr	r3, [pc, #272]	; (8000730 <MX_GPIO_Init+0x14c>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	f003 0320 	and.w	r3, r3, #32
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000628:	4b41      	ldr	r3, [pc, #260]	; (8000730 <MX_GPIO_Init+0x14c>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	4a40      	ldr	r2, [pc, #256]	; (8000730 <MX_GPIO_Init+0x14c>)
 800062e:	f043 0304 	orr.w	r3, r3, #4
 8000632:	6193      	str	r3, [r2, #24]
 8000634:	4b3e      	ldr	r3, [pc, #248]	; (8000730 <MX_GPIO_Init+0x14c>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	f003 0304 	and.w	r3, r3, #4
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000640:	4b3b      	ldr	r3, [pc, #236]	; (8000730 <MX_GPIO_Init+0x14c>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a3a      	ldr	r2, [pc, #232]	; (8000730 <MX_GPIO_Init+0x14c>)
 8000646:	f043 0308 	orr.w	r3, r3, #8
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	4b38      	ldr	r3, [pc, #224]	; (8000730 <MX_GPIO_Init+0x14c>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f003 0308 	and.w	r3, r3, #8
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065e:	4835      	ldr	r0, [pc, #212]	; (8000734 <MX_GPIO_Init+0x150>)
 8000660:	f001 fb62 	bl	8001d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF24L01_CE_Pin|NRF24L01_CSN_Pin, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 800066a:	4833      	ldr	r0, [pc, #204]	; (8000738 <MX_GPIO_Init+0x154>)
 800066c:	f001 fb5c 	bl	8001d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000670:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000674:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2302      	movs	r3, #2
 8000680:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000682:	f107 0310 	add.w	r3, r7, #16
 8000686:	4619      	mov	r1, r3
 8000688:	482a      	ldr	r0, [pc, #168]	; (8000734 <MX_GPIO_Init+0x150>)
 800068a:	f001 f9c9 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = HAND_DOWN_Pin|HAND_UP_Pin;
 800068e:	230c      	movs	r3, #12
 8000690:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000692:	4b2a      	ldr	r3, [pc, #168]	; (800073c <MX_GPIO_Init+0x158>)
 8000694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000696:	2301      	movs	r3, #1
 8000698:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069a:	f107 0310 	add.w	r3, r7, #16
 800069e:	4619      	mov	r1, r3
 80006a0:	4825      	ldr	r0, [pc, #148]	; (8000738 <MX_GPIO_Init+0x154>)
 80006a2:	f001 f9bd 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WEAPON_Pin;
 80006a6:	2310      	movs	r3, #16
 80006a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006aa:	4b25      	ldr	r3, [pc, #148]	; (8000740 <MX_GPIO_Init+0x15c>)
 80006ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ae:	2301      	movs	r3, #1
 80006b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(WEAPON_GPIO_Port, &GPIO_InitStruct);
 80006b2:	f107 0310 	add.w	r3, r7, #16
 80006b6:	4619      	mov	r1, r3
 80006b8:	481f      	ldr	r0, [pc, #124]	; (8000738 <MX_GPIO_Init+0x154>)
 80006ba:	f001 f9b1 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24L01_IRQ_Pin;
 80006be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NRF24L01_IRQ_GPIO_Port, &GPIO_InitStruct);
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	4619      	mov	r1, r3
 80006d2:	4819      	ldr	r0, [pc, #100]	; (8000738 <MX_GPIO_Init+0x154>)
 80006d4:	f001 f9a4 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = NRF24L01_CE_Pin|NRF24L01_CSN_Pin;
 80006d8:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80006dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006de:	2301      	movs	r3, #1
 80006e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	2302      	movs	r3, #2
 80006e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ea:	f107 0310 	add.w	r3, r7, #16
 80006ee:	4619      	mov	r1, r3
 80006f0:	4811      	ldr	r0, [pc, #68]	; (8000738 <MX_GPIO_Init+0x154>)
 80006f2:	f001 f995 	bl	8001a20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	2008      	movs	r0, #8
 80006fc:	f001 f959 	bl	80019b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000700:	2008      	movs	r0, #8
 8000702:	f001 f972 	bl	80019ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2009      	movs	r0, #9
 800070c:	f001 f951 	bl	80019b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000710:	2009      	movs	r0, #9
 8000712:	f001 f96a 	bl	80019ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	200a      	movs	r0, #10
 800071c:	f001 f949 	bl	80019b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000720:	200a      	movs	r0, #10
 8000722:	f001 f962 	bl	80019ea <HAL_NVIC_EnableIRQ>

}
 8000726:	bf00      	nop
 8000728:	3720      	adds	r7, #32
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000
 8000734:	40011000 	.word	0x40011000
 8000738:	40010800 	.word	0x40010800
 800073c:	10310000 	.word	0x10310000
 8000740:	10210000 	.word	0x10210000

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000748:	f000 fb28 	bl	8000d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074c:	f000 f844 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000750:	f7ff ff48 	bl	80005e4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000754:	f000 f936 	bl	80009c4 <MX_SPI1_Init>
  MX_TIM4_Init();
 8000758:	f000 fa86 	bl	8000c68 <MX_TIM4_Init>
  MX_ADC1_Init();
 800075c:	f7ff fe50 	bl	8000400 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000760:	f7ff fe8c 	bl	800047c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim4);
 8000764:	4815      	ldr	r0, [pc, #84]	; (80007bc <main+0x78>)
 8000766:	f002 fe69 	bl	800343c <HAL_TIM_Base_Start_IT>

  HAL_ADCEx_Calibration_Start(&hadc1);
 800076a:	4815      	ldr	r0, [pc, #84]	; (80007c0 <main+0x7c>)
 800076c:	f000 ff92 	bl	8001694 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2);
 8000770:	4814      	ldr	r0, [pc, #80]	; (80007c4 <main+0x80>)
 8000772:	f000 ff8f 	bl	8001694 <HAL_ADCEx_Calibration_Start>

  NRF24_init();
 8000776:	f7ff fda1 	bl	80002bc <NRF24_init>
  NRF24_TX_mode(tx_address, 120);
 800077a:	2178      	movs	r1, #120	; 0x78
 800077c:	4812      	ldr	r0, [pc, #72]	; (80007c8 <main+0x84>)
 800077e:	f7ff fdbf 	bl	8000300 <NRF24_TX_mode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (send_flag)
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <main+0x88>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	2b00      	cmp	r3, #0
 800078a:	d0fa      	beq.n	8000782 <main+0x3e>
    {
      send_flag = 0;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <main+0x88>)
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]

      HAL_ADC_Start_IT(&hadc1);
 8000792:	480b      	ldr	r0, [pc, #44]	; (80007c0 <main+0x7c>)
 8000794:	f000 fc60 	bl	8001058 <HAL_ADC_Start_IT>
      HAL_ADC_Start_IT(&hadc2);
 8000798:	480a      	ldr	r0, [pc, #40]	; (80007c4 <main+0x80>)
 800079a:	f000 fc5d 	bl	8001058 <HAL_ADC_Start_IT>
      payload_manipulation();
 800079e:	f000 f8c5 	bl	800092c <payload_manipulation>

      if (0 == NRF24_transmit(&payload))
 80007a2:	480b      	ldr	r0, [pc, #44]	; (80007d0 <main+0x8c>)
 80007a4:	f7ff fdfe 	bl	80003a4 <NRF24_transmit>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d1e9      	bne.n	8000782 <main+0x3e>
      {
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80007ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b2:	4808      	ldr	r0, [pc, #32]	; (80007d4 <main+0x90>)
 80007b4:	f001 fad0 	bl	8001d58 <HAL_GPIO_TogglePin>
    if (send_flag)
 80007b8:	e7e3      	b.n	8000782 <main+0x3e>
 80007ba:	bf00      	nop
 80007bc:	2000013c 	.word	0x2000013c
 80007c0:	2000007c 	.word	0x2000007c
 80007c4:	200000ac 	.word	0x200000ac
 80007c8:	08003e68 	.word	0x08003e68
 80007cc:	200000de 	.word	0x200000de
 80007d0:	20000000 	.word	0x20000000
 80007d4:	40011000 	.word	0x40011000

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b094      	sub	sp, #80	; 0x50
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007e2:	2228      	movs	r2, #40	; 0x28
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f003 faa6 	bl	8003d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000808:	2301      	movs	r3, #1
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800080c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000810:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000816:	2301      	movs	r3, #1
 8000818:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000822:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000824:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000828:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800082e:	4618      	mov	r0, r3
 8000830:	f001 fac4 	bl	8001dbc <HAL_RCC_OscConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800083a:	f000 f8bd 	bl	80009b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083e:	230f      	movs	r3, #15
 8000840:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000842:	2302      	movs	r3, #2
 8000844:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800084a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	2102      	movs	r1, #2
 800085a:	4618      	mov	r0, r3
 800085c:	f001 fd30 	bl	80022c0 <HAL_RCC_ClockConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000866:	f000 f8a7 	bl	80009b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800086a:	2302      	movs	r3, #2
 800086c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800086e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000872:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	4618      	mov	r0, r3
 8000878:	f001 fe9c 	bl	80025b4 <HAL_RCCEx_PeriphCLKConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000882:	f000 f899 	bl	80009b8 <Error_Handler>
  }
}
 8000886:	bf00      	nop
 8000888:	3750      	adds	r7, #80	; 0x50
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <HAL_TIM_PeriodElapsedCallback>:
  * @brief TIM period elapsed callbacks
  * @param htim: Specifies the timer cousing the interrupt
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  send_flag = !(send_flag);
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	bf0c      	ite	eq
 80008a2:	2301      	moveq	r3, #1
 80008a4:	2300      	movne	r3, #0
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80008ac:	701a      	strb	r2, [r3, #0]
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr
 80008b8:	200000de 	.word	0x200000de

080008bc <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == HAND_UP_Pin)
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	2b08      	cmp	r3, #8
 80008ca:	d109      	bne.n	80008e0 <HAL_GPIO_EXTI_Callback+0x24>
  {
    hand_up = !(hand_up);
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <HAL_GPIO_EXTI_Callback+0x64>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	bf0c      	ite	eq
 80008d4:	2301      	moveq	r3, #1
 80008d6:	2300      	movne	r3, #0
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	461a      	mov	r2, r3
 80008dc:	4b10      	ldr	r3, [pc, #64]	; (8000920 <HAL_GPIO_EXTI_Callback+0x64>)
 80008de:	701a      	strb	r2, [r3, #0]
  }
  if(GPIO_Pin == HAND_DOWN_Pin)
 80008e0:	88fb      	ldrh	r3, [r7, #6]
 80008e2:	2b04      	cmp	r3, #4
 80008e4:	d109      	bne.n	80008fa <HAL_GPIO_EXTI_Callback+0x3e>
  {
    hand_down = !(hand_down);
 80008e6:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <HAL_GPIO_EXTI_Callback+0x68>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	bf0c      	ite	eq
 80008ee:	2301      	moveq	r3, #1
 80008f0:	2300      	movne	r3, #0
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <HAL_GPIO_EXTI_Callback+0x68>)
 80008f8:	701a      	strb	r2, [r3, #0]
  }
  if(GPIO_Pin == WEAPON_Pin)
 80008fa:	88fb      	ldrh	r3, [r7, #6]
 80008fc:	2b10      	cmp	r3, #16
 80008fe:	d109      	bne.n	8000914 <HAL_GPIO_EXTI_Callback+0x58>
  {
    payload.weapon = !(payload.weapon);
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000902:	78db      	ldrb	r3, [r3, #3]
 8000904:	2b00      	cmp	r3, #0
 8000906:	bf0c      	ite	eq
 8000908:	2301      	moveq	r3, #1
 800090a:	2300      	movne	r3, #0
 800090c:	b2db      	uxtb	r3, r3
 800090e:	461a      	mov	r2, r3
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000912:	70da      	strb	r2, [r3, #3]
  }
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	200000dc 	.word	0x200000dc
 8000924:	200000dd 	.word	0x200000dd
 8000928:	20000000 	.word	0x20000000

0800092c <payload_manipulation>:

void payload_manipulation(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  if (hand_down)
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <payload_manipulation+0x38>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d006      	beq.n	8000946 <payload_manipulation+0x1a>
  {
    payload.hand_position -= step;
 8000938:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <payload_manipulation+0x3c>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2205      	movs	r2, #5
 800093e:	1a9b      	subs	r3, r3, r2
 8000940:	b2da      	uxtb	r2, r3
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <payload_manipulation+0x3c>)
 8000944:	701a      	strb	r2, [r3, #0]
  }
  if (hand_up)
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <payload_manipulation+0x40>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d006      	beq.n	800095c <payload_manipulation+0x30>
  {
    payload.hand_position += step;
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <payload_manipulation+0x3c>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2205      	movs	r2, #5
 8000954:	4413      	add	r3, r2
 8000956:	b2da      	uxtb	r2, r3
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <payload_manipulation+0x3c>)
 800095a:	701a      	strb	r2, [r3, #0]
  }
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	200000dd 	.word	0x200000dd
 8000968:	20000000 	.word	0x20000000
 800096c:	200000dc 	.word	0x200000dc

08000970 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  if (hadc == &hadc1)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4a0c      	ldr	r2, [pc, #48]	; (80009ac <HAL_ADC_ConvCpltCallback+0x3c>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d106      	bne.n	800098e <HAL_ADC_ConvCpltCallback+0x1e>
  {
    payload.left_speed = HAL_ADC_GetValue(hadc);
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f000 fc1f 	bl	80011c4 <HAL_ADC_GetValue>
 8000986:	4603      	mov	r3, r0
 8000988:	b2da      	uxtb	r2, r3
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_ADC_ConvCpltCallback+0x40>)
 800098c:	705a      	strb	r2, [r3, #1]
  }
  if (hadc == &hadc2)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <HAL_ADC_ConvCpltCallback+0x44>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d106      	bne.n	80009a4 <HAL_ADC_ConvCpltCallback+0x34>
  {
    payload.right_speed = HAL_ADC_GetValue(hadc);
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f000 fc14 	bl	80011c4 <HAL_ADC_GetValue>
 800099c:	4603      	mov	r3, r0
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <HAL_ADC_ConvCpltCallback+0x40>)
 80009a2:	709a      	strb	r2, [r3, #2]
  }
}
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	2000007c 	.word	0x2000007c
 80009b0:	20000000 	.word	0x20000000
 80009b4:	200000ac 	.word	0x200000ac

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <Error_Handler+0x8>
	...

080009c4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80009c8:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <MX_SPI1_Init+0x64>)
 80009ca:	4a18      	ldr	r2, [pc, #96]	; (8000a2c <MX_SPI1_Init+0x68>)
 80009cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <MX_SPI1_Init+0x64>)
 80009d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_SPI1_Init+0x64>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <MX_SPI1_Init+0x64>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_SPI1_Init+0x64>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_SPI1_Init+0x64>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_SPI1_Init+0x64>)
 80009f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_SPI1_Init+0x64>)
 80009f8:	2220      	movs	r2, #32
 80009fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009fc:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <MX_SPI1_Init+0x64>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_SPI1_Init+0x64>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a08:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <MX_SPI1_Init+0x64>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_SPI1_Init+0x64>)
 8000a10:	220a      	movs	r2, #10
 8000a12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a14:	4804      	ldr	r0, [pc, #16]	; (8000a28 <MX_SPI1_Init+0x64>)
 8000a16:	f001 ff39 	bl	800288c <HAL_SPI_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a20:	f7ff ffca 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200000e0 	.word	0x200000e0
 8000a2c:	40013000 	.word	0x40013000

08000a30 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a22      	ldr	r2, [pc, #136]	; (8000ad4 <HAL_SPI_MspInit+0xa4>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d13d      	bne.n	8000acc <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a50:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <HAL_SPI_MspInit+0xa8>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	4a20      	ldr	r2, [pc, #128]	; (8000ad8 <HAL_SPI_MspInit+0xa8>)
 8000a56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a5a:	6193      	str	r3, [r2, #24]
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <HAL_SPI_MspInit+0xa8>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a68:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <HAL_SPI_MspInit+0xa8>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	4a1a      	ldr	r2, [pc, #104]	; (8000ad8 <HAL_SPI_MspInit+0xa8>)
 8000a6e:	f043 0308 	orr.w	r3, r3, #8
 8000a72:	6193      	str	r3, [r2, #24]
 8000a74:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <HAL_SPI_MspInit+0xa8>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	f003 0308 	and.w	r3, r3, #8
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000a80:	2328      	movs	r3, #40	; 0x28
 8000a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	4812      	ldr	r0, [pc, #72]	; (8000adc <HAL_SPI_MspInit+0xac>)
 8000a94:	f000 ffc4 	bl	8001a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a98:	2310      	movs	r3, #16
 8000a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480c      	ldr	r0, [pc, #48]	; (8000adc <HAL_SPI_MspInit+0xac>)
 8000aac:	f000 ffb8 	bl	8001a20 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <HAL_SPI_MspInit+0xb0>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
 8000abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ac6:	4a06      	ldr	r2, [pc, #24]	; (8000ae0 <HAL_SPI_MspInit+0xb0>)
 8000ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aca:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000acc:	bf00      	nop
 8000ace:	3728      	adds	r7, #40	; 0x28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40013000 	.word	0x40013000
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40010c00 	.word	0x40010c00
 8000ae0:	40010000 	.word	0x40010000

08000ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <HAL_MspInit+0x5c>)
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	4a14      	ldr	r2, [pc, #80]	; (8000b40 <HAL_MspInit+0x5c>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6193      	str	r3, [r2, #24]
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_MspInit+0x5c>)
 8000af8:	699b      	ldr	r3, [r3, #24]
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <HAL_MspInit+0x5c>)
 8000b04:	69db      	ldr	r3, [r3, #28]
 8000b06:	4a0e      	ldr	r2, [pc, #56]	; (8000b40 <HAL_MspInit+0x5c>)
 8000b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b0c:	61d3      	str	r3, [r2, #28]
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <HAL_MspInit+0x5c>)
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <HAL_MspInit+0x60>)
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <HAL_MspInit+0x60>)
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b36:	bf00      	nop
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40010000 	.word	0x40010000

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b4c:	e7fe      	b.n	8000b4c <NMI_Handler+0x4>

08000b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <HardFault_Handler+0x4>

08000b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <MemManage_Handler+0x4>

08000b5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <BusFault_Handler+0x4>

08000b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <UsageFault_Handler+0x4>

08000b66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr

08000b72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr

08000b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr

08000b8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8e:	f000 f94b 	bl	8000e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HAND_DOWN_Pin);
 8000b9a:	2004      	movs	r0, #4
 8000b9c:	f001 f8f6 	bl	8001d8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HAND_UP_Pin);
 8000ba8:	2008      	movs	r0, #8
 8000baa:	f001 f8ef 	bl	8001d8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WEAPON_Pin);
 8000bb6:	2010      	movs	r0, #16
 8000bb8:	f001 f8e8 	bl	8001d8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000bc4:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <ADC1_2_IRQHandler+0x14>)
 8000bc6:	f000 fb09 	bl	80011dc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000bca:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <ADC1_2_IRQHandler+0x18>)
 8000bcc:	f000 fb06 	bl	80011dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	2000007c 	.word	0x2000007c
 8000bd8:	200000ac 	.word	0x200000ac

08000bdc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <TIM4_IRQHandler+0x10>)
 8000be2:	f002 fc7d 	bl	80034e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	2000013c 	.word	0x2000013c

08000bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf8:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <_sbrk+0x5c>)
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <_sbrk+0x60>)
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d102      	bne.n	8000c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <_sbrk+0x64>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <_sbrk+0x68>)
 8000c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d207      	bcs.n	8000c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c20:	f003 f8a2 	bl	8003d68 <__errno>
 8000c24:	4603      	mov	r3, r0
 8000c26:	220c      	movs	r2, #12
 8000c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c2e:	e009      	b.n	8000c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <_sbrk+0x64>)
 8000c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c42:	68fb      	ldr	r3, [r7, #12]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20005000 	.word	0x20005000
 8000c50:	00000400 	.word	0x00000400
 8000c54:	20000138 	.word	0x20000138
 8000c58:	200002d0 	.word	0x200002d0

08000c5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6e:	f107 0308 	add.w	r3, r7, #8
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c84:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <MX_TIM4_Init+0x94>)
 8000c86:	4a1e      	ldr	r2, [pc, #120]	; (8000d00 <MX_TIM4_Init+0x98>)
 8000c88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000;
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <MX_TIM4_Init+0x94>)
 8000c8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c90:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c92:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <MX_TIM4_Init+0x94>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 36000;
 8000c98:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <MX_TIM4_Init+0x94>)
 8000c9a:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8000c9e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca0:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <MX_TIM4_Init+0x94>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <MX_TIM4_Init+0x94>)
 8000ca8:	2280      	movs	r2, #128	; 0x80
 8000caa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cac:	4813      	ldr	r0, [pc, #76]	; (8000cfc <MX_TIM4_Init+0x94>)
 8000cae:	f002 fb75 	bl	800339c <HAL_TIM_Base_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000cb8:	f7ff fe7e 	bl	80009b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cc2:	f107 0308 	add.w	r3, r7, #8
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	480c      	ldr	r0, [pc, #48]	; (8000cfc <MX_TIM4_Init+0x94>)
 8000cca:	f002 fd11 	bl	80036f0 <HAL_TIM_ConfigClockSource>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000cd4:	f7ff fe70 	bl	80009b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <MX_TIM4_Init+0x94>)
 8000ce6:	f002 fee7 	bl	8003ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000cf0:	f7ff fe62 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	2000013c 	.word	0x2000013c
 8000d00:	40000800 	.word	0x40000800

08000d04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <HAL_TIM_Base_MspInit+0x44>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d113      	bne.n	8000d3e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d16:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <HAL_TIM_Base_MspInit+0x48>)
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	4a0c      	ldr	r2, [pc, #48]	; (8000d4c <HAL_TIM_Base_MspInit+0x48>)
 8000d1c:	f043 0304 	orr.w	r3, r3, #4
 8000d20:	61d3      	str	r3, [r2, #28]
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_TIM_Base_MspInit+0x48>)
 8000d24:	69db      	ldr	r3, [r3, #28]
 8000d26:	f003 0304 	and.w	r3, r3, #4
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	201e      	movs	r0, #30
 8000d34:	f000 fe3d 	bl	80019b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d38:	201e      	movs	r0, #30
 8000d3a:	f000 fe56 	bl	80019ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40000800 	.word	0x40000800
 8000d4c:	40021000 	.word	0x40021000

08000d50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d50:	f7ff ff84 	bl	8000c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d54:	480b      	ldr	r0, [pc, #44]	; (8000d84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d56:	490c      	ldr	r1, [pc, #48]	; (8000d88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d58:	4a0c      	ldr	r2, [pc, #48]	; (8000d8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d5c:	e002      	b.n	8000d64 <LoopCopyDataInit>

08000d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d62:	3304      	adds	r3, #4

08000d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d68:	d3f9      	bcc.n	8000d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6a:	4a09      	ldr	r2, [pc, #36]	; (8000d90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d6c:	4c09      	ldr	r4, [pc, #36]	; (8000d94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d70:	e001      	b.n	8000d76 <LoopFillZerobss>

08000d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d74:	3204      	adds	r2, #4

08000d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d78:	d3fb      	bcc.n	8000d72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d7a:	f002 fffb 	bl	8003d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d7e:	f7ff fce1 	bl	8000744 <main>
  bx lr
 8000d82:	4770      	bx	lr
  ldr r0, =_sdata
 8000d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d88:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d8c:	08003eb8 	.word	0x08003eb8
  ldr r2, =_sbss
 8000d90:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d94:	200002d0 	.word	0x200002d0

08000d98 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <CAN1_RX1_IRQHandler>
	...

08000d9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <HAL_Init+0x28>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <HAL_Init+0x28>)
 8000da6:	f043 0310 	orr.w	r3, r3, #16
 8000daa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dac:	2003      	movs	r0, #3
 8000dae:	f000 fdf5 	bl	800199c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db2:	200f      	movs	r0, #15
 8000db4:	f000 f808 	bl	8000dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db8:	f7ff fe94 	bl	8000ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40022000 	.word	0x40022000

08000dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_InitTick+0x54>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <HAL_InitTick+0x58>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 fe0d 	bl	8001a06 <HAL_SYSTICK_Config>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00e      	b.n	8000e14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	d80a      	bhi.n	8000e12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e04:	f000 fdd5 	bl	80019b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e08:	4a06      	ldr	r2, [pc, #24]	; (8000e24 <HAL_InitTick+0x5c>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e000      	b.n	8000e14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000004 	.word	0x20000004
 8000e20:	2000000c 	.word	0x2000000c
 8000e24:	20000008 	.word	0x20000008

08000e28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <HAL_IncTick+0x1c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <HAL_IncTick+0x20>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a03      	ldr	r2, [pc, #12]	; (8000e48 <HAL_IncTick+0x20>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	2000000c 	.word	0x2000000c
 8000e48:	20000184 	.word	0x20000184

08000e4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e50:	4b02      	ldr	r3, [pc, #8]	; (8000e5c <HAL_GetTick+0x10>)
 8000e52:	681b      	ldr	r3, [r3, #0]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	20000184 	.word	0x20000184

08000e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff fff0 	bl	8000e4c <HAL_GetTick>
 8000e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e78:	d005      	beq.n	8000e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_Delay+0x44>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4413      	add	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e86:	bf00      	nop
 8000e88:	f7ff ffe0 	bl	8000e4c <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d8f7      	bhi.n	8000e88 <HAL_Delay+0x28>
  {
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	2000000c 	.word	0x2000000c

08000ea8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e0be      	b.n	8001048 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d109      	bne.n	8000eec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff fb06 	bl	80004f8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f000 fb8f 	bl	8001610 <ADC_ConversionStop_Disable>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efa:	f003 0310 	and.w	r3, r3, #16
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f040 8099 	bne.w	8001036 <HAL_ADC_Init+0x18e>
 8000f04:	7dfb      	ldrb	r3, [r7, #23]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f040 8095 	bne.w	8001036 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f10:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f14:	f023 0302 	bic.w	r3, r3, #2
 8000f18:	f043 0202 	orr.w	r2, r3, #2
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f28:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	7b1b      	ldrb	r3, [r3, #12]
 8000f2e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f30:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f40:	d003      	beq.n	8000f4a <HAL_ADC_Init+0xa2>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d102      	bne.n	8000f50 <HAL_ADC_Init+0xa8>
 8000f4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f4e:	e000      	b.n	8000f52 <HAL_ADC_Init+0xaa>
 8000f50:	2300      	movs	r3, #0
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	7d1b      	ldrb	r3, [r3, #20]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d119      	bne.n	8000f94 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	7b1b      	ldrb	r3, [r3, #12]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d109      	bne.n	8000f7c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	035a      	lsls	r2, r3, #13
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	e00b      	b.n	8000f94 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f80:	f043 0220 	orr.w	r2, r3, #32
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	f043 0201 	orr.w	r2, r3, #1
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	4b28      	ldr	r3, [pc, #160]	; (8001050 <HAL_ADC_Init+0x1a8>)
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	6812      	ldr	r2, [r2, #0]
 8000fb6:	68b9      	ldr	r1, [r7, #8]
 8000fb8:	430b      	orrs	r3, r1
 8000fba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fc4:	d003      	beq.n	8000fce <HAL_ADC_Init+0x126>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d104      	bne.n	8000fd8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	691b      	ldr	r3, [r3, #16]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	051b      	lsls	r3, r3, #20
 8000fd6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fde:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	689a      	ldr	r2, [r3, #8]
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <HAL_ADC_Init+0x1ac>)
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d10b      	bne.n	8001014 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001006:	f023 0303 	bic.w	r3, r3, #3
 800100a:	f043 0201 	orr.w	r2, r3, #1
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001012:	e018      	b.n	8001046 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001018:	f023 0312 	bic.w	r3, r3, #18
 800101c:	f043 0210 	orr.w	r2, r3, #16
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001028:	f043 0201 	orr.w	r2, r3, #1
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001034:	e007      	b.n	8001046 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103a:	f043 0210 	orr.w	r2, r3, #16
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001046:	7dfb      	ldrb	r3, [r7, #23]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	ffe1f7fd 	.word	0xffe1f7fd
 8001054:	ff1f0efe 	.word	0xff1f0efe

08001058 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800106a:	2b01      	cmp	r3, #1
 800106c:	d101      	bne.n	8001072 <HAL_ADC_Start_IT+0x1a>
 800106e:	2302      	movs	r3, #2
 8001070:	e0a0      	b.n	80011b4 <HAL_ADC_Start_IT+0x15c>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2201      	movs	r2, #1
 8001076:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 fa6e 	bl	800155c <ADC_Enable>
 8001080:	4603      	mov	r3, r0
 8001082:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	2b00      	cmp	r3, #0
 8001088:	f040 808f 	bne.w	80011aa <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001090:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001094:	f023 0301 	bic.w	r3, r3, #1
 8001098:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a45      	ldr	r2, [pc, #276]	; (80011bc <HAL_ADC_Start_IT+0x164>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d105      	bne.n	80010b6 <HAL_ADC_Start_IT+0x5e>
 80010aa:	4b45      	ldr	r3, [pc, #276]	; (80011c0 <HAL_ADC_Start_IT+0x168>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d115      	bne.n	80010e2 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d026      	beq.n	800111e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010e0:	e01d      	b.n	800111e <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a33      	ldr	r2, [pc, #204]	; (80011c0 <HAL_ADC_Start_IT+0x168>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d004      	beq.n	8001102 <HAL_ADC_Start_IT+0xaa>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a2f      	ldr	r2, [pc, #188]	; (80011bc <HAL_ADC_Start_IT+0x164>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d10d      	bne.n	800111e <HAL_ADC_Start_IT+0xc6>
 8001102:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <HAL_ADC_Start_IT+0x168>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800110a:	2b00      	cmp	r3, #0
 800110c:	d007      	beq.n	800111e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001112:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001116:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001122:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d006      	beq.n	8001138 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112e:	f023 0206 	bic.w	r2, r3, #6
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	62da      	str	r2, [r3, #44]	; 0x2c
 8001136:	e002      	b.n	800113e <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f06f 0202 	mvn.w	r2, #2
 800114e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 0220 	orr.w	r2, r2, #32
 800115e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800116a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800116e:	d113      	bne.n	8001198 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001174:	4a11      	ldr	r2, [pc, #68]	; (80011bc <HAL_ADC_Start_IT+0x164>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d105      	bne.n	8001186 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <HAL_ADC_Start_IT+0x168>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001182:	2b00      	cmp	r3, #0
 8001184:	d108      	bne.n	8001198 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	e00c      	b.n	80011b2 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	e003      	b.n	80011b2 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40012800 	.word	0x40012800
 80011c0:	40012400 	.word	0x40012400

080011c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	f003 0320 	and.w	r3, r3, #32
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d03e      	beq.n	800127c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d039      	beq.n	800127c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120c:	f003 0310 	and.w	r3, r3, #16
 8001210:	2b00      	cmp	r3, #0
 8001212:	d105      	bne.n	8001220 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001218:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800122a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800122e:	d11d      	bne.n	800126c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001234:	2b00      	cmp	r3, #0
 8001236:	d119      	bne.n	800126c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0220 	bic.w	r2, r2, #32
 8001246:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d105      	bne.n	800126c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001264:	f043 0201 	orr.w	r2, r3, #1
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff fb7f 	bl	8000970 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f06f 0212 	mvn.w	r2, #18
 800127a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001282:	2b00      	cmp	r3, #0
 8001284:	d04d      	beq.n	8001322 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	2b00      	cmp	r3, #0
 800128e:	d048      	beq.n	8001322 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001294:	f003 0310 	and.w	r3, r3, #16
 8001298:	2b00      	cmp	r3, #0
 800129a:	d105      	bne.n	80012a8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80012b2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80012b6:	d012      	beq.n	80012de <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d125      	bne.n	8001312 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80012d0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80012d4:	d11d      	bne.n	8001312 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d119      	bne.n	8001312 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012ec:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001302:	2b00      	cmp	r3, #0
 8001304:	d105      	bne.n	8001312 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130a:	f043 0201 	orr.w	r2, r3, #1
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 fa6c 	bl	80017f0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f06f 020c 	mvn.w	r2, #12
 8001320:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001328:	2b00      	cmp	r3, #0
 800132a:	d012      	beq.n	8001352 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00d      	beq.n	8001352 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 f809 	bl	800135a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f06f 0201 	mvn.w	r2, #1
 8001350:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001376:	2300      	movs	r3, #0
 8001378:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001384:	2b01      	cmp	r3, #1
 8001386:	d101      	bne.n	800138c <HAL_ADC_ConfigChannel+0x20>
 8001388:	2302      	movs	r3, #2
 800138a:	e0dc      	b.n	8001546 <HAL_ADC_ConfigChannel+0x1da>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b06      	cmp	r3, #6
 800139a:	d81c      	bhi.n	80013d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	3b05      	subs	r3, #5
 80013ae:	221f      	movs	r2, #31
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	4019      	ands	r1, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	6818      	ldr	r0, [r3, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	4613      	mov	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	3b05      	subs	r3, #5
 80013c8:	fa00 f203 	lsl.w	r2, r0, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	430a      	orrs	r2, r1
 80013d2:	635a      	str	r2, [r3, #52]	; 0x34
 80013d4:	e03c      	b.n	8001450 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b0c      	cmp	r3, #12
 80013dc:	d81c      	bhi.n	8001418 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	3b23      	subs	r3, #35	; 0x23
 80013f0:	221f      	movs	r2, #31
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	4019      	ands	r1, r3
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	6818      	ldr	r0, [r3, #0]
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	3b23      	subs	r3, #35	; 0x23
 800140a:	fa00 f203 	lsl.w	r2, r0, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	631a      	str	r2, [r3, #48]	; 0x30
 8001416:	e01b      	b.n	8001450 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	3b41      	subs	r3, #65	; 0x41
 800142a:	221f      	movs	r2, #31
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	4019      	ands	r1, r3
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	6818      	ldr	r0, [r3, #0]
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	4613      	mov	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	3b41      	subs	r3, #65	; 0x41
 8001444:	fa00 f203 	lsl.w	r2, r0, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b09      	cmp	r3, #9
 8001456:	d91c      	bls.n	8001492 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68d9      	ldr	r1, [r3, #12]
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4613      	mov	r3, r2
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	4413      	add	r3, r2
 8001468:	3b1e      	subs	r3, #30
 800146a:	2207      	movs	r2, #7
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	4019      	ands	r1, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	6898      	ldr	r0, [r3, #8]
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4613      	mov	r3, r2
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4413      	add	r3, r2
 8001482:	3b1e      	subs	r3, #30
 8001484:	fa00 f203 	lsl.w	r2, r0, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	430a      	orrs	r2, r1
 800148e:	60da      	str	r2, [r3, #12]
 8001490:	e019      	b.n	80014c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6919      	ldr	r1, [r3, #16]
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4613      	mov	r3, r2
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	4413      	add	r3, r2
 80014a2:	2207      	movs	r2, #7
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	4019      	ands	r1, r3
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	6898      	ldr	r0, [r3, #8]
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4613      	mov	r3, r2
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	4413      	add	r3, r2
 80014ba:	fa00 f203 	lsl.w	r2, r0, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b10      	cmp	r3, #16
 80014cc:	d003      	beq.n	80014d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014d2:	2b11      	cmp	r3, #17
 80014d4:	d132      	bne.n	800153c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a1d      	ldr	r2, [pc, #116]	; (8001550 <HAL_ADC_ConfigChannel+0x1e4>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d125      	bne.n	800152c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d126      	bne.n	800153c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80014fc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b10      	cmp	r3, #16
 8001504:	d11a      	bne.n	800153c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001506:	4b13      	ldr	r3, [pc, #76]	; (8001554 <HAL_ADC_ConfigChannel+0x1e8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a13      	ldr	r2, [pc, #76]	; (8001558 <HAL_ADC_ConfigChannel+0x1ec>)
 800150c:	fba2 2303 	umull	r2, r3, r2, r3
 8001510:	0c9a      	lsrs	r2, r3, #18
 8001512:	4613      	mov	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800151c:	e002      	b.n	8001524 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	3b01      	subs	r3, #1
 8001522:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f9      	bne.n	800151e <HAL_ADC_ConfigChannel+0x1b2>
 800152a:	e007      	b.n	800153c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001530:	f043 0220 	orr.w	r2, r3, #32
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001544:	7bfb      	ldrb	r3, [r7, #15]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	40012400 	.word	0x40012400
 8001554:	20000004 	.word	0x20000004
 8001558:	431bde83 	.word	0x431bde83

0800155c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001568:	2300      	movs	r3, #0
 800156a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b01      	cmp	r3, #1
 8001578:	d040      	beq.n	80015fc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f042 0201 	orr.w	r2, r2, #1
 8001588:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800158a:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <ADC_Enable+0xac>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a1f      	ldr	r2, [pc, #124]	; (800160c <ADC_Enable+0xb0>)
 8001590:	fba2 2303 	umull	r2, r3, r2, r3
 8001594:	0c9b      	lsrs	r3, r3, #18
 8001596:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001598:	e002      	b.n	80015a0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	3b01      	subs	r3, #1
 800159e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f9      	bne.n	800159a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015a6:	f7ff fc51 	bl	8000e4c <HAL_GetTick>
 80015aa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015ac:	e01f      	b.n	80015ee <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015ae:	f7ff fc4d 	bl	8000e4c <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d918      	bls.n	80015ee <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d011      	beq.n	80015ee <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ce:	f043 0210 	orr.w	r2, r3, #16
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015da:	f043 0201 	orr.w	r2, r3, #1
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e007      	b.n	80015fe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d1d8      	bne.n	80015ae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000004 	.word	0x20000004
 800160c:	431bde83 	.word	0x431bde83

08001610 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b01      	cmp	r3, #1
 8001628:	d12e      	bne.n	8001688 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0201 	bic.w	r2, r2, #1
 8001638:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800163a:	f7ff fc07 	bl	8000e4c <HAL_GetTick>
 800163e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001640:	e01b      	b.n	800167a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001642:	f7ff fc03 	bl	8000e4c <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d914      	bls.n	800167a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b01      	cmp	r3, #1
 800165c:	d10d      	bne.n	800167a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001662:	f043 0210 	orr.w	r2, r3, #16
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166e:	f043 0201 	orr.w	r2, r3, #1
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e007      	b.n	800168a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	2b01      	cmp	r3, #1
 8001686:	d0dc      	beq.n	8001642 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b087      	sub	sp, #28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800169c:	2300      	movs	r3, #0
 800169e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d101      	bne.n	80016b2 <HAL_ADCEx_Calibration_Start+0x1e>
 80016ae:	2302      	movs	r3, #2
 80016b0:	e097      	b.n	80017e2 <HAL_ADCEx_Calibration_Start+0x14e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ffa8 	bl	8001610 <ADC_ConversionStop_Disable>
 80016c0:	4603      	mov	r3, r0
 80016c2:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ff49 	bl	800155c <ADC_Enable>
 80016ca:	4603      	mov	r3, r0
 80016cc:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80016ce:	7dfb      	ldrb	r3, [r7, #23]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f040 8081 	bne.w	80017d8 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016de:	f023 0302 	bic.w	r3, r3, #2
 80016e2:	f043 0202 	orr.w	r2, r3, #2
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80016ea:	4b40      	ldr	r3, [pc, #256]	; (80017ec <HAL_ADCEx_Calibration_Start+0x158>)
 80016ec:	681c      	ldr	r4, [r3, #0]
 80016ee:	2002      	movs	r0, #2
 80016f0:	f001 f816 	bl	8002720 <HAL_RCCEx_GetPeriphCLKFreq>
 80016f4:	4603      	mov	r3, r0
 80016f6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80016fa:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80016fc:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80016fe:	e002      	b.n	8001706 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	3b01      	subs	r3, #1
 8001704:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1f9      	bne.n	8001700 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	689a      	ldr	r2, [r3, #8]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f042 0208 	orr.w	r2, r2, #8
 800171a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800171c:	f7ff fb96 	bl	8000e4c <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001722:	e01b      	b.n	800175c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001724:	f7ff fb92 	bl	8000e4c <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b0a      	cmp	r3, #10
 8001730:	d914      	bls.n	800175c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 0308 	and.w	r3, r3, #8
 800173c:	2b00      	cmp	r3, #0
 800173e:	d00d      	beq.n	800175c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001744:	f023 0312 	bic.w	r3, r3, #18
 8001748:	f043 0210 	orr.w	r2, r3, #16
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e042      	b.n	80017e2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1dc      	bne.n	8001724 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 0204 	orr.w	r2, r2, #4
 8001778:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800177a:	f7ff fb67 	bl	8000e4c <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001780:	e01b      	b.n	80017ba <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001782:	f7ff fb63 	bl	8000e4c <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b0a      	cmp	r3, #10
 800178e:	d914      	bls.n	80017ba <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00d      	beq.n	80017ba <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a2:	f023 0312 	bic.w	r3, r3, #18
 80017a6:	f043 0210 	orr.w	r2, r3, #16
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e013      	b.n	80017e2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1dc      	bne.n	8001782 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017cc:	f023 0303 	bic.w	r3, r3, #3
 80017d0:	f043 0201 	orr.w	r2, r3, #1
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80017e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	371c      	adds	r7, #28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd90      	pop	{r4, r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000004 	.word	0x20000004

080017f0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
	...

08001804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001820:	4013      	ands	r3, r2
 8001822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800182c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001836:	4a04      	ldr	r2, [pc, #16]	; (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	60d3      	str	r3, [r2, #12]
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <__NVIC_GetPriorityGrouping+0x18>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	f003 0307 	and.w	r3, r3, #7
}
 800185a:	4618      	mov	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	2b00      	cmp	r3, #0
 8001878:	db0b      	blt.n	8001892 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	f003 021f 	and.w	r2, r3, #31
 8001880:	4906      	ldr	r1, [pc, #24]	; (800189c <__NVIC_EnableIRQ+0x34>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	095b      	lsrs	r3, r3, #5
 8001888:	2001      	movs	r0, #1
 800188a:	fa00 f202 	lsl.w	r2, r0, r2
 800188e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	e000e100 	.word	0xe000e100

080018a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	6039      	str	r1, [r7, #0]
 80018aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	db0a      	blt.n	80018ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	490c      	ldr	r1, [pc, #48]	; (80018ec <__NVIC_SetPriority+0x4c>)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	0112      	lsls	r2, r2, #4
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	440b      	add	r3, r1
 80018c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c8:	e00a      	b.n	80018e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4908      	ldr	r1, [pc, #32]	; (80018f0 <__NVIC_SetPriority+0x50>)
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	3b04      	subs	r3, #4
 80018d8:	0112      	lsls	r2, r2, #4
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	440b      	add	r3, r1
 80018de:	761a      	strb	r2, [r3, #24]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000e100 	.word	0xe000e100
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b089      	sub	sp, #36	; 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f1c3 0307 	rsb	r3, r3, #7
 800190e:	2b04      	cmp	r3, #4
 8001910:	bf28      	it	cs
 8001912:	2304      	movcs	r3, #4
 8001914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3304      	adds	r3, #4
 800191a:	2b06      	cmp	r3, #6
 800191c:	d902      	bls.n	8001924 <NVIC_EncodePriority+0x30>
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3b03      	subs	r3, #3
 8001922:	e000      	b.n	8001926 <NVIC_EncodePriority+0x32>
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43da      	mvns	r2, r3
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	401a      	ands	r2, r3
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800193c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	fa01 f303 	lsl.w	r3, r1, r3
 8001946:	43d9      	mvns	r1, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	4313      	orrs	r3, r2
         );
}
 800194e:	4618      	mov	r0, r3
 8001950:	3724      	adds	r7, #36	; 0x24
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001968:	d301      	bcc.n	800196e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196a:	2301      	movs	r3, #1
 800196c:	e00f      	b.n	800198e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196e:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <SysTick_Config+0x40>)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001976:	210f      	movs	r1, #15
 8001978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800197c:	f7ff ff90 	bl	80018a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <SysTick_Config+0x40>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001986:	4b04      	ldr	r3, [pc, #16]	; (8001998 <SysTick_Config+0x40>)
 8001988:	2207      	movs	r2, #7
 800198a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	e000e010 	.word	0xe000e010

0800199c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff ff2d 	bl	8001804 <__NVIC_SetPriorityGrouping>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c4:	f7ff ff42 	bl	800184c <__NVIC_GetPriorityGrouping>
 80019c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	6978      	ldr	r0, [r7, #20]
 80019d0:	f7ff ff90 	bl	80018f4 <NVIC_EncodePriority>
 80019d4:	4602      	mov	r2, r0
 80019d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019da:	4611      	mov	r1, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff5f 	bl	80018a0 <__NVIC_SetPriority>
}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff35 	bl	8001868 <__NVIC_EnableIRQ>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ffa2 	bl	8001958 <SysTick_Config>
 8001a14:	4603      	mov	r3, r0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b08b      	sub	sp, #44	; 0x2c
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a32:	e169      	b.n	8001d08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a34:	2201      	movs	r2, #1
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	69fa      	ldr	r2, [r7, #28]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	f040 8158 	bne.w	8001d02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	4a9a      	ldr	r2, [pc, #616]	; (8001cc0 <HAL_GPIO_Init+0x2a0>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d05e      	beq.n	8001b1a <HAL_GPIO_Init+0xfa>
 8001a5c:	4a98      	ldr	r2, [pc, #608]	; (8001cc0 <HAL_GPIO_Init+0x2a0>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d875      	bhi.n	8001b4e <HAL_GPIO_Init+0x12e>
 8001a62:	4a98      	ldr	r2, [pc, #608]	; (8001cc4 <HAL_GPIO_Init+0x2a4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d058      	beq.n	8001b1a <HAL_GPIO_Init+0xfa>
 8001a68:	4a96      	ldr	r2, [pc, #600]	; (8001cc4 <HAL_GPIO_Init+0x2a4>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d86f      	bhi.n	8001b4e <HAL_GPIO_Init+0x12e>
 8001a6e:	4a96      	ldr	r2, [pc, #600]	; (8001cc8 <HAL_GPIO_Init+0x2a8>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d052      	beq.n	8001b1a <HAL_GPIO_Init+0xfa>
 8001a74:	4a94      	ldr	r2, [pc, #592]	; (8001cc8 <HAL_GPIO_Init+0x2a8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d869      	bhi.n	8001b4e <HAL_GPIO_Init+0x12e>
 8001a7a:	4a94      	ldr	r2, [pc, #592]	; (8001ccc <HAL_GPIO_Init+0x2ac>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d04c      	beq.n	8001b1a <HAL_GPIO_Init+0xfa>
 8001a80:	4a92      	ldr	r2, [pc, #584]	; (8001ccc <HAL_GPIO_Init+0x2ac>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d863      	bhi.n	8001b4e <HAL_GPIO_Init+0x12e>
 8001a86:	4a92      	ldr	r2, [pc, #584]	; (8001cd0 <HAL_GPIO_Init+0x2b0>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d046      	beq.n	8001b1a <HAL_GPIO_Init+0xfa>
 8001a8c:	4a90      	ldr	r2, [pc, #576]	; (8001cd0 <HAL_GPIO_Init+0x2b0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d85d      	bhi.n	8001b4e <HAL_GPIO_Init+0x12e>
 8001a92:	2b12      	cmp	r3, #18
 8001a94:	d82a      	bhi.n	8001aec <HAL_GPIO_Init+0xcc>
 8001a96:	2b12      	cmp	r3, #18
 8001a98:	d859      	bhi.n	8001b4e <HAL_GPIO_Init+0x12e>
 8001a9a:	a201      	add	r2, pc, #4	; (adr r2, 8001aa0 <HAL_GPIO_Init+0x80>)
 8001a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa0:	08001b1b 	.word	0x08001b1b
 8001aa4:	08001af5 	.word	0x08001af5
 8001aa8:	08001b07 	.word	0x08001b07
 8001aac:	08001b49 	.word	0x08001b49
 8001ab0:	08001b4f 	.word	0x08001b4f
 8001ab4:	08001b4f 	.word	0x08001b4f
 8001ab8:	08001b4f 	.word	0x08001b4f
 8001abc:	08001b4f 	.word	0x08001b4f
 8001ac0:	08001b4f 	.word	0x08001b4f
 8001ac4:	08001b4f 	.word	0x08001b4f
 8001ac8:	08001b4f 	.word	0x08001b4f
 8001acc:	08001b4f 	.word	0x08001b4f
 8001ad0:	08001b4f 	.word	0x08001b4f
 8001ad4:	08001b4f 	.word	0x08001b4f
 8001ad8:	08001b4f 	.word	0x08001b4f
 8001adc:	08001b4f 	.word	0x08001b4f
 8001ae0:	08001b4f 	.word	0x08001b4f
 8001ae4:	08001afd 	.word	0x08001afd
 8001ae8:	08001b11 	.word	0x08001b11
 8001aec:	4a79      	ldr	r2, [pc, #484]	; (8001cd4 <HAL_GPIO_Init+0x2b4>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d013      	beq.n	8001b1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001af2:	e02c      	b.n	8001b4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	623b      	str	r3, [r7, #32]
          break;
 8001afa:	e029      	b.n	8001b50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	3304      	adds	r3, #4
 8001b02:	623b      	str	r3, [r7, #32]
          break;
 8001b04:	e024      	b.n	8001b50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	3308      	adds	r3, #8
 8001b0c:	623b      	str	r3, [r7, #32]
          break;
 8001b0e:	e01f      	b.n	8001b50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	330c      	adds	r3, #12
 8001b16:	623b      	str	r3, [r7, #32]
          break;
 8001b18:	e01a      	b.n	8001b50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d102      	bne.n	8001b28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b22:	2304      	movs	r3, #4
 8001b24:	623b      	str	r3, [r7, #32]
          break;
 8001b26:	e013      	b.n	8001b50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d105      	bne.n	8001b3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b30:	2308      	movs	r3, #8
 8001b32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69fa      	ldr	r2, [r7, #28]
 8001b38:	611a      	str	r2, [r3, #16]
          break;
 8001b3a:	e009      	b.n	8001b50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b3c:	2308      	movs	r3, #8
 8001b3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	69fa      	ldr	r2, [r7, #28]
 8001b44:	615a      	str	r2, [r3, #20]
          break;
 8001b46:	e003      	b.n	8001b50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	623b      	str	r3, [r7, #32]
          break;
 8001b4c:	e000      	b.n	8001b50 <HAL_GPIO_Init+0x130>
          break;
 8001b4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	2bff      	cmp	r3, #255	; 0xff
 8001b54:	d801      	bhi.n	8001b5a <HAL_GPIO_Init+0x13a>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	e001      	b.n	8001b5e <HAL_GPIO_Init+0x13e>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	2bff      	cmp	r3, #255	; 0xff
 8001b64:	d802      	bhi.n	8001b6c <HAL_GPIO_Init+0x14c>
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	e002      	b.n	8001b72 <HAL_GPIO_Init+0x152>
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	3b08      	subs	r3, #8
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	210f      	movs	r1, #15
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	401a      	ands	r2, r3
 8001b84:	6a39      	ldr	r1, [r7, #32]
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 80b1 	beq.w	8001d02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ba0:	4b4d      	ldr	r3, [pc, #308]	; (8001cd8 <HAL_GPIO_Init+0x2b8>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	4a4c      	ldr	r2, [pc, #304]	; (8001cd8 <HAL_GPIO_Init+0x2b8>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6193      	str	r3, [r2, #24]
 8001bac:	4b4a      	ldr	r3, [pc, #296]	; (8001cd8 <HAL_GPIO_Init+0x2b8>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bb8:	4a48      	ldr	r2, [pc, #288]	; (8001cdc <HAL_GPIO_Init+0x2bc>)
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	089b      	lsrs	r3, r3, #2
 8001bbe:	3302      	adds	r3, #2
 8001bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	220f      	movs	r2, #15
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a40      	ldr	r2, [pc, #256]	; (8001ce0 <HAL_GPIO_Init+0x2c0>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d013      	beq.n	8001c0c <HAL_GPIO_Init+0x1ec>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a3f      	ldr	r2, [pc, #252]	; (8001ce4 <HAL_GPIO_Init+0x2c4>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d00d      	beq.n	8001c08 <HAL_GPIO_Init+0x1e8>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a3e      	ldr	r2, [pc, #248]	; (8001ce8 <HAL_GPIO_Init+0x2c8>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d007      	beq.n	8001c04 <HAL_GPIO_Init+0x1e4>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a3d      	ldr	r2, [pc, #244]	; (8001cec <HAL_GPIO_Init+0x2cc>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d101      	bne.n	8001c00 <HAL_GPIO_Init+0x1e0>
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e006      	b.n	8001c0e <HAL_GPIO_Init+0x1ee>
 8001c00:	2304      	movs	r3, #4
 8001c02:	e004      	b.n	8001c0e <HAL_GPIO_Init+0x1ee>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e002      	b.n	8001c0e <HAL_GPIO_Init+0x1ee>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e000      	b.n	8001c0e <HAL_GPIO_Init+0x1ee>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c10:	f002 0203 	and.w	r2, r2, #3
 8001c14:	0092      	lsls	r2, r2, #2
 8001c16:	4093      	lsls	r3, r2
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c1e:	492f      	ldr	r1, [pc, #188]	; (8001cdc <HAL_GPIO_Init+0x2bc>)
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	089b      	lsrs	r3, r3, #2
 8001c24:	3302      	adds	r3, #2
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d006      	beq.n	8001c46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c38:	4b2d      	ldr	r3, [pc, #180]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	492c      	ldr	r1, [pc, #176]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	608b      	str	r3, [r1, #8]
 8001c44:	e006      	b.n	8001c54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c46:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	4928      	ldr	r1, [pc, #160]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d006      	beq.n	8001c6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c60:	4b23      	ldr	r3, [pc, #140]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	4922      	ldr	r1, [pc, #136]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	60cb      	str	r3, [r1, #12]
 8001c6c:	e006      	b.n	8001c7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c6e:	4b20      	ldr	r3, [pc, #128]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	491e      	ldr	r1, [pc, #120]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d006      	beq.n	8001c96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c88:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	4918      	ldr	r1, [pc, #96]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]
 8001c94:	e006      	b.n	8001ca4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c96:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	4914      	ldr	r1, [pc, #80]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d021      	beq.n	8001cf4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	490e      	ldr	r1, [pc, #56]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	600b      	str	r3, [r1, #0]
 8001cbc:	e021      	b.n	8001d02 <HAL_GPIO_Init+0x2e2>
 8001cbe:	bf00      	nop
 8001cc0:	10320000 	.word	0x10320000
 8001cc4:	10310000 	.word	0x10310000
 8001cc8:	10220000 	.word	0x10220000
 8001ccc:	10210000 	.word	0x10210000
 8001cd0:	10120000 	.word	0x10120000
 8001cd4:	10110000 	.word	0x10110000
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40010000 	.word	0x40010000
 8001ce0:	40010800 	.word	0x40010800
 8001ce4:	40010c00 	.word	0x40010c00
 8001ce8:	40011000 	.word	0x40011000
 8001cec:	40011400 	.word	0x40011400
 8001cf0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <HAL_GPIO_Init+0x304>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	4909      	ldr	r1, [pc, #36]	; (8001d24 <HAL_GPIO_Init+0x304>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	3301      	adds	r3, #1
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f47f ae8e 	bne.w	8001a34 <HAL_GPIO_Init+0x14>
  }
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	372c      	adds	r7, #44	; 0x2c
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr
 8001d24:	40010400 	.word	0x40010400

08001d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	807b      	strh	r3, [r7, #2]
 8001d34:	4613      	mov	r3, r2
 8001d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d38:	787b      	ldrb	r3, [r7, #1]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d3e:	887a      	ldrh	r2, [r7, #2]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d44:	e003      	b.n	8001d4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d46:	887b      	ldrh	r3, [r7, #2]
 8001d48:	041a      	lsls	r2, r3, #16
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	611a      	str	r2, [r3, #16]
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d6a:	887a      	ldrh	r2, [r7, #2]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	041a      	lsls	r2, r3, #16
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	43d9      	mvns	r1, r3
 8001d76:	887b      	ldrh	r3, [r7, #2]
 8001d78:	400b      	ands	r3, r1
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	611a      	str	r2, [r3, #16]
}
 8001d80:	bf00      	nop
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr
	...

08001d8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d98:	695a      	ldr	r2, [r3, #20]
 8001d9a:	88fb      	ldrh	r3, [r7, #6]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d006      	beq.n	8001db0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001da2:	4a05      	ldr	r2, [pc, #20]	; (8001db8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001da4:	88fb      	ldrh	r3, [r7, #6]
 8001da6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001da8:	88fb      	ldrh	r3, [r7, #6]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fd86 	bl	80008bc <HAL_GPIO_EXTI_Callback>
  }
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40010400 	.word	0x40010400

08001dbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e272      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 8087 	beq.w	8001eea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ddc:	4b92      	ldr	r3, [pc, #584]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 030c 	and.w	r3, r3, #12
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d00c      	beq.n	8001e02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001de8:	4b8f      	ldr	r3, [pc, #572]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 030c 	and.w	r3, r3, #12
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d112      	bne.n	8001e1a <HAL_RCC_OscConfig+0x5e>
 8001df4:	4b8c      	ldr	r3, [pc, #560]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e00:	d10b      	bne.n	8001e1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e02:	4b89      	ldr	r3, [pc, #548]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d06c      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x12c>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d168      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e24c      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e22:	d106      	bne.n	8001e32 <HAL_RCC_OscConfig+0x76>
 8001e24:	4b80      	ldr	r3, [pc, #512]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a7f      	ldr	r2, [pc, #508]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	e02e      	b.n	8001e90 <HAL_RCC_OscConfig+0xd4>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x98>
 8001e3a:	4b7b      	ldr	r3, [pc, #492]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a7a      	ldr	r2, [pc, #488]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	4b78      	ldr	r3, [pc, #480]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a77      	ldr	r2, [pc, #476]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	e01d      	b.n	8001e90 <HAL_RCC_OscConfig+0xd4>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e5c:	d10c      	bne.n	8001e78 <HAL_RCC_OscConfig+0xbc>
 8001e5e:	4b72      	ldr	r3, [pc, #456]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a71      	ldr	r2, [pc, #452]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	4b6f      	ldr	r3, [pc, #444]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a6e      	ldr	r2, [pc, #440]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	e00b      	b.n	8001e90 <HAL_RCC_OscConfig+0xd4>
 8001e78:	4b6b      	ldr	r3, [pc, #428]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a6a      	ldr	r2, [pc, #424]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	4b68      	ldr	r3, [pc, #416]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a67      	ldr	r2, [pc, #412]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d013      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7fe ffd8 	bl	8000e4c <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea0:	f7fe ffd4 	bl	8000e4c <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b64      	cmp	r3, #100	; 0x64
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e200      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb2:	4b5d      	ldr	r3, [pc, #372]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0xe4>
 8001ebe:	e014      	b.n	8001eea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec0:	f7fe ffc4 	bl	8000e4c <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec8:	f7fe ffc0 	bl	8000e4c <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b64      	cmp	r3, #100	; 0x64
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e1ec      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eda:	4b53      	ldr	r3, [pc, #332]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x10c>
 8001ee6:	e000      	b.n	8001eea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d063      	beq.n	8001fbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ef6:	4b4c      	ldr	r3, [pc, #304]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00b      	beq.n	8001f1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f02:	4b49      	ldr	r3, [pc, #292]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	d11c      	bne.n	8001f48 <HAL_RCC_OscConfig+0x18c>
 8001f0e:	4b46      	ldr	r3, [pc, #280]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d116      	bne.n	8001f48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f1a:	4b43      	ldr	r3, [pc, #268]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d005      	beq.n	8001f32 <HAL_RCC_OscConfig+0x176>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d001      	beq.n	8001f32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e1c0      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f32:	4b3d      	ldr	r3, [pc, #244]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4939      	ldr	r1, [pc, #228]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f46:	e03a      	b.n	8001fbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d020      	beq.n	8001f92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f50:	4b36      	ldr	r3, [pc, #216]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f56:	f7fe ff79 	bl	8000e4c <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f5e:	f7fe ff75 	bl	8000e4c <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e1a1      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f70:	4b2d      	ldr	r3, [pc, #180]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0f0      	beq.n	8001f5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7c:	4b2a      	ldr	r3, [pc, #168]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	4927      	ldr	r1, [pc, #156]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	600b      	str	r3, [r1, #0]
 8001f90:	e015      	b.n	8001fbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f92:	4b26      	ldr	r3, [pc, #152]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f98:	f7fe ff58 	bl	8000e4c <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa0:	f7fe ff54 	bl	8000e4c <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e180      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb2:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d03a      	beq.n	8002040 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d019      	beq.n	8002006 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fd2:	4b17      	ldr	r3, [pc, #92]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd8:	f7fe ff38 	bl	8000e4c <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe0:	f7fe ff34 	bl	8000e4c <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e160      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff2:	4b0d      	ldr	r3, [pc, #52]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f0      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ffe:	2001      	movs	r0, #1
 8002000:	f000 faba 	bl	8002578 <RCC_Delay>
 8002004:	e01c      	b.n	8002040 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002006:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200c:	f7fe ff1e 	bl	8000e4c <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002012:	e00f      	b.n	8002034 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002014:	f7fe ff1a 	bl	8000e4c <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d908      	bls.n	8002034 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e146      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
 8002026:	bf00      	nop
 8002028:	40021000 	.word	0x40021000
 800202c:	42420000 	.word	0x42420000
 8002030:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002034:	4b92      	ldr	r3, [pc, #584]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1e9      	bne.n	8002014 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 80a6 	beq.w	800219a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800204e:	2300      	movs	r3, #0
 8002050:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002052:	4b8b      	ldr	r3, [pc, #556]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10d      	bne.n	800207a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800205e:	4b88      	ldr	r3, [pc, #544]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	4a87      	ldr	r2, [pc, #540]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002068:	61d3      	str	r3, [r2, #28]
 800206a:	4b85      	ldr	r3, [pc, #532]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002076:	2301      	movs	r3, #1
 8002078:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207a:	4b82      	ldr	r3, [pc, #520]	; (8002284 <HAL_RCC_OscConfig+0x4c8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002082:	2b00      	cmp	r3, #0
 8002084:	d118      	bne.n	80020b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002086:	4b7f      	ldr	r3, [pc, #508]	; (8002284 <HAL_RCC_OscConfig+0x4c8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a7e      	ldr	r2, [pc, #504]	; (8002284 <HAL_RCC_OscConfig+0x4c8>)
 800208c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002092:	f7fe fedb 	bl	8000e4c <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800209a:	f7fe fed7 	bl	8000e4c <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b64      	cmp	r3, #100	; 0x64
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e103      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ac:	4b75      	ldr	r3, [pc, #468]	; (8002284 <HAL_RCC_OscConfig+0x4c8>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f0      	beq.n	800209a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d106      	bne.n	80020ce <HAL_RCC_OscConfig+0x312>
 80020c0:	4b6f      	ldr	r3, [pc, #444]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	4a6e      	ldr	r2, [pc, #440]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6213      	str	r3, [r2, #32]
 80020cc:	e02d      	b.n	800212a <HAL_RCC_OscConfig+0x36e>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x334>
 80020d6:	4b6a      	ldr	r3, [pc, #424]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	4a69      	ldr	r2, [pc, #420]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	f023 0301 	bic.w	r3, r3, #1
 80020e0:	6213      	str	r3, [r2, #32]
 80020e2:	4b67      	ldr	r3, [pc, #412]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	4a66      	ldr	r2, [pc, #408]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020e8:	f023 0304 	bic.w	r3, r3, #4
 80020ec:	6213      	str	r3, [r2, #32]
 80020ee:	e01c      	b.n	800212a <HAL_RCC_OscConfig+0x36e>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	2b05      	cmp	r3, #5
 80020f6:	d10c      	bne.n	8002112 <HAL_RCC_OscConfig+0x356>
 80020f8:	4b61      	ldr	r3, [pc, #388]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	4a60      	ldr	r2, [pc, #384]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020fe:	f043 0304 	orr.w	r3, r3, #4
 8002102:	6213      	str	r3, [r2, #32]
 8002104:	4b5e      	ldr	r3, [pc, #376]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	4a5d      	ldr	r2, [pc, #372]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	6213      	str	r3, [r2, #32]
 8002110:	e00b      	b.n	800212a <HAL_RCC_OscConfig+0x36e>
 8002112:	4b5b      	ldr	r3, [pc, #364]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	4a5a      	ldr	r2, [pc, #360]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002118:	f023 0301 	bic.w	r3, r3, #1
 800211c:	6213      	str	r3, [r2, #32]
 800211e:	4b58      	ldr	r3, [pc, #352]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	4a57      	ldr	r2, [pc, #348]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002124:	f023 0304 	bic.w	r3, r3, #4
 8002128:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d015      	beq.n	800215e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002132:	f7fe fe8b 	bl	8000e4c <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002138:	e00a      	b.n	8002150 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213a:	f7fe fe87 	bl	8000e4c <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	f241 3288 	movw	r2, #5000	; 0x1388
 8002148:	4293      	cmp	r3, r2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e0b1      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002150:	4b4b      	ldr	r3, [pc, #300]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0ee      	beq.n	800213a <HAL_RCC_OscConfig+0x37e>
 800215c:	e014      	b.n	8002188 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215e:	f7fe fe75 	bl	8000e4c <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002164:	e00a      	b.n	800217c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002166:	f7fe fe71 	bl	8000e4c <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	f241 3288 	movw	r2, #5000	; 0x1388
 8002174:	4293      	cmp	r3, r2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e09b      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800217c:	4b40      	ldr	r3, [pc, #256]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1ee      	bne.n	8002166 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002188:	7dfb      	ldrb	r3, [r7, #23]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d105      	bne.n	800219a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218e:	4b3c      	ldr	r3, [pc, #240]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	4a3b      	ldr	r2, [pc, #236]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002198:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 8087 	beq.w	80022b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021a4:	4b36      	ldr	r3, [pc, #216]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 030c 	and.w	r3, r3, #12
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d061      	beq.n	8002274 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d146      	bne.n	8002246 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b8:	4b33      	ldr	r3, [pc, #204]	; (8002288 <HAL_RCC_OscConfig+0x4cc>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021be:	f7fe fe45 	bl	8000e4c <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c6:	f7fe fe41 	bl	8000e4c <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e06d      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d8:	4b29      	ldr	r3, [pc, #164]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1f0      	bne.n	80021c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ec:	d108      	bne.n	8002200 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021ee:	4b24      	ldr	r3, [pc, #144]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	4921      	ldr	r1, [pc, #132]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002200:	4b1f      	ldr	r3, [pc, #124]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a19      	ldr	r1, [r3, #32]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	430b      	orrs	r3, r1
 8002212:	491b      	ldr	r1, [pc, #108]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002214:	4313      	orrs	r3, r2
 8002216:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002218:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <HAL_RCC_OscConfig+0x4cc>)
 800221a:	2201      	movs	r2, #1
 800221c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221e:	f7fe fe15 	bl	8000e4c <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002226:	f7fe fe11 	bl	8000e4c <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e03d      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002238:	4b11      	ldr	r3, [pc, #68]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f0      	beq.n	8002226 <HAL_RCC_OscConfig+0x46a>
 8002244:	e035      	b.n	80022b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002246:	4b10      	ldr	r3, [pc, #64]	; (8002288 <HAL_RCC_OscConfig+0x4cc>)
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7fe fdfe 	bl	8000e4c <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002254:	f7fe fdfa 	bl	8000e4c <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e026      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0x498>
 8002272:	e01e      	b.n	80022b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d107      	bne.n	800228c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e019      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
 8002280:	40021000 	.word	0x40021000
 8002284:	40007000 	.word	0x40007000
 8002288:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_RCC_OscConfig+0x500>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	429a      	cmp	r2, r3
 800229e:	d106      	bne.n	80022ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d001      	beq.n	80022b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40021000 	.word	0x40021000

080022c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0d0      	b.n	8002476 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022d4:	4b6a      	ldr	r3, [pc, #424]	; (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d910      	bls.n	8002304 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e2:	4b67      	ldr	r3, [pc, #412]	; (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 0207 	bic.w	r2, r3, #7
 80022ea:	4965      	ldr	r1, [pc, #404]	; (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f2:	4b63      	ldr	r3, [pc, #396]	; (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0b8      	b.n	8002476 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d020      	beq.n	8002352 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800231c:	4b59      	ldr	r3, [pc, #356]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4a58      	ldr	r2, [pc, #352]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002322:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002326:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002334:	4b53      	ldr	r3, [pc, #332]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	4a52      	ldr	r2, [pc, #328]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 800233a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800233e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002340:	4b50      	ldr	r3, [pc, #320]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	494d      	ldr	r1, [pc, #308]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	4313      	orrs	r3, r2
 8002350:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d040      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d107      	bne.n	8002376 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002366:	4b47      	ldr	r3, [pc, #284]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d115      	bne.n	800239e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e07f      	b.n	8002476 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b02      	cmp	r3, #2
 800237c:	d107      	bne.n	800238e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237e:	4b41      	ldr	r3, [pc, #260]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d109      	bne.n	800239e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e073      	b.n	8002476 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238e:	4b3d      	ldr	r3, [pc, #244]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e06b      	b.n	8002476 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800239e:	4b39      	ldr	r3, [pc, #228]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f023 0203 	bic.w	r2, r3, #3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	4936      	ldr	r1, [pc, #216]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023b0:	f7fe fd4c 	bl	8000e4c <HAL_GetTick>
 80023b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b6:	e00a      	b.n	80023ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b8:	f7fe fd48 	bl	8000e4c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e053      	b.n	8002476 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ce:	4b2d      	ldr	r3, [pc, #180]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 020c 	and.w	r2, r3, #12
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	429a      	cmp	r2, r3
 80023de:	d1eb      	bne.n	80023b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023e0:	4b27      	ldr	r3, [pc, #156]	; (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d210      	bcs.n	8002410 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ee:	4b24      	ldr	r3, [pc, #144]	; (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 0207 	bic.w	r2, r3, #7
 80023f6:	4922      	ldr	r1, [pc, #136]	; (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fe:	4b20      	ldr	r3, [pc, #128]	; (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e032      	b.n	8002476 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d008      	beq.n	800242e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800241c:	4b19      	ldr	r3, [pc, #100]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4916      	ldr	r1, [pc, #88]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	4313      	orrs	r3, r2
 800242c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d009      	beq.n	800244e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800243a:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	490e      	ldr	r1, [pc, #56]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	4313      	orrs	r3, r2
 800244c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800244e:	f000 f821 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8002452:	4602      	mov	r2, r0
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	091b      	lsrs	r3, r3, #4
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	490a      	ldr	r1, [pc, #40]	; (8002488 <HAL_RCC_ClockConfig+0x1c8>)
 8002460:	5ccb      	ldrb	r3, [r1, r3]
 8002462:	fa22 f303 	lsr.w	r3, r2, r3
 8002466:	4a09      	ldr	r2, [pc, #36]	; (800248c <HAL_RCC_ClockConfig+0x1cc>)
 8002468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <HAL_RCC_ClockConfig+0x1d0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe fcaa 	bl	8000dc8 <HAL_InitTick>

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40022000 	.word	0x40022000
 8002484:	40021000 	.word	0x40021000
 8002488:	08003e70 	.word	0x08003e70
 800248c:	20000004 	.word	0x20000004
 8002490:	20000008 	.word	0x20000008

08002494 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002494:	b480      	push	{r7}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	2300      	movs	r3, #0
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	2300      	movs	r3, #0
 80024a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024ae:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <HAL_RCC_GetSysClockFreq+0x94>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d002      	beq.n	80024c4 <HAL_RCC_GetSysClockFreq+0x30>
 80024be:	2b08      	cmp	r3, #8
 80024c0:	d003      	beq.n	80024ca <HAL_RCC_GetSysClockFreq+0x36>
 80024c2:	e027      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <HAL_RCC_GetSysClockFreq+0x98>)
 80024c6:	613b      	str	r3, [r7, #16]
      break;
 80024c8:	e027      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	0c9b      	lsrs	r3, r3, #18
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	4a17      	ldr	r2, [pc, #92]	; (8002530 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024d4:	5cd3      	ldrb	r3, [r2, r3]
 80024d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d010      	beq.n	8002504 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024e2:	4b11      	ldr	r3, [pc, #68]	; (8002528 <HAL_RCC_GetSysClockFreq+0x94>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	0c5b      	lsrs	r3, r3, #17
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	4a11      	ldr	r2, [pc, #68]	; (8002534 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024ee:	5cd3      	ldrb	r3, [r2, r3]
 80024f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a0d      	ldr	r2, [pc, #52]	; (800252c <HAL_RCC_GetSysClockFreq+0x98>)
 80024f6:	fb03 f202 	mul.w	r2, r3, r2
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	e004      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a0c      	ldr	r2, [pc, #48]	; (8002538 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002508:	fb02 f303 	mul.w	r3, r2, r3
 800250c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	613b      	str	r3, [r7, #16]
      break;
 8002512:	e002      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_RCC_GetSysClockFreq+0x98>)
 8002516:	613b      	str	r3, [r7, #16]
      break;
 8002518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800251a:	693b      	ldr	r3, [r7, #16]
}
 800251c:	4618      	mov	r0, r3
 800251e:	371c      	adds	r7, #28
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40021000 	.word	0x40021000
 800252c:	007a1200 	.word	0x007a1200
 8002530:	08003e88 	.word	0x08003e88
 8002534:	08003e98 	.word	0x08003e98
 8002538:	003d0900 	.word	0x003d0900

0800253c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002540:	4b02      	ldr	r3, [pc, #8]	; (800254c <HAL_RCC_GetHCLKFreq+0x10>)
 8002542:	681b      	ldr	r3, [r3, #0]
}
 8002544:	4618      	mov	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr
 800254c:	20000004 	.word	0x20000004

08002550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002554:	f7ff fff2 	bl	800253c <HAL_RCC_GetHCLKFreq>
 8002558:	4602      	mov	r2, r0
 800255a:	4b05      	ldr	r3, [pc, #20]	; (8002570 <HAL_RCC_GetPCLK2Freq+0x20>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	0adb      	lsrs	r3, r3, #11
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	4903      	ldr	r1, [pc, #12]	; (8002574 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002566:	5ccb      	ldrb	r3, [r1, r3]
 8002568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800256c:	4618      	mov	r0, r3
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40021000 	.word	0x40021000
 8002574:	08003e80 	.word	0x08003e80

08002578 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002580:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <RCC_Delay+0x34>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <RCC_Delay+0x38>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	0a5b      	lsrs	r3, r3, #9
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	fb02 f303 	mul.w	r3, r2, r3
 8002592:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002594:	bf00      	nop
  }
  while (Delay --);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1e5a      	subs	r2, r3, #1
 800259a:	60fa      	str	r2, [r7, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f9      	bne.n	8002594 <RCC_Delay+0x1c>
}
 80025a0:	bf00      	nop
 80025a2:	bf00      	nop
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr
 80025ac:	20000004 	.word	0x20000004
 80025b0:	10624dd3 	.word	0x10624dd3

080025b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d07d      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80025d0:	2300      	movs	r3, #0
 80025d2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d4:	4b4f      	ldr	r3, [pc, #316]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10d      	bne.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e0:	4b4c      	ldr	r3, [pc, #304]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	4a4b      	ldr	r2, [pc, #300]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ea:	61d3      	str	r3, [r2, #28]
 80025ec:	4b49      	ldr	r3, [pc, #292]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f4:	60bb      	str	r3, [r7, #8]
 80025f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025f8:	2301      	movs	r3, #1
 80025fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fc:	4b46      	ldr	r3, [pc, #280]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002604:	2b00      	cmp	r3, #0
 8002606:	d118      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002608:	4b43      	ldr	r3, [pc, #268]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a42      	ldr	r2, [pc, #264]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800260e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002612:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002614:	f7fe fc1a 	bl	8000e4c <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261a:	e008      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261c:	f7fe fc16 	bl	8000e4c <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b64      	cmp	r3, #100	; 0x64
 8002628:	d901      	bls.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e06d      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262e:	4b3a      	ldr	r3, [pc, #232]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800263a:	4b36      	ldr	r3, [pc, #216]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002642:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d02e      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	429a      	cmp	r2, r3
 8002656:	d027      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002658:	4b2e      	ldr	r3, [pc, #184]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002660:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002662:	4b2e      	ldr	r3, [pc, #184]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002664:	2201      	movs	r2, #1
 8002666:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002668:	4b2c      	ldr	r3, [pc, #176]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800266e:	4a29      	ldr	r2, [pc, #164]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d014      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267e:	f7fe fbe5 	bl	8000e4c <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002684:	e00a      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002686:	f7fe fbe1 	bl	8000e4c <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	f241 3288 	movw	r2, #5000	; 0x1388
 8002694:	4293      	cmp	r3, r2
 8002696:	d901      	bls.n	800269c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e036      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269c:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0ee      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026a8:	4b1a      	ldr	r3, [pc, #104]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4917      	ldr	r1, [pc, #92]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026ba:	7dfb      	ldrb	r3, [r7, #23]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d105      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c0:	4b14      	ldr	r3, [pc, #80]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	4a13      	ldr	r2, [pc, #76]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026d8:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	490b      	ldr	r1, [pc, #44]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0310 	and.w	r3, r3, #16
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d008      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026f6:	4b07      	ldr	r3, [pc, #28]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	4904      	ldr	r1, [pc, #16]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002704:	4313      	orrs	r3, r2
 8002706:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40021000 	.word	0x40021000
 8002718:	40007000 	.word	0x40007000
 800271c:	42420440 	.word	0x42420440

08002720 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	2300      	movs	r3, #0
 800272e:	61fb      	str	r3, [r7, #28]
 8002730:	2300      	movs	r3, #0
 8002732:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	2300      	movs	r3, #0
 800273a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b10      	cmp	r3, #16
 8002740:	d00a      	beq.n	8002758 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b10      	cmp	r3, #16
 8002746:	f200 808a 	bhi.w	800285e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d045      	beq.n	80027dc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d075      	beq.n	8002842 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002756:	e082      	b.n	800285e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002758:	4b46      	ldr	r3, [pc, #280]	; (8002874 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800275e:	4b45      	ldr	r3, [pc, #276]	; (8002874 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d07b      	beq.n	8002862 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	0c9b      	lsrs	r3, r3, #18
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	4a41      	ldr	r2, [pc, #260]	; (8002878 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002774:	5cd3      	ldrb	r3, [r2, r3]
 8002776:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d015      	beq.n	80027ae <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002782:	4b3c      	ldr	r3, [pc, #240]	; (8002874 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	0c5b      	lsrs	r3, r3, #17
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	4a3b      	ldr	r2, [pc, #236]	; (800287c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800278e:	5cd3      	ldrb	r3, [r2, r3]
 8002790:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00d      	beq.n	80027b8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800279c:	4a38      	ldr	r2, [pc, #224]	; (8002880 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	fb02 f303 	mul.w	r3, r2, r3
 80027aa:	61fb      	str	r3, [r7, #28]
 80027ac:	e004      	b.n	80027b8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4a34      	ldr	r2, [pc, #208]	; (8002884 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80027b2:	fb02 f303 	mul.w	r3, r2, r3
 80027b6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80027b8:	4b2e      	ldr	r3, [pc, #184]	; (8002874 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027c4:	d102      	bne.n	80027cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	61bb      	str	r3, [r7, #24]
      break;
 80027ca:	e04a      	b.n	8002862 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	4a2d      	ldr	r2, [pc, #180]	; (8002888 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80027d2:	fba2 2303 	umull	r2, r3, r2, r3
 80027d6:	085b      	lsrs	r3, r3, #1
 80027d8:	61bb      	str	r3, [r7, #24]
      break;
 80027da:	e042      	b.n	8002862 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80027dc:	4b25      	ldr	r3, [pc, #148]	; (8002874 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ec:	d108      	bne.n	8002800 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80027f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	e01f      	b.n	8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002806:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800280a:	d109      	bne.n	8002820 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800280c:	4b19      	ldr	r3, [pc, #100]	; (8002874 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002818:	f649 4340 	movw	r3, #40000	; 0x9c40
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	e00f      	b.n	8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002826:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800282a:	d11c      	bne.n	8002866 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800282c:	4b11      	ldr	r3, [pc, #68]	; (8002874 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d016      	beq.n	8002866 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002838:	f24f 4324 	movw	r3, #62500	; 0xf424
 800283c:	61bb      	str	r3, [r7, #24]
      break;
 800283e:	e012      	b.n	8002866 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002840:	e011      	b.n	8002866 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002842:	f7ff fe85 	bl	8002550 <HAL_RCC_GetPCLK2Freq>
 8002846:	4602      	mov	r2, r0
 8002848:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	0b9b      	lsrs	r3, r3, #14
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	3301      	adds	r3, #1
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	fbb2 f3f3 	udiv	r3, r2, r3
 800285a:	61bb      	str	r3, [r7, #24]
      break;
 800285c:	e004      	b.n	8002868 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800285e:	bf00      	nop
 8002860:	e002      	b.n	8002868 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002862:	bf00      	nop
 8002864:	e000      	b.n	8002868 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002866:	bf00      	nop
    }
  }
  return (frequency);
 8002868:	69bb      	ldr	r3, [r7, #24]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3720      	adds	r7, #32
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40021000 	.word	0x40021000
 8002878:	08003e9c 	.word	0x08003e9c
 800287c:	08003eac 	.word	0x08003eac
 8002880:	007a1200 	.word	0x007a1200
 8002884:	003d0900 	.word	0x003d0900
 8002888:	aaaaaaab 	.word	0xaaaaaaab

0800288c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e076      	b.n	800298c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d108      	bne.n	80028b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028ae:	d009      	beq.n	80028c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	61da      	str	r2, [r3, #28]
 80028b6:	e005      	b.n	80028c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d106      	bne.n	80028e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7fe f8a6 	bl	8000a30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2202      	movs	r2, #2
 80028e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002934:	431a      	orrs	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002948:	ea42 0103 	orr.w	r1, r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002950:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	0c1a      	lsrs	r2, r3, #16
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f002 0204 	and.w	r2, r2, #4
 800296a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	69da      	ldr	r2, [r3, #28]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800297a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	4613      	mov	r3, r2
 80029a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029a4:	2300      	movs	r3, #0
 80029a6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d101      	bne.n	80029b6 <HAL_SPI_Transmit+0x22>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e12d      	b.n	8002c12 <HAL_SPI_Transmit+0x27e>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029be:	f7fe fa45 	bl	8000e4c <HAL_GetTick>
 80029c2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d002      	beq.n	80029da <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80029d4:	2302      	movs	r3, #2
 80029d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029d8:	e116      	b.n	8002c08 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <HAL_SPI_Transmit+0x52>
 80029e0:	88fb      	ldrh	r3, [r7, #6]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d102      	bne.n	80029ec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029ea:	e10d      	b.n	8002c08 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2203      	movs	r2, #3
 80029f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	88fa      	ldrh	r2, [r7, #6]
 8002a04:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	88fa      	ldrh	r2, [r7, #6]
 8002a0a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a32:	d10f      	bne.n	8002a54 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a42:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5e:	2b40      	cmp	r3, #64	; 0x40
 8002a60:	d007      	beq.n	8002a72 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a7a:	d14f      	bne.n	8002b1c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d002      	beq.n	8002a8a <HAL_SPI_Transmit+0xf6>
 8002a84:	8afb      	ldrh	r3, [r7, #22]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d142      	bne.n	8002b10 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	881a      	ldrh	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	1c9a      	adds	r2, r3, #2
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002aae:	e02f      	b.n	8002b10 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d112      	bne.n	8002ae4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	881a      	ldrh	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	1c9a      	adds	r2, r3, #2
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ae2:	e015      	b.n	8002b10 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ae4:	f7fe f9b2 	bl	8000e4c <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d803      	bhi.n	8002afc <HAL_SPI_Transmit+0x168>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002afa:	d102      	bne.n	8002b02 <HAL_SPI_Transmit+0x16e>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002b0e:	e07b      	b.n	8002c08 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1ca      	bne.n	8002ab0 <HAL_SPI_Transmit+0x11c>
 8002b1a:	e050      	b.n	8002bbe <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <HAL_SPI_Transmit+0x196>
 8002b24:	8afb      	ldrh	r3, [r7, #22]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d144      	bne.n	8002bb4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	330c      	adds	r3, #12
 8002b34:	7812      	ldrb	r2, [r2, #0]
 8002b36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b50:	e030      	b.n	8002bb4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d113      	bne.n	8002b88 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	330c      	adds	r3, #12
 8002b6a:	7812      	ldrb	r2, [r2, #0]
 8002b6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b86:	e015      	b.n	8002bb4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b88:	f7fe f960 	bl	8000e4c <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d803      	bhi.n	8002ba0 <HAL_SPI_Transmit+0x20c>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b9e:	d102      	bne.n	8002ba6 <HAL_SPI_Transmit+0x212>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002bb2:	e029      	b.n	8002c08 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1c9      	bne.n	8002b52 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	6839      	ldr	r1, [r7, #0]
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 fbcc 	bl	8003360 <SPI_EndRxTxTransaction>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10a      	bne.n	8002bf2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bdc:	2300      	movs	r3, #0
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d002      	beq.n	8002c00 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	77fb      	strb	r3, [r7, #31]
 8002bfe:	e003      	b.n	8002c08 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c10:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3720      	adds	r7, #32
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b088      	sub	sp, #32
 8002c1e:	af02      	add	r7, sp, #8
 8002c20:	60f8      	str	r0, [r7, #12]
 8002c22:	60b9      	str	r1, [r7, #8]
 8002c24:	603b      	str	r3, [r7, #0]
 8002c26:	4613      	mov	r3, r2
 8002c28:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d002      	beq.n	8002c40 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c3e:	e0fb      	b.n	8002e38 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c48:	d112      	bne.n	8002c70 <HAL_SPI_Receive+0x56>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10e      	bne.n	8002c70 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2204      	movs	r2, #4
 8002c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002c5a:	88fa      	ldrh	r2, [r7, #6]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	4613      	mov	r3, r2
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	68b9      	ldr	r1, [r7, #8]
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 f8ef 	bl	8002e4a <HAL_SPI_TransmitReceive>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	e0e8      	b.n	8002e42 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <HAL_SPI_Receive+0x64>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e0e1      	b.n	8002e42 <HAL_SPI_Receive+0x228>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c86:	f7fe f8e1 	bl	8000e4c <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <HAL_SPI_Receive+0x7e>
 8002c92:	88fb      	ldrh	r3, [r7, #6]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d102      	bne.n	8002c9e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c9c:	e0cc      	b.n	8002e38 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	88fa      	ldrh	r2, [r7, #6]
 8002cb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	88fa      	ldrh	r2, [r7, #6]
 8002cbc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ce4:	d10f      	bne.n	8002d06 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cf4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d04:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d10:	2b40      	cmp	r3, #64	; 0x40
 8002d12:	d007      	beq.n	8002d24 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d22:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d16a      	bne.n	8002e02 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002d2c:	e032      	b.n	8002d94 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d115      	bne.n	8002d68 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f103 020c 	add.w	r2, r3, #12
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d48:	7812      	ldrb	r2, [r2, #0]
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d66:	e015      	b.n	8002d94 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d68:	f7fe f870 	bl	8000e4c <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d803      	bhi.n	8002d80 <HAL_SPI_Receive+0x166>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d7e:	d102      	bne.n	8002d86 <HAL_SPI_Receive+0x16c>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002d92:	e051      	b.n	8002e38 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1c7      	bne.n	8002d2e <HAL_SPI_Receive+0x114>
 8002d9e:	e035      	b.n	8002e0c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d113      	bne.n	8002dd6 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db8:	b292      	uxth	r2, r2
 8002dba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc0:	1c9a      	adds	r2, r3, #2
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002dd4:	e015      	b.n	8002e02 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dd6:	f7fe f839 	bl	8000e4c <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d803      	bhi.n	8002dee <HAL_SPI_Receive+0x1d4>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dec:	d102      	bne.n	8002df4 <HAL_SPI_Receive+0x1da>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d106      	bne.n	8002e02 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002e00:	e01a      	b.n	8002e38 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1c9      	bne.n	8002da0 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	6839      	ldr	r1, [r7, #0]
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 fa53 	bl	80032bc <SPI_EndRxTransaction>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	75fb      	strb	r3, [r7, #23]
 8002e2e:	e003      	b.n	8002e38 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b08c      	sub	sp, #48	; 0x30
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	607a      	str	r2, [r7, #4]
 8002e56:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_SPI_TransmitReceive+0x26>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e198      	b.n	80031a2 <HAL_SPI_TransmitReceive+0x358>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e78:	f7fd ffe8 	bl	8000e4c <HAL_GetTick>
 8002e7c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002e8e:	887b      	ldrh	r3, [r7, #2]
 8002e90:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d00f      	beq.n	8002eba <HAL_SPI_TransmitReceive+0x70>
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ea0:	d107      	bne.n	8002eb2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d103      	bne.n	8002eb2 <HAL_SPI_TransmitReceive+0x68>
 8002eaa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d003      	beq.n	8002eba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002eb8:	e16d      	b.n	8003196 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <HAL_SPI_TransmitReceive+0x82>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <HAL_SPI_TransmitReceive+0x82>
 8002ec6:	887b      	ldrh	r3, [r7, #2]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d103      	bne.n	8002ed4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002ed2:	e160      	b.n	8003196 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d003      	beq.n	8002ee8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2205      	movs	r2, #5
 8002ee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	887a      	ldrh	r2, [r7, #2]
 8002ef8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	887a      	ldrh	r2, [r7, #2]
 8002efe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	887a      	ldrh	r2, [r7, #2]
 8002f0a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	887a      	ldrh	r2, [r7, #2]
 8002f10:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f28:	2b40      	cmp	r3, #64	; 0x40
 8002f2a:	d007      	beq.n	8002f3c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f44:	d17c      	bne.n	8003040 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d002      	beq.n	8002f54 <HAL_SPI_TransmitReceive+0x10a>
 8002f4e:	8b7b      	ldrh	r3, [r7, #26]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d16a      	bne.n	800302a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	881a      	ldrh	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f64:	1c9a      	adds	r2, r3, #2
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f78:	e057      	b.n	800302a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d11b      	bne.n	8002fc0 <HAL_SPI_TransmitReceive+0x176>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d016      	beq.n	8002fc0 <HAL_SPI_TransmitReceive+0x176>
 8002f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d113      	bne.n	8002fc0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	881a      	ldrh	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa8:	1c9a      	adds	r2, r3, #2
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d119      	bne.n	8003002 <HAL_SPI_TransmitReceive+0x1b8>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d014      	beq.n	8003002 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe2:	b292      	uxth	r2, r2
 8002fe4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fea:	1c9a      	adds	r2, r3, #2
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ffe:	2301      	movs	r3, #1
 8003000:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003002:	f7fd ff23 	bl	8000e4c <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800300e:	429a      	cmp	r2, r3
 8003010:	d80b      	bhi.n	800302a <HAL_SPI_TransmitReceive+0x1e0>
 8003012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003014:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003018:	d007      	beq.n	800302a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003028:	e0b5      	b.n	8003196 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800302e:	b29b      	uxth	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1a2      	bne.n	8002f7a <HAL_SPI_TransmitReceive+0x130>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003038:	b29b      	uxth	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d19d      	bne.n	8002f7a <HAL_SPI_TransmitReceive+0x130>
 800303e:	e080      	b.n	8003142 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <HAL_SPI_TransmitReceive+0x204>
 8003048:	8b7b      	ldrh	r3, [r7, #26]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d16f      	bne.n	800312e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	330c      	adds	r3, #12
 8003058:	7812      	ldrb	r2, [r2, #0]
 800305a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800306a:	b29b      	uxth	r3, r3
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003074:	e05b      	b.n	800312e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b02      	cmp	r3, #2
 8003082:	d11c      	bne.n	80030be <HAL_SPI_TransmitReceive+0x274>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003088:	b29b      	uxth	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d017      	beq.n	80030be <HAL_SPI_TransmitReceive+0x274>
 800308e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003090:	2b01      	cmp	r3, #1
 8003092:	d114      	bne.n	80030be <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	330c      	adds	r3, #12
 800309e:	7812      	ldrb	r2, [r2, #0]
 80030a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	1c5a      	adds	r2, r3, #1
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	3b01      	subs	r3, #1
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d119      	bne.n	8003100 <HAL_SPI_TransmitReceive+0x2b6>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d014      	beq.n	8003100 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030fc:	2301      	movs	r3, #1
 80030fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003100:	f7fd fea4 	bl	8000e4c <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800310c:	429a      	cmp	r2, r3
 800310e:	d803      	bhi.n	8003118 <HAL_SPI_TransmitReceive+0x2ce>
 8003110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003112:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003116:	d102      	bne.n	800311e <HAL_SPI_TransmitReceive+0x2d4>
 8003118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311a:	2b00      	cmp	r3, #0
 800311c:	d107      	bne.n	800312e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800312c:	e033      	b.n	8003196 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003132:	b29b      	uxth	r3, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	d19e      	bne.n	8003076 <HAL_SPI_TransmitReceive+0x22c>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800313c:	b29b      	uxth	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d199      	bne.n	8003076 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003144:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f90a 	bl	8003360 <SPI_EndRxTxTransaction>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d006      	beq.n	8003160 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2220      	movs	r2, #32
 800315c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800315e:	e01a      	b.n	8003196 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10a      	bne.n	800317e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	617b      	str	r3, [r7, #20]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800318c:	e003      	b.n	8003196 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800319e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3730      	adds	r7, #48	; 0x30
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b088      	sub	sp, #32
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	4613      	mov	r3, r2
 80031ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031bc:	f7fd fe46 	bl	8000e4c <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	4413      	add	r3, r2
 80031ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031cc:	f7fd fe3e 	bl	8000e4c <HAL_GetTick>
 80031d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031d2:	4b39      	ldr	r3, [pc, #228]	; (80032b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	015b      	lsls	r3, r3, #5
 80031d8:	0d1b      	lsrs	r3, r3, #20
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	fb02 f303 	mul.w	r3, r2, r3
 80031e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031e2:	e054      	b.n	800328e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031ea:	d050      	beq.n	800328e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031ec:	f7fd fe2e 	bl	8000e4c <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	69fa      	ldr	r2, [r7, #28]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d902      	bls.n	8003202 <SPI_WaitFlagStateUntilTimeout+0x56>
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d13d      	bne.n	800327e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003210:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800321a:	d111      	bne.n	8003240 <SPI_WaitFlagStateUntilTimeout+0x94>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003224:	d004      	beq.n	8003230 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800322e:	d107      	bne.n	8003240 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800323e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003248:	d10f      	bne.n	800326a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003268:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e017      	b.n	80032ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	3b01      	subs	r3, #1
 800328c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	4013      	ands	r3, r2
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	429a      	cmp	r2, r3
 800329c:	bf0c      	ite	eq
 800329e:	2301      	moveq	r3, #1
 80032a0:	2300      	movne	r3, #0
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	461a      	mov	r2, r3
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d19b      	bne.n	80031e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3720      	adds	r7, #32
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000004 	.word	0x20000004

080032bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032d0:	d111      	bne.n	80032f6 <SPI_EndRxTransaction+0x3a>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032da:	d004      	beq.n	80032e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e4:	d107      	bne.n	80032f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032f4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032fe:	d117      	bne.n	8003330 <SPI_EndRxTransaction+0x74>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003308:	d112      	bne.n	8003330 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2200      	movs	r2, #0
 8003312:	2101      	movs	r1, #1
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f7ff ff49 	bl	80031ac <SPI_WaitFlagStateUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d01a      	beq.n	8003356 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003324:	f043 0220 	orr.w	r2, r3, #32
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e013      	b.n	8003358 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2200      	movs	r2, #0
 8003338:	2180      	movs	r1, #128	; 0x80
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f7ff ff36 	bl	80031ac <SPI_WaitFlagStateUntilTimeout>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d007      	beq.n	8003356 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800334a:	f043 0220 	orr.w	r2, r3, #32
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e000      	b.n	8003358 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af02      	add	r7, sp, #8
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2200      	movs	r2, #0
 8003374:	2180      	movs	r1, #128	; 0x80
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f7ff ff18 	bl	80031ac <SPI_WaitFlagStateUntilTimeout>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d007      	beq.n	8003392 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003386:	f043 0220 	orr.w	r2, r3, #32
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e000      	b.n	8003394 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e041      	b.n	8003432 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d106      	bne.n	80033c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7fd fc9e 	bl	8000d04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3304      	adds	r3, #4
 80033d8:	4619      	mov	r1, r3
 80033da:	4610      	mov	r0, r2
 80033dc:	f000 fa74 	bl	80038c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b01      	cmp	r3, #1
 800344e:	d001      	beq.n	8003454 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e03a      	b.n	80034ca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a18      	ldr	r2, [pc, #96]	; (80034d4 <HAL_TIM_Base_Start_IT+0x98>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d00e      	beq.n	8003494 <HAL_TIM_Base_Start_IT+0x58>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800347e:	d009      	beq.n	8003494 <HAL_TIM_Base_Start_IT+0x58>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a14      	ldr	r2, [pc, #80]	; (80034d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d004      	beq.n	8003494 <HAL_TIM_Base_Start_IT+0x58>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a13      	ldr	r2, [pc, #76]	; (80034dc <HAL_TIM_Base_Start_IT+0xa0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d111      	bne.n	80034b8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2b06      	cmp	r3, #6
 80034a4:	d010      	beq.n	80034c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f042 0201 	orr.w	r2, r2, #1
 80034b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b6:	e007      	b.n	80034c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0201 	orr.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr
 80034d4:	40012c00 	.word	0x40012c00
 80034d8:	40000400 	.word	0x40000400
 80034dc:	40000800 	.word	0x40000800

080034e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d122      	bne.n	800353c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b02      	cmp	r3, #2
 8003502:	d11b      	bne.n	800353c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0202 	mvn.w	r2, #2
 800350c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f9b4 	bl	8003890 <HAL_TIM_IC_CaptureCallback>
 8003528:	e005      	b.n	8003536 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f9a7 	bl	800387e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f9b6 	bl	80038a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f003 0304 	and.w	r3, r3, #4
 8003546:	2b04      	cmp	r3, #4
 8003548:	d122      	bne.n	8003590 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b04      	cmp	r3, #4
 8003556:	d11b      	bne.n	8003590 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 0204 	mvn.w	r2, #4
 8003560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2202      	movs	r2, #2
 8003566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f98a 	bl	8003890 <HAL_TIM_IC_CaptureCallback>
 800357c:	e005      	b.n	800358a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f97d 	bl	800387e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f98c 	bl	80038a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b08      	cmp	r3, #8
 800359c:	d122      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d11b      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0208 	mvn.w	r2, #8
 80035b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2204      	movs	r2, #4
 80035ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f960 	bl	8003890 <HAL_TIM_IC_CaptureCallback>
 80035d0:	e005      	b.n	80035de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f953 	bl	800387e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f962 	bl	80038a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f003 0310 	and.w	r3, r3, #16
 80035ee:	2b10      	cmp	r3, #16
 80035f0:	d122      	bne.n	8003638 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f003 0310 	and.w	r3, r3, #16
 80035fc:	2b10      	cmp	r3, #16
 80035fe:	d11b      	bne.n	8003638 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f06f 0210 	mvn.w	r2, #16
 8003608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2208      	movs	r2, #8
 800360e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f936 	bl	8003890 <HAL_TIM_IC_CaptureCallback>
 8003624:	e005      	b.n	8003632 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f929 	bl	800387e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f938 	bl	80038a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b01      	cmp	r3, #1
 8003644:	d10e      	bne.n	8003664 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b01      	cmp	r3, #1
 8003652:	d107      	bne.n	8003664 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0201 	mvn.w	r2, #1
 800365c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fd f916 	bl	8000890 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366e:	2b80      	cmp	r3, #128	; 0x80
 8003670:	d10e      	bne.n	8003690 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367c:	2b80      	cmp	r3, #128	; 0x80
 800367e:	d107      	bne.n	8003690 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 fa7b 	bl	8003b86 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369a:	2b40      	cmp	r3, #64	; 0x40
 800369c:	d10e      	bne.n	80036bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a8:	2b40      	cmp	r3, #64	; 0x40
 80036aa:	d107      	bne.n	80036bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f8fc 	bl	80038b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f003 0320 	and.w	r3, r3, #32
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d10e      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f003 0320 	and.w	r3, r3, #32
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	d107      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f06f 0220 	mvn.w	r2, #32
 80036e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fa46 	bl	8003b74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036e8:	bf00      	nop
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_TIM_ConfigClockSource+0x1c>
 8003708:	2302      	movs	r3, #2
 800370a:	e0b4      	b.n	8003876 <HAL_TIM_ConfigClockSource+0x186>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800372a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003732:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003744:	d03e      	beq.n	80037c4 <HAL_TIM_ConfigClockSource+0xd4>
 8003746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800374a:	f200 8087 	bhi.w	800385c <HAL_TIM_ConfigClockSource+0x16c>
 800374e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003752:	f000 8086 	beq.w	8003862 <HAL_TIM_ConfigClockSource+0x172>
 8003756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800375a:	d87f      	bhi.n	800385c <HAL_TIM_ConfigClockSource+0x16c>
 800375c:	2b70      	cmp	r3, #112	; 0x70
 800375e:	d01a      	beq.n	8003796 <HAL_TIM_ConfigClockSource+0xa6>
 8003760:	2b70      	cmp	r3, #112	; 0x70
 8003762:	d87b      	bhi.n	800385c <HAL_TIM_ConfigClockSource+0x16c>
 8003764:	2b60      	cmp	r3, #96	; 0x60
 8003766:	d050      	beq.n	800380a <HAL_TIM_ConfigClockSource+0x11a>
 8003768:	2b60      	cmp	r3, #96	; 0x60
 800376a:	d877      	bhi.n	800385c <HAL_TIM_ConfigClockSource+0x16c>
 800376c:	2b50      	cmp	r3, #80	; 0x50
 800376e:	d03c      	beq.n	80037ea <HAL_TIM_ConfigClockSource+0xfa>
 8003770:	2b50      	cmp	r3, #80	; 0x50
 8003772:	d873      	bhi.n	800385c <HAL_TIM_ConfigClockSource+0x16c>
 8003774:	2b40      	cmp	r3, #64	; 0x40
 8003776:	d058      	beq.n	800382a <HAL_TIM_ConfigClockSource+0x13a>
 8003778:	2b40      	cmp	r3, #64	; 0x40
 800377a:	d86f      	bhi.n	800385c <HAL_TIM_ConfigClockSource+0x16c>
 800377c:	2b30      	cmp	r3, #48	; 0x30
 800377e:	d064      	beq.n	800384a <HAL_TIM_ConfigClockSource+0x15a>
 8003780:	2b30      	cmp	r3, #48	; 0x30
 8003782:	d86b      	bhi.n	800385c <HAL_TIM_ConfigClockSource+0x16c>
 8003784:	2b20      	cmp	r3, #32
 8003786:	d060      	beq.n	800384a <HAL_TIM_ConfigClockSource+0x15a>
 8003788:	2b20      	cmp	r3, #32
 800378a:	d867      	bhi.n	800385c <HAL_TIM_ConfigClockSource+0x16c>
 800378c:	2b00      	cmp	r3, #0
 800378e:	d05c      	beq.n	800384a <HAL_TIM_ConfigClockSource+0x15a>
 8003790:	2b10      	cmp	r3, #16
 8003792:	d05a      	beq.n	800384a <HAL_TIM_ConfigClockSource+0x15a>
 8003794:	e062      	b.n	800385c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037a6:	f000 f968 	bl	8003a7a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	609a      	str	r2, [r3, #8]
      break;
 80037c2:	e04f      	b.n	8003864 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037d4:	f000 f951 	bl	8003a7a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037e6:	609a      	str	r2, [r3, #8]
      break;
 80037e8:	e03c      	b.n	8003864 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037f6:	461a      	mov	r2, r3
 80037f8:	f000 f8c8 	bl	800398c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2150      	movs	r1, #80	; 0x50
 8003802:	4618      	mov	r0, r3
 8003804:	f000 f91f 	bl	8003a46 <TIM_ITRx_SetConfig>
      break;
 8003808:	e02c      	b.n	8003864 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003816:	461a      	mov	r2, r3
 8003818:	f000 f8e6 	bl	80039e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2160      	movs	r1, #96	; 0x60
 8003822:	4618      	mov	r0, r3
 8003824:	f000 f90f 	bl	8003a46 <TIM_ITRx_SetConfig>
      break;
 8003828:	e01c      	b.n	8003864 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003836:	461a      	mov	r2, r3
 8003838:	f000 f8a8 	bl	800398c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2140      	movs	r1, #64	; 0x40
 8003842:	4618      	mov	r0, r3
 8003844:	f000 f8ff 	bl	8003a46 <TIM_ITRx_SetConfig>
      break;
 8003848:	e00c      	b.n	8003864 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4619      	mov	r1, r3
 8003854:	4610      	mov	r0, r2
 8003856:	f000 f8f6 	bl	8003a46 <TIM_ITRx_SetConfig>
      break;
 800385a:	e003      	b.n	8003864 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	73fb      	strb	r3, [r7, #15]
      break;
 8003860:	e000      	b.n	8003864 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003862:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003874:	7bfb      	ldrb	r3, [r7, #15]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr

08003890 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr

080038a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr

080038b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr
	...

080038c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a29      	ldr	r2, [pc, #164]	; (8003980 <TIM_Base_SetConfig+0xb8>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d00b      	beq.n	80038f8 <TIM_Base_SetConfig+0x30>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e6:	d007      	beq.n	80038f8 <TIM_Base_SetConfig+0x30>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a26      	ldr	r2, [pc, #152]	; (8003984 <TIM_Base_SetConfig+0xbc>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d003      	beq.n	80038f8 <TIM_Base_SetConfig+0x30>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a25      	ldr	r2, [pc, #148]	; (8003988 <TIM_Base_SetConfig+0xc0>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d108      	bne.n	800390a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	4313      	orrs	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a1c      	ldr	r2, [pc, #112]	; (8003980 <TIM_Base_SetConfig+0xb8>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00b      	beq.n	800392a <TIM_Base_SetConfig+0x62>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003918:	d007      	beq.n	800392a <TIM_Base_SetConfig+0x62>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a19      	ldr	r2, [pc, #100]	; (8003984 <TIM_Base_SetConfig+0xbc>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d003      	beq.n	800392a <TIM_Base_SetConfig+0x62>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a18      	ldr	r2, [pc, #96]	; (8003988 <TIM_Base_SetConfig+0xc0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d108      	bne.n	800393c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4313      	orrs	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	4313      	orrs	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a07      	ldr	r2, [pc, #28]	; (8003980 <TIM_Base_SetConfig+0xb8>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d103      	bne.n	8003970 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	691a      	ldr	r2, [r3, #16]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	615a      	str	r2, [r3, #20]
}
 8003976:	bf00      	nop
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	bc80      	pop	{r7}
 800397e:	4770      	bx	lr
 8003980:	40012c00 	.word	0x40012c00
 8003984:	40000400 	.word	0x40000400
 8003988:	40000800 	.word	0x40000800

0800398c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800398c:	b480      	push	{r7}
 800398e:	b087      	sub	sp, #28
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	f023 0201 	bic.w	r2, r3, #1
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f023 030a 	bic.w	r3, r3, #10
 80039c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	621a      	str	r2, [r3, #32]
}
 80039de:	bf00      	nop
 80039e0:	371c      	adds	r7, #28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr

080039e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	f023 0210 	bic.w	r2, r3, #16
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	031b      	lsls	r3, r3, #12
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a24:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	621a      	str	r2, [r3, #32]
}
 8003a3c:	bf00      	nop
 8003a3e:	371c      	adds	r7, #28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr

08003a46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b085      	sub	sp, #20
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f043 0307 	orr.w	r3, r3, #7
 8003a68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	609a      	str	r2, [r3, #8]
}
 8003a70:	bf00      	nop
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bc80      	pop	{r7}
 8003a78:	4770      	bx	lr

08003a7a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b087      	sub	sp, #28
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	60f8      	str	r0, [r7, #12]
 8003a82:	60b9      	str	r1, [r7, #8]
 8003a84:	607a      	str	r2, [r7, #4]
 8003a86:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a94:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	021a      	lsls	r2, r3, #8
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	609a      	str	r2, [r3, #8]
}
 8003aae:	bf00      	nop
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e046      	b.n	8003b5e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a16      	ldr	r2, [pc, #88]	; (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d00e      	beq.n	8003b32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b1c:	d009      	beq.n	8003b32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a12      	ldr	r2, [pc, #72]	; (8003b6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d004      	beq.n	8003b32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a10      	ldr	r2, [pc, #64]	; (8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d10c      	bne.n	8003b4c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bc80      	pop	{r7}
 8003b66:	4770      	bx	lr
 8003b68:	40012c00 	.word	0x40012c00
 8003b6c:	40000400 	.word	0x40000400
 8003b70:	40000800 	.word	0x40000800

08003b74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bc80      	pop	{r7}
 8003b84:	4770      	bx	lr

08003b86 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr

08003b98 <calloc>:
 8003b98:	4b02      	ldr	r3, [pc, #8]	; (8003ba4 <calloc+0xc>)
 8003b9a:	460a      	mov	r2, r1
 8003b9c:	4601      	mov	r1, r0
 8003b9e:	6818      	ldr	r0, [r3, #0]
 8003ba0:	f000 b802 	b.w	8003ba8 <_calloc_r>
 8003ba4:	2000005c 	.word	0x2000005c

08003ba8 <_calloc_r>:
 8003ba8:	b570      	push	{r4, r5, r6, lr}
 8003baa:	fba1 5402 	umull	r5, r4, r1, r2
 8003bae:	b934      	cbnz	r4, 8003bbe <_calloc_r+0x16>
 8003bb0:	4629      	mov	r1, r5
 8003bb2:	f000 f835 	bl	8003c20 <_malloc_r>
 8003bb6:	4606      	mov	r6, r0
 8003bb8:	b928      	cbnz	r0, 8003bc6 <_calloc_r+0x1e>
 8003bba:	4630      	mov	r0, r6
 8003bbc:	bd70      	pop	{r4, r5, r6, pc}
 8003bbe:	220c      	movs	r2, #12
 8003bc0:	2600      	movs	r6, #0
 8003bc2:	6002      	str	r2, [r0, #0]
 8003bc4:	e7f9      	b.n	8003bba <_calloc_r+0x12>
 8003bc6:	462a      	mov	r2, r5
 8003bc8:	4621      	mov	r1, r4
 8003bca:	f000 f8b5 	bl	8003d38 <memset>
 8003bce:	e7f4      	b.n	8003bba <_calloc_r+0x12>

08003bd0 <free>:
 8003bd0:	4b02      	ldr	r3, [pc, #8]	; (8003bdc <free+0xc>)
 8003bd2:	4601      	mov	r1, r0
 8003bd4:	6818      	ldr	r0, [r3, #0]
 8003bd6:	f000 b8f3 	b.w	8003dc0 <_free_r>
 8003bda:	bf00      	nop
 8003bdc:	2000005c 	.word	0x2000005c

08003be0 <sbrk_aligned>:
 8003be0:	b570      	push	{r4, r5, r6, lr}
 8003be2:	4e0e      	ldr	r6, [pc, #56]	; (8003c1c <sbrk_aligned+0x3c>)
 8003be4:	460c      	mov	r4, r1
 8003be6:	6831      	ldr	r1, [r6, #0]
 8003be8:	4605      	mov	r5, r0
 8003bea:	b911      	cbnz	r1, 8003bf2 <sbrk_aligned+0x12>
 8003bec:	f000 f8ac 	bl	8003d48 <_sbrk_r>
 8003bf0:	6030      	str	r0, [r6, #0]
 8003bf2:	4621      	mov	r1, r4
 8003bf4:	4628      	mov	r0, r5
 8003bf6:	f000 f8a7 	bl	8003d48 <_sbrk_r>
 8003bfa:	1c43      	adds	r3, r0, #1
 8003bfc:	d00a      	beq.n	8003c14 <sbrk_aligned+0x34>
 8003bfe:	1cc4      	adds	r4, r0, #3
 8003c00:	f024 0403 	bic.w	r4, r4, #3
 8003c04:	42a0      	cmp	r0, r4
 8003c06:	d007      	beq.n	8003c18 <sbrk_aligned+0x38>
 8003c08:	1a21      	subs	r1, r4, r0
 8003c0a:	4628      	mov	r0, r5
 8003c0c:	f000 f89c 	bl	8003d48 <_sbrk_r>
 8003c10:	3001      	adds	r0, #1
 8003c12:	d101      	bne.n	8003c18 <sbrk_aligned+0x38>
 8003c14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003c18:	4620      	mov	r0, r4
 8003c1a:	bd70      	pop	{r4, r5, r6, pc}
 8003c1c:	2000018c 	.word	0x2000018c

08003c20 <_malloc_r>:
 8003c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c24:	1ccd      	adds	r5, r1, #3
 8003c26:	f025 0503 	bic.w	r5, r5, #3
 8003c2a:	3508      	adds	r5, #8
 8003c2c:	2d0c      	cmp	r5, #12
 8003c2e:	bf38      	it	cc
 8003c30:	250c      	movcc	r5, #12
 8003c32:	2d00      	cmp	r5, #0
 8003c34:	4607      	mov	r7, r0
 8003c36:	db01      	blt.n	8003c3c <_malloc_r+0x1c>
 8003c38:	42a9      	cmp	r1, r5
 8003c3a:	d905      	bls.n	8003c48 <_malloc_r+0x28>
 8003c3c:	230c      	movs	r3, #12
 8003c3e:	2600      	movs	r6, #0
 8003c40:	603b      	str	r3, [r7, #0]
 8003c42:	4630      	mov	r0, r6
 8003c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c48:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003d1c <_malloc_r+0xfc>
 8003c4c:	f000 f868 	bl	8003d20 <__malloc_lock>
 8003c50:	f8d8 3000 	ldr.w	r3, [r8]
 8003c54:	461c      	mov	r4, r3
 8003c56:	bb5c      	cbnz	r4, 8003cb0 <_malloc_r+0x90>
 8003c58:	4629      	mov	r1, r5
 8003c5a:	4638      	mov	r0, r7
 8003c5c:	f7ff ffc0 	bl	8003be0 <sbrk_aligned>
 8003c60:	1c43      	adds	r3, r0, #1
 8003c62:	4604      	mov	r4, r0
 8003c64:	d155      	bne.n	8003d12 <_malloc_r+0xf2>
 8003c66:	f8d8 4000 	ldr.w	r4, [r8]
 8003c6a:	4626      	mov	r6, r4
 8003c6c:	2e00      	cmp	r6, #0
 8003c6e:	d145      	bne.n	8003cfc <_malloc_r+0xdc>
 8003c70:	2c00      	cmp	r4, #0
 8003c72:	d048      	beq.n	8003d06 <_malloc_r+0xe6>
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	4631      	mov	r1, r6
 8003c78:	4638      	mov	r0, r7
 8003c7a:	eb04 0903 	add.w	r9, r4, r3
 8003c7e:	f000 f863 	bl	8003d48 <_sbrk_r>
 8003c82:	4581      	cmp	r9, r0
 8003c84:	d13f      	bne.n	8003d06 <_malloc_r+0xe6>
 8003c86:	6821      	ldr	r1, [r4, #0]
 8003c88:	4638      	mov	r0, r7
 8003c8a:	1a6d      	subs	r5, r5, r1
 8003c8c:	4629      	mov	r1, r5
 8003c8e:	f7ff ffa7 	bl	8003be0 <sbrk_aligned>
 8003c92:	3001      	adds	r0, #1
 8003c94:	d037      	beq.n	8003d06 <_malloc_r+0xe6>
 8003c96:	6823      	ldr	r3, [r4, #0]
 8003c98:	442b      	add	r3, r5
 8003c9a:	6023      	str	r3, [r4, #0]
 8003c9c:	f8d8 3000 	ldr.w	r3, [r8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d038      	beq.n	8003d16 <_malloc_r+0xf6>
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	42a2      	cmp	r2, r4
 8003ca8:	d12b      	bne.n	8003d02 <_malloc_r+0xe2>
 8003caa:	2200      	movs	r2, #0
 8003cac:	605a      	str	r2, [r3, #4]
 8003cae:	e00f      	b.n	8003cd0 <_malloc_r+0xb0>
 8003cb0:	6822      	ldr	r2, [r4, #0]
 8003cb2:	1b52      	subs	r2, r2, r5
 8003cb4:	d41f      	bmi.n	8003cf6 <_malloc_r+0xd6>
 8003cb6:	2a0b      	cmp	r2, #11
 8003cb8:	d917      	bls.n	8003cea <_malloc_r+0xca>
 8003cba:	1961      	adds	r1, r4, r5
 8003cbc:	42a3      	cmp	r3, r4
 8003cbe:	6025      	str	r5, [r4, #0]
 8003cc0:	bf18      	it	ne
 8003cc2:	6059      	strne	r1, [r3, #4]
 8003cc4:	6863      	ldr	r3, [r4, #4]
 8003cc6:	bf08      	it	eq
 8003cc8:	f8c8 1000 	streq.w	r1, [r8]
 8003ccc:	5162      	str	r2, [r4, r5]
 8003cce:	604b      	str	r3, [r1, #4]
 8003cd0:	4638      	mov	r0, r7
 8003cd2:	f104 060b 	add.w	r6, r4, #11
 8003cd6:	f000 f829 	bl	8003d2c <__malloc_unlock>
 8003cda:	f026 0607 	bic.w	r6, r6, #7
 8003cde:	1d23      	adds	r3, r4, #4
 8003ce0:	1af2      	subs	r2, r6, r3
 8003ce2:	d0ae      	beq.n	8003c42 <_malloc_r+0x22>
 8003ce4:	1b9b      	subs	r3, r3, r6
 8003ce6:	50a3      	str	r3, [r4, r2]
 8003ce8:	e7ab      	b.n	8003c42 <_malloc_r+0x22>
 8003cea:	42a3      	cmp	r3, r4
 8003cec:	6862      	ldr	r2, [r4, #4]
 8003cee:	d1dd      	bne.n	8003cac <_malloc_r+0x8c>
 8003cf0:	f8c8 2000 	str.w	r2, [r8]
 8003cf4:	e7ec      	b.n	8003cd0 <_malloc_r+0xb0>
 8003cf6:	4623      	mov	r3, r4
 8003cf8:	6864      	ldr	r4, [r4, #4]
 8003cfa:	e7ac      	b.n	8003c56 <_malloc_r+0x36>
 8003cfc:	4634      	mov	r4, r6
 8003cfe:	6876      	ldr	r6, [r6, #4]
 8003d00:	e7b4      	b.n	8003c6c <_malloc_r+0x4c>
 8003d02:	4613      	mov	r3, r2
 8003d04:	e7cc      	b.n	8003ca0 <_malloc_r+0x80>
 8003d06:	230c      	movs	r3, #12
 8003d08:	4638      	mov	r0, r7
 8003d0a:	603b      	str	r3, [r7, #0]
 8003d0c:	f000 f80e 	bl	8003d2c <__malloc_unlock>
 8003d10:	e797      	b.n	8003c42 <_malloc_r+0x22>
 8003d12:	6025      	str	r5, [r4, #0]
 8003d14:	e7dc      	b.n	8003cd0 <_malloc_r+0xb0>
 8003d16:	605b      	str	r3, [r3, #4]
 8003d18:	deff      	udf	#255	; 0xff
 8003d1a:	bf00      	nop
 8003d1c:	20000188 	.word	0x20000188

08003d20 <__malloc_lock>:
 8003d20:	4801      	ldr	r0, [pc, #4]	; (8003d28 <__malloc_lock+0x8>)
 8003d22:	f000 b84b 	b.w	8003dbc <__retarget_lock_acquire_recursive>
 8003d26:	bf00      	nop
 8003d28:	200002c8 	.word	0x200002c8

08003d2c <__malloc_unlock>:
 8003d2c:	4801      	ldr	r0, [pc, #4]	; (8003d34 <__malloc_unlock+0x8>)
 8003d2e:	f000 b846 	b.w	8003dbe <__retarget_lock_release_recursive>
 8003d32:	bf00      	nop
 8003d34:	200002c8 	.word	0x200002c8

08003d38 <memset>:
 8003d38:	4603      	mov	r3, r0
 8003d3a:	4402      	add	r2, r0
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d100      	bne.n	8003d42 <memset+0xa>
 8003d40:	4770      	bx	lr
 8003d42:	f803 1b01 	strb.w	r1, [r3], #1
 8003d46:	e7f9      	b.n	8003d3c <memset+0x4>

08003d48 <_sbrk_r>:
 8003d48:	b538      	push	{r3, r4, r5, lr}
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	4d05      	ldr	r5, [pc, #20]	; (8003d64 <_sbrk_r+0x1c>)
 8003d4e:	4604      	mov	r4, r0
 8003d50:	4608      	mov	r0, r1
 8003d52:	602b      	str	r3, [r5, #0]
 8003d54:	f7fc ff4c 	bl	8000bf0 <_sbrk>
 8003d58:	1c43      	adds	r3, r0, #1
 8003d5a:	d102      	bne.n	8003d62 <_sbrk_r+0x1a>
 8003d5c:	682b      	ldr	r3, [r5, #0]
 8003d5e:	b103      	cbz	r3, 8003d62 <_sbrk_r+0x1a>
 8003d60:	6023      	str	r3, [r4, #0]
 8003d62:	bd38      	pop	{r3, r4, r5, pc}
 8003d64:	200002cc 	.word	0x200002cc

08003d68 <__errno>:
 8003d68:	4b01      	ldr	r3, [pc, #4]	; (8003d70 <__errno+0x8>)
 8003d6a:	6818      	ldr	r0, [r3, #0]
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	2000005c 	.word	0x2000005c

08003d74 <__libc_init_array>:
 8003d74:	b570      	push	{r4, r5, r6, lr}
 8003d76:	2600      	movs	r6, #0
 8003d78:	4d0c      	ldr	r5, [pc, #48]	; (8003dac <__libc_init_array+0x38>)
 8003d7a:	4c0d      	ldr	r4, [pc, #52]	; (8003db0 <__libc_init_array+0x3c>)
 8003d7c:	1b64      	subs	r4, r4, r5
 8003d7e:	10a4      	asrs	r4, r4, #2
 8003d80:	42a6      	cmp	r6, r4
 8003d82:	d109      	bne.n	8003d98 <__libc_init_array+0x24>
 8003d84:	f000 f864 	bl	8003e50 <_init>
 8003d88:	2600      	movs	r6, #0
 8003d8a:	4d0a      	ldr	r5, [pc, #40]	; (8003db4 <__libc_init_array+0x40>)
 8003d8c:	4c0a      	ldr	r4, [pc, #40]	; (8003db8 <__libc_init_array+0x44>)
 8003d8e:	1b64      	subs	r4, r4, r5
 8003d90:	10a4      	asrs	r4, r4, #2
 8003d92:	42a6      	cmp	r6, r4
 8003d94:	d105      	bne.n	8003da2 <__libc_init_array+0x2e>
 8003d96:	bd70      	pop	{r4, r5, r6, pc}
 8003d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d9c:	4798      	blx	r3
 8003d9e:	3601      	adds	r6, #1
 8003da0:	e7ee      	b.n	8003d80 <__libc_init_array+0xc>
 8003da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da6:	4798      	blx	r3
 8003da8:	3601      	adds	r6, #1
 8003daa:	e7f2      	b.n	8003d92 <__libc_init_array+0x1e>
 8003dac:	08003eb0 	.word	0x08003eb0
 8003db0:	08003eb0 	.word	0x08003eb0
 8003db4:	08003eb0 	.word	0x08003eb0
 8003db8:	08003eb4 	.word	0x08003eb4

08003dbc <__retarget_lock_acquire_recursive>:
 8003dbc:	4770      	bx	lr

08003dbe <__retarget_lock_release_recursive>:
 8003dbe:	4770      	bx	lr

08003dc0 <_free_r>:
 8003dc0:	b538      	push	{r3, r4, r5, lr}
 8003dc2:	4605      	mov	r5, r0
 8003dc4:	2900      	cmp	r1, #0
 8003dc6:	d040      	beq.n	8003e4a <_free_r+0x8a>
 8003dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dcc:	1f0c      	subs	r4, r1, #4
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	bfb8      	it	lt
 8003dd2:	18e4      	addlt	r4, r4, r3
 8003dd4:	f7ff ffa4 	bl	8003d20 <__malloc_lock>
 8003dd8:	4a1c      	ldr	r2, [pc, #112]	; (8003e4c <_free_r+0x8c>)
 8003dda:	6813      	ldr	r3, [r2, #0]
 8003ddc:	b933      	cbnz	r3, 8003dec <_free_r+0x2c>
 8003dde:	6063      	str	r3, [r4, #4]
 8003de0:	6014      	str	r4, [r2, #0]
 8003de2:	4628      	mov	r0, r5
 8003de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003de8:	f7ff bfa0 	b.w	8003d2c <__malloc_unlock>
 8003dec:	42a3      	cmp	r3, r4
 8003dee:	d908      	bls.n	8003e02 <_free_r+0x42>
 8003df0:	6820      	ldr	r0, [r4, #0]
 8003df2:	1821      	adds	r1, r4, r0
 8003df4:	428b      	cmp	r3, r1
 8003df6:	bf01      	itttt	eq
 8003df8:	6819      	ldreq	r1, [r3, #0]
 8003dfa:	685b      	ldreq	r3, [r3, #4]
 8003dfc:	1809      	addeq	r1, r1, r0
 8003dfe:	6021      	streq	r1, [r4, #0]
 8003e00:	e7ed      	b.n	8003dde <_free_r+0x1e>
 8003e02:	461a      	mov	r2, r3
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	b10b      	cbz	r3, 8003e0c <_free_r+0x4c>
 8003e08:	42a3      	cmp	r3, r4
 8003e0a:	d9fa      	bls.n	8003e02 <_free_r+0x42>
 8003e0c:	6811      	ldr	r1, [r2, #0]
 8003e0e:	1850      	adds	r0, r2, r1
 8003e10:	42a0      	cmp	r0, r4
 8003e12:	d10b      	bne.n	8003e2c <_free_r+0x6c>
 8003e14:	6820      	ldr	r0, [r4, #0]
 8003e16:	4401      	add	r1, r0
 8003e18:	1850      	adds	r0, r2, r1
 8003e1a:	4283      	cmp	r3, r0
 8003e1c:	6011      	str	r1, [r2, #0]
 8003e1e:	d1e0      	bne.n	8003de2 <_free_r+0x22>
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	4408      	add	r0, r1
 8003e26:	6010      	str	r0, [r2, #0]
 8003e28:	6053      	str	r3, [r2, #4]
 8003e2a:	e7da      	b.n	8003de2 <_free_r+0x22>
 8003e2c:	d902      	bls.n	8003e34 <_free_r+0x74>
 8003e2e:	230c      	movs	r3, #12
 8003e30:	602b      	str	r3, [r5, #0]
 8003e32:	e7d6      	b.n	8003de2 <_free_r+0x22>
 8003e34:	6820      	ldr	r0, [r4, #0]
 8003e36:	1821      	adds	r1, r4, r0
 8003e38:	428b      	cmp	r3, r1
 8003e3a:	bf01      	itttt	eq
 8003e3c:	6819      	ldreq	r1, [r3, #0]
 8003e3e:	685b      	ldreq	r3, [r3, #4]
 8003e40:	1809      	addeq	r1, r1, r0
 8003e42:	6021      	streq	r1, [r4, #0]
 8003e44:	6063      	str	r3, [r4, #4]
 8003e46:	6054      	str	r4, [r2, #4]
 8003e48:	e7cb      	b.n	8003de2 <_free_r+0x22>
 8003e4a:	bd38      	pop	{r3, r4, r5, pc}
 8003e4c:	20000188 	.word	0x20000188

08003e50 <_init>:
 8003e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e52:	bf00      	nop
 8003e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e56:	bc08      	pop	{r3}
 8003e58:	469e      	mov	lr, r3
 8003e5a:	4770      	bx	lr

08003e5c <_fini>:
 8003e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5e:	bf00      	nop
 8003e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e62:	bc08      	pop	{r3}
 8003e64:	469e      	mov	lr, r3
 8003e66:	4770      	bx	lr
